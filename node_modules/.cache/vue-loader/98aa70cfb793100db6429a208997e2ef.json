{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/socket.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/socket.vue","mtime":1561000633000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n#toast-container {\n    position: fixed;\n    z-index: 999999;\n    right: 24px;\n    top: 10px;\n    .toast-error {\n        background-color: #bd362f;\n    }\n\n    .toast {\n        span {\n            font-size: 24px;\n            position: absolute;\n            left: 4%;\n            top: 34%;\n        }\n        i {\n            position: absolute;\n            right: 5%;\n            top: 35%;\n            font-size: 15px;\n            color: darkslategrey;\n        }\n        position: relative;\n        pointer-events: auto;\n        overflow: hidden;\n        margin: 0 0 6px;\n        padding: 15px 15px 15px 50px;\n        width: 300px;\n        -moz-border-radius: 3px;\n        -webkit-border-radius: 3px;\n        border-radius: 3px;\n        background-position: 15px center;\n        background-repeat: no-repeat;\n        -moz-box-shadow: 0 0 12px #999;\n        -webkit-box-shadow: 0 0 12px #999;\n        box-shadow: 0 0 12px #999;\n        color: #fff;\n        opacity: .8;\n        -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=80);\n        filter: alpha(opacity=80);\n    }\n    .toast-title {\n        font-weight: bold;\n    }\n    .toast-message {\n        word-wrap: break-word;\n        cursor: pointer;\n    }\n}\n#toast-container * {\n    box-sizing: border-box;\n}\n",{"version":3,"sources":["socket.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"socket.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"toast-container\" class=\"toast-top-right\" v-show=\"alertData.length > 0\">\n        <div class=\"toast toast-error\" aria-live=\"polite\" v-for=\"(item, key) in alertData\" :key=\"key\">\n            <span class=\"fa fa-warning\"></span>\n            <h4 class=\"toast-title\">{{item.title}}</h4>\n            <div class=\"toast-message\" @click=\"$router.push('/alerts/detail/' + item.id)\">{{item.desc}}</div>\n            <i class=\"fa fa-close\" @click=\"hide(key)\"></i>\n        </div>\n    </div>\n</template>\n\n<style lang=\"scss\">\n    #toast-container {\n        position: fixed;\n        z-index: 999999;\n        right: 24px;\n        top: 10px;\n        .toast-error {\n            background-color: #bd362f;\n        }\n\n        .toast {\n            span {\n                font-size: 24px;\n                position: absolute;\n                left: 4%;\n                top: 34%;\n            }\n            i {\n                position: absolute;\n                right: 5%;\n                top: 35%;\n                font-size: 15px;\n                color: darkslategrey;\n            }\n            position: relative;\n            pointer-events: auto;\n            overflow: hidden;\n            margin: 0 0 6px;\n            padding: 15px 15px 15px 50px;\n            width: 300px;\n            -moz-border-radius: 3px;\n            -webkit-border-radius: 3px;\n            border-radius: 3px;\n            background-position: 15px center;\n            background-repeat: no-repeat;\n            -moz-box-shadow: 0 0 12px #999;\n            -webkit-box-shadow: 0 0 12px #999;\n            box-shadow: 0 0 12px #999;\n            color: #fff;\n            opacity: .8;\n            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=80);\n            filter: alpha(opacity=80);\n        }\n        .toast-title {\n            font-weight: bold;\n        }\n        .toast-message {\n            word-wrap: break-word;\n            cursor: pointer;\n        }\n    }\n    #toast-container * {\n        box-sizing: border-box;\n    }\n</style>\n\n<script>\n    import httpClient from \"@/utils/httpclient\";\n    import { getDateString } from \"@/utils/date\";\n    import SockJs from 'sockjs-client';\n    export default {\n        name: \"socketWarn\",\n        data() {\n            return {\n                topics: [\n                    'queue.saas.alertPushMsgTopic',\n                    'queue.saas.checkInRecordTopic'\n                ],\n                socketUrl: process.env.VUE_APP_SOCKET_URL,\n                maxConnect: 10,\n                connect: 0,\n                data: null,\n                alertData: []\n            }\n        },\n        mounted() {\n            httpClient.post('/api/v1/socketToken', {\n                topics: this.topics\n            }).then(response => {\n                if (response.data.data && response.data.code == 200) {\n                    this.$store.dispatch('save_socket_data', response.data.data);\n                    this.initSocket(response.data.data);\n                }\n            })\n        },\n        methods:{\n            hide(key) {\n                this.alertData.splice(key, 1);\n            },\n            alertMessage(message) {\n                let year = message.year ? message.year : 'N/A';\n                let make = message.make ? message.make : 'N/A';\n                let model = message.model ? message.model : 'N/A';\n                let vehicleInfo = (!message.year && !message.make && !message.model) ? 'N/A' : `${year} ${make} ${model}`;\n                let stockNum = message.stockNum ? message.stockNum : 'N/A';\n                let createTime = message.createTime ? getDateString(message.createTime) : 'N/A';\n                this.alertData.push({\n                    title: message.alertTypeName,\n                    id: message.alertId,\n                    desc: `${stockNum} | ${vehicleInfo} ${message.alertDescription} ${createTime}`\n                });\n                setTimeout(() => {\n                    this.hide(this.alertData.length - 1);\n                }, 100000);\n            },\n            filterMessage(data) {\n                let tempData = [{\n                    user: data.firstName + \" \" + data.lastName,\n                    action: data.available == '1' ? 'has just checked in' : 'has just checked out',\n                    vehicle: `${data.year ? data.year : 'N/A'} ${data.make ? data.make : 'N/A'} ${data.model ? data.model : 'N/A'}`,\n                    time: getDateString(Number(data.createTime)),\n                    vehicleId: data.vehicleId,\n                    userId: data.checkUserId\n                }];\n                this.$store.dispatch('save_log_list', tempData);\n            },\n            initSocket(respData) {\n                let self = this;\n                let sock = new SockJs(this.socketUrl + '/echo/?token=' + encodeURIComponent(respData.token));\n                sock.onopen = function () {\n                    self.connect += 1;\n                };\n                sock.onmessage = function (e) {\n                    let message = JSON.parse(e.data);\n                    switch (message.topic) {\n                        case self.topics[0] + respData.storeId + respData.tenantId:\n                            self.alertMessage(JSON.parse(message.message));\n                            break;\n                        case self.topics[1]:\n                            self.filterMessage(JSON.parse(message.message));\n                        default:\n                            break;\n                    }\n                };\n                sock.onclose = function () {\n                    if (self.connect < self.maxConnect) {\n                        setTimeout(() => {\n                            self.initSocket(self.$store.getters.socketData)\n                        }, self.connect * 20000);\n                    }\n                }\n            }\n        }\n    }\n</script>"]}]}