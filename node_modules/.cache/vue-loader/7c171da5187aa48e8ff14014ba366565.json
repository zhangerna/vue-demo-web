{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/searchMapForGoogle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/searchMapForGoogle.vue","mtime":1574315938000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport google from \"google\"\nimport httpClient from '@/utils/httpclient';\nexport default {\n    name: \"SearchMapForGoogle\",\n    props: [\"map\", \"from\"],\n    data() {\n        return {\n            mapInfo: {\n                lots:[],\n                lat:0,\n                lng:0,\n                vehicleInfo:[],\n                showMult:true\n            },\n            mapObj: {},\n            marker: null,\n            polygon: null,\n            markers: [],\n            bounds: null,\n        }\n    },\n    watch: {\n        map: function (newVal) {\n            console.log(\"----\");\n            if (newVal) {\n                this.mapInfo.lots = newVal.lots;\n                this.mapInfo.lat = newVal.lots.length > 0 ? newVal.lots[0].centerCoordinate.split(' ')[1] : 31.3249335128696;\n                this.mapInfo.lng = newVal.lots.length > 0 ? newVal.lots[0].centerCoordinate.split(' ')[0] : 121.594292808653;\n                this.mapInfo.vehicleInfo = newVal.vehicles;\n                this.initMap();\n            }\n        }\n    },\n    methods: {\n        getYMDString(time) {\n            console.log(time)\n            if(time){\n                let date = new Date(time);\n                let Y = date.getFullYear() + ' ';\n                let M = (date.getMonth() + 1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1);\n                let D = date.getDate() < 10 ? '0' + date.getDate() : date.getDate() ;\n                let h = date.getHours() < 10 ? '0' + date.getHours() : date.getHours() ;\n                let m = date.getMinutes() < 10 ? '0' + date.getMinutes()  : date.getMinutes();\n                return  M + '/' + D + '/' + Y + ' ' + h +':'+ m +  ' ';\n            }else{\n                return  '';\n            }\n\n        },\n        addMarker(position, title, item) {\n            var marker = new google.maps.Marker({\n                position: position,\n                map: this.mapObj,\n                animation: google.maps.Animation.DROP,\n                title: title,\n                icon: {\n                    url: item.currentVoltage < 11.7 ? \"https://cdn.shopify.com/s/files/1/0703/1149/files/Location.png?807016\" : \"https://pic.zus.ai/saas/vehicle.png\",\n                    scaledSize: new google.maps.Size(30, 30)\n                }\n            });\n            this.bounds.extend(marker.getPosition());\n            this.markers.push(marker);\n            let self = this;\n            marker.addListener('click', function () {\n                let lang='';\n                if(self.$i18n.locale === 'zh-CN'){\n                    lang = 'China'\n                }else{\n                    lang = 'US'\n                }\n\n                let link = '/api/v1/getlastLocation?lastlocationlat='+item.lastLocationLat+'&lastlocationlng='+item.lastLocationLng+'&country='+lang;\n                let myString='';\n                httpClient.get(link).then(res=>{\n                    if(res.data.code === 200){\n                        let p = item.currentVoltage < 11.7 ? `<p style=\"margin-bottom:6px;font-size: 12px;\">${ self.$t('m.common.voltage') }:  <span style=\"color: red\"> <i class=\"fa fa-exclamation-triangle\"></i> ${item.currentVoltage}V</span></p>` : `<p style=\"margin-bottom:6px;font-size: 12px;\">${ self.$t('m.common.voltage') }:${item.currentVoltage}V</p>`;\n                        myString = `<a href='/vehicle/detail/${item.vehicleId}'>\n                        <img style=\"background: #3a4149\" src=\"${item.photoUrl ? item.photoUrl : '/img/placeholder.5367544d.svg'}\" width=\"40%\">\n                        <h5 id=\"firstHeading\" class=\"firstHeading\">\n                            <a target=\"_blank\" href=\"/vehicle/${item.saleStatus === 1 ?\"vehicle\":\"sold-manager\"}/${item.vehicleId}\">${item.year ? item.year :'N/A'} ${item.make ? item.make :'N/A'} ${item.model ? item.model:'N/A'} ${item.alias? \"-\" + item.alias: ''}</a>\n                        </h5>\n                        <p style=\"margin-bottom:6px;font-size: 12px\">VIN:${item.vin}</p>\n                        ${p}\n                        <p style=\"margin-bottom:6px;font-size: 12px\">${self.$t('m.common.last_location')}:${res.data.data.locationName}</p>\n                        <p style=\"margin-bottom:6px;font-size: 12px\">${self.$t('m.common.last_update')}:${self.getYMDString(item.locationTime)}</p>\n                        </a>`;\n                        let infoWindow = new google.maps.InfoWindow({\n                            content:myString\n                        });\n\n                        infoWindow.open(this.mapObj, marker);\n                    }\n                })\n            })\n        },\n        initMap(){\n            this.mapObj = new google.maps.Map(document.getElementById(\"google-map\"), {\n                zoom: 15,\n                center: {lng: Number(this.mapInfo.lng), lat: Number(this.mapInfo.lat)}\n            });\n\n            let coords=[];\n            if(this.mapInfo.lots.length > 0){\n                this.mapInfo.lots.map(item => {\n                    let myArr=[];\n                    if (item.areaCoordinate) {\n                        item.areaCoordinate.map(val=>{\n                            myArr.push({lat: Number(val.split(\",\")[1]), lng: Number(val.split(\",\")[0]) })\n                        });\n                        coords.push(myArr)\n                    }\n                });\n            }\n\n            this.bounds = new google.maps.LatLngBounds();\n\n            if (this.mapInfo.showMult && this.mapInfo.vehicleInfo.length > 0) {\n                this.mapInfo.vehicleInfo.map(item => {\n                    if(item.lastLocationLat ){\n                        let position = {lat: Number(item.lastLocationLat), lng: Number(item.lastLocationLng)};\n                        let title = `${item.year? item.year :'N/A'} ${item.make? item.make :'N/A'} ${item.model? item.model:'N/A'} - ${item.alias? item.alias:'N/A'}`;\n                        this.addMarker(position, title, item);\n                    }\n                })\n            }\n            this.mapObj.fitBounds(this.bounds);\n\n            this.polygon = new google.maps.Polygon({\n                paths: coords,\n                strokeColor: '#FF0000',\n                strokeOpacity: 0.8,\n                strokeWeight: 2,\n                fillColor: '#FF0000',\n                fillOpacity: 0.35\n            });\n            this.polygon.setMap(this.mapObj);\n            new google.maps.drawing.DrawingManager({\n                drawingControl: true,\n                drawingControlOptions: {\n                    position: google.maps.ControlPosition.TOP_CENTER,\n                    drawingModes: [\n                        google.maps.drawing.OverlayType.POLYGON\n                    ]\n                },\n\n                circleOptions: {\n                    fillColor: '#ffff00',\n                    fillOpacity: 1,\n                    strokeWeight: 5,\n                    clickable: false,\n                    editable: true,\n                    zIndex: 1\n                },\n\n                polygonOptions: {\n                    strokeColor: \"#FF0000\",\n                    strokeOpacity: 0.8,\n                    strokeWeight: 2,\n                    fillColor: \"#FF0000\",\n                    fillOpacity: 0.35,\n                    editable: true,\n                }\n            });\n\n        }\n    }\n}\n",{"version":3,"sources":["searchMapForGoogle.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAofile":"searchMapForGoogle.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"google-map\"></div>\n</template>\n\n<style lang=\"scss\">\n    #google-map {\n        width: 100%;\n        height: 60vh;\n        margin-bottom: 5vh;\n        .gm-style .gm-style-iw-d {\n            max-width: 280px !important;\n\n            img {\n                width: 100%;\n            }\n        }\n    }\n</style>\n\n<script>\n    import google from \"google\"\n    import httpClient from '@/utils/httpclient';\n    export default {\n        name: \"SearchMapForGoogle\",\n        props: [\"map\", \"from\"],\n        data() {\n            return {\n                mapInfo: {\n                    lots:[],\n                    lat:0,\n                    lng:0,\n                    vehicleInfo:[],\n                    showMult:true\n                },\n                mapObj: {},\n                marker: null,\n                polygon: null,\n                markers: [],\n                bounds: null,\n            }\n        },\n        watch: {\n            map: function (newVal) {\n                console.log(\"----\");\n                if (newVal) {\n                    this.mapInfo.lots = newVal.lots;\n                    this.mapInfo.lat = newVal.lots.length > 0 ? newVal.lots[0].centerCoordinate.split(' ')[1] : 31.3249335128696;\n                    this.mapInfo.lng = newVal.lots.length > 0 ? newVal.lots[0].centerCoordinate.split(' ')[0] : 121.594292808653;\n                    this.mapInfo.vehicleInfo = newVal.vehicles;\n                    this.initMap();\n                }\n            }\n        },\n        methods: {\n            getYMDString(time) {\n                console.log(time)\n                if(time){\n                    let date = new Date(time);\n                    let Y = date.getFullYear() + ' ';\n                    let M = (date.getMonth() + 1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1);\n                    let D = date.getDate() < 10 ? '0' + date.getDate() : date.getDate() ;\n                    let h = date.getHours() < 10 ? '0' + date.getHours() : date.getHours() ;\n                    let m = date.getMinutes() < 10 ? '0' + date.getMinutes()  : date.getMinutes();\n                    return  M + '/' + D + '/' + Y + ' ' + h +':'+ m +  ' ';\n                }else{\n                    return  '';\n                }\n\n            },\n            addMarker(position, title, item) {\n                var marker = new google.maps.Marker({\n                    position: position,\n                    map: this.mapObj,\n                    animation: google.maps.Animation.DROP,\n                    title: title,\n                    icon: {\n                        url: item.currentVoltage < 11.7 ? \"https://cdn.shopify.com/s/files/1/0703/1149/files/Location.png?807016\" : \"https://pic.zus.ai/saas/vehicle.png\",\n                        scaledSize: new google.maps.Size(30, 30)\n                    }\n                });\n                this.bounds.extend(marker.getPosition());\n                this.markers.push(marker);\n                let self = this;\n                marker.addListener('click', function () {\n                    let lang='';\n                    if(self.$i18n.locale === 'zh-CN'){\n                        lang = 'China'\n                    }else{\n                        lang = 'US'\n                    }\n\n                    let link = '/api/v1/getlastLocation?lastlocationlat='+item.lastLocationLat+'&lastlocationlng='+item.lastLocationLng+'&country='+lang;\n                    let myString='';\n                    httpClient.get(link).then(res=>{\n                        if(res.data.code === 200){\n                            let p = item.currentVoltage < 11.7 ? `<p style=\"margin-bottom:6px;font-size: 12px;\">${ self.$t('m.common.voltage') }:  <span style=\"color: red\"> <i class=\"fa fa-exclamation-triangle\"></i> ${item.currentVoltage}V</span></p>` : `<p style=\"margin-bottom:6px;font-size: 12px;\">${ self.$t('m.common.voltage') }:${item.currentVoltage}V</p>`;\n                            myString = `<a href='/vehicle/detail/${item.vehicleId}'>\n                            <img style=\"background: #3a4149\" src=\"${item.photoUrl ? item.photoUrl : '/img/placeholder.5367544d.svg'}\" width=\"40%\">\n                            <h5 id=\"firstHeading\" class=\"firstHeading\">\n                                <a target=\"_blank\" href=\"/vehicle/${item.saleStatus === 1 ?\"vehicle\":\"sold-manager\"}/${item.vehicleId}\">${item.year ? item.year :'N/A'} ${item.make ? item.make :'N/A'} ${item.model ? item.model:'N/A'} ${item.alias? \"-\" + item.alias: ''}</a>\n                            </h5>\n                            <p style=\"margin-bottom:6px;font-size: 12px\">VIN:${item.vin}</p>\n                            ${p}\n                            <p style=\"margin-bottom:6px;font-size: 12px\">${self.$t('m.common.last_location')}:${res.data.data.locationName}</p>\n                            <p style=\"margin-bottom:6px;font-size: 12px\">${self.$t('m.common.last_update')}:${self.getYMDString(item.locationTime)}</p>\n                            </a>`;\n                            let infoWindow = new google.maps.InfoWindow({\n                                content:myString\n                            });\n\n                            infoWindow.open(this.mapObj, marker);\n                        }\n                    })\n                })\n            },\n            initMap(){\n                this.mapObj = new google.maps.Map(document.getElementById(\"google-map\"), {\n                    zoom: 15,\n                    center: {lng: Number(this.mapInfo.lng), lat: Number(this.mapInfo.lat)}\n                });\n\n                let coords=[];\n                if(this.mapInfo.lots.length > 0){\n                    this.mapInfo.lots.map(item => {\n                        let myArr=[];\n                        if (item.areaCoordinate) {\n                            item.areaCoordinate.map(val=>{\n                                myArr.push({lat: Number(val.split(\",\")[1]), lng: Number(val.split(\",\")[0]) })\n                            });\n                            coords.push(myArr)\n                        }\n                    });\n                }\n\n                this.bounds = new google.maps.LatLngBounds();\n\n                if (this.mapInfo.showMult && this.mapInfo.vehicleInfo.length > 0) {\n                    this.mapInfo.vehicleInfo.map(item => {\n                        if(item.lastLocationLat ){\n                            let position = {lat: Number(item.lastLocationLat), lng: Number(item.lastLocationLng)};\n                            let title = `${item.year? item.year :'N/A'} ${item.make? item.make :'N/A'} ${item.model? item.model:'N/A'} - ${item.alias? item.alias:'N/A'}`;\n                            this.addMarker(position, title, item);\n                        }\n                    })\n                }\n                this.mapObj.fitBounds(this.bounds);\n\n                this.polygon = new google.maps.Polygon({\n                    paths: coords,\n                    strokeColor: '#FF0000',\n                    strokeOpacity: 0.8,\n                    strokeWeight: 2,\n                    fillColor: '#FF0000',\n                    fillOpacity: 0.35\n                });\n                this.polygon.setMap(this.mapObj);\n                new google.maps.drawing.DrawingManager({\n                    drawingControl: true,\n                    drawingControlOptions: {\n                        position: google.maps.ControlPosition.TOP_CENTER,\n                        drawingModes: [\n                            google.maps.drawing.OverlayType.POLYGON\n                        ]\n                    },\n\n                    circleOptions: {\n                        fillColor: '#ffff00',\n                        fillOpacity: 1,\n                        strokeWeight: 5,\n                        clickable: false,\n                        editable: true,\n                        zIndex: 1\n                    },\n\n                    polygonOptions: {\n                        strokeColor: \"#FF0000\",\n                        strokeOpacity: 0.8,\n                        strokeWeight: 2,\n                        fillColor: \"#FF0000\",\n                        fillOpacity: 0.35,\n                        editable: true,\n                    }\n                });\n\n            }\n        }\n    }\n</script>\n"]}]}