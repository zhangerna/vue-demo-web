{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/vehicle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/vehicle.vue","mtime":1569469066000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport httpclient from '@/utils/httpclient';\nimport myMap from '@components/map'\nimport searchMap from '@components/searchMap'\n\nexport default {\n    name: \"vehicle\",\n    components: {\n        myMap,\n        searchMap\n    },\n    inject: [\"reload\"],\n    data() {\n        return {\n            selected_parking:null,\n            selected_battery:null,\n            selected_offline:null,\n            selected_drive:null,\n            parking_list:{\n                label:'',\n                type:'',\n                key:'',\n                list:[]\n            },\n            battery_list:{\n                label:'',\n                type:'',\n                key:'',\n                list:[]\n            },\n            offline_list:{\n                label:'',\n                type:'',\n                key:'',\n                list:[]\n            },\n            drive_list:{\n                label:'',\n                type:'',\n                key:'',\n                list:[]\n            },\n            vehicleInsertId: null,\n            vehicleColor: null,\n            vehicleType: 0,\n            insertTip: false,\n            insertStatus: '',\n            insertTipContent: '',\n            vehicleTypeList: [{c: this.$t('m.common.c_new'), y: \"1\"}, { c: this.$t('m.common.c_used'), y: \"3\"}, { c: this.$t('m.common.c_demo'), y: \"2\" }, {c: this.$t('m.common.test_drive'), y: \"4\"}],\n            showList:'true',\n            searchGoogleMap:{},\n            searchGaodeMap:{},\n            tableFields: {\n                photoUrl: {\n                    label: this.$t('m.vehicle.photo'),\n                    class: 'text-center'\n                },\n                vehicle: {\n                    label: this.$t('m.vehicle.vehicle'),\n                    class: 'text-center'\n                },\n                battery: {\n                    label: this.$t('m.common.voltage'),\n                    class: 'text-center'\n                },\n                online: {\n                    label: this.$t('m.common.line_status'),\n                    class: 'text-center'\n                },\n                use: {\n                    label: this.$t('m.common.use_status'),\n                    class: 'text-center'\n                },\n                park: {\n                    label: this.$t('m.common.lot'),\n                    class: 'text-center'\n                },\n                price: {\n                    label: this.$t('m.common.price') + this.$t('m.common.mon_type'),\n                    class: 'text-center'\n                },\n                mileage: {\n                    label: this.$t('m.vehicle.mileage') + this.$t('m.common.m_type'),\n                    class: 'text-center'\n                },\n                inventory: {\n                    label: this.$t('m.vehicle.inv_age'),\n                    class: 'text-center'\n                },\n                daysIdle: {\n                    label: this.$t('m.vehicle.day_idle'),\n                    class: 'text-center'\n                },\n                action: {\n                    label: this.$t('m.common.action'),\n                    class: 'text-center'\n                }\n            },\n            countList:[20,50,100,200],\n            countSize:20,\n            data: null,\n            table: null,\n            showMap: false,\n            map: {},\n            rows: 0,\n            currentPage: 1,\n            total: 0,\n            perPage: 10,\n            showDelMap: false,\n            delId: '',\n            showEtip: false,\n            pageCount: 0,\n            gFData: [],\n            search: '',\n            queryData: {},\n            changedLanguage:false,\n            showChainTip: false,\n            colorList: [{c: this.$t('m.colors.black'), y: \"Black\"}, {c: this.$t('m.colors.white'), y:'White'}, {c: this.$t('m.colors.silver'), y: 'Silver'}, {c: this.$t('m.colors.blue'), y: 'Blue'}, {c: this.$t('m.colors.red'), y: 'Red'}, {c: this.$t('m.colors.brown'), y: 'Brown'}, {c: this.$t('m.colors.gold'), y: 'Gold'}, {c: this.$t('m.colors.orange'), y: 'Orange'}, {c: this.$t('m.colors.yellow'), y: 'Yellow'}, {c: this.$t('m.colors.purple'), y: 'Purple'}, {c: this.$t('m.colors.green'), y: 'Green'}, {c: this.$t('m.colors.pink'), y: 'Pink'},{c: this.$t('m.colors.others'), y: 'Others'}],\n        }\n    },\n    mounted() {\n        let self = this;\n        this.axiosApi(self, 1, this.$route.query.filters ? JSON.parse(this.$route.query.filters) : []);\n        this.getFilter();\n\n\n        if (this.$i18n.locale === 'en-US') {\n            this.changedLanguage = \"English\";\n        } else {\n            this.changedLanguage = 'Chinese';\n        }\n\n    },\n    methods: {\n        openChainTip() {\n            this.showChainTip = true;\n        },\n        insertVehicleData() {\n            console.log(this.vehicleInsertId, this.vehicleColor , this.vehicleType);\n            if (this.vehicleInsertId && this.vehicleColor && this.vehicleType && this.vehicleType != 0) {\n                httpclient.post('/api/v1/clouddrive/vehicle/insert', {\n                    carchainVehicleId: this.vehicleInsertId,\n                    color: this.vehicleColor,\n                    vehicleType: this.vehicleType\n                }).then(res => {\n                    if (res.data.code == 200 && res.data.data.result) {\n                        this.insertStatus = this.$t('m.cloud.insert_succ_title');\n                        this.insertTipContent = this.$t('m.cloud.insert_succ_content');\n                        this.insertTip = true;\n                    } else {\n                        alert(res.data.data.content);\n                    }\n                })\n            } else {\n                alert(\"请检查输入参数\");\n            }\n        },\n        letChildGetMap() {//让子组件请求接口展示多点地图\n            let _search=[];\n            if(this.selected_parking){\n                _search.push({\n                    key:\"parking\",\n                    value:[this.selected_parking]\n                })\n            }\n            if(this.selected_battery){\n                _search.push({\n                    key:\"battery\",\n                    value:[this.selected_battery]\n                })\n            }\n            if(this.selected_offline){\n                _search.push({\n                    key:\"online\",\n                    value:[this.selected_offline]\n                })\n            }\n            if(this.selected_drive){\n                _search.push({\n                    key:\"inUse\",\n                    value:[this.selected_drive]\n                })\n            }\n\n            let link = '/api/v1/vehiclesearch/searchnewmap?searchText='+this.search+'&source=&pageNo=1&pageSize='+this.countSize;\n            httpclient.post(link,{filters: _search}).then(res => {\n                this.searchGaodeMap = res.data.data;\n                this.searchGoogleMap = res.data.data;\n            })\n        },\n        toggleMapList(shows){\n            this.letChildGetMap();\n            this.showList = shows;\n            // if (!shows) {\n            //     this.letChildGetMap();\n            // }\n\n        },\n        getFilter() {\n            httpclient.post('/api/v1/vehiclesearch/filter').then(response => {\n                this.gFData = response.data.data;\n                let _data = response.data.data;\n\n                let parking_arr=[];\n                _data[0].filters.map(item=>{\n                    parking_arr.push({\n                        text:item.key,\n                        value:item.value\n                    })\n                });\n                this.parking_list = {\n                    label:_data[0].label,\n                    type:_data[0].type,\n                    key:_data[0].key,\n                    list:parking_arr\n                };\n\n                let battery_arr=[];\n                _data[1].filters.map(item=>{\n                    battery_arr.push({\n                        text:item.key,\n                        value:item.value\n                    })\n                });\n                this.battery_list = {\n                    label:_data[1].label,\n                    type:_data[1].type,\n                    key:_data[1].key,\n                    list:battery_arr\n                };\n\n                let offline_arr=[];\n                _data[2].filters.map(item=>{\n                    offline_arr.push({\n                        text:item.key,\n                        value:item.value\n                    })\n                });\n                this.offline_list = {\n                    label:_data[2].label,\n                    type:_data[2].type,\n                    key:_data[2].key,\n                    list:offline_arr\n                };\n\n                let drive_arr=[];\n                _data[3].filters.map(item=>{\n                    drive_arr.push({\n                        text:item.key,\n                        value:item.value\n                    })\n                });\n                this.drive_list = {\n                    label:_data[3].label,\n                    type:_data[3].type,\n                    key:_data[3].key,\n                    list:drive_arr\n                };\n            }).catch((err) => {\n                console.log(err)\n            });\n        },\n        searchData() {\n            let _search=[];\n            if(this.selected_parking){\n                _search.push({\n                    key:\"parking\",\n                    value:[this.selected_parking]\n                })\n            }\n            if(this.selected_battery){\n                _search.push({\n                    key:\"battery\",\n                    value:[this.selected_battery]\n                })\n            }\n            if(this.selected_offline){\n                _search.push({\n                    key:\"online\",\n                    value:[this.selected_offline]\n                })\n            }\n            if(this.selected_drive){\n                _search.push({\n                    key:\"inUse\",\n                    value:[this.selected_drive]\n                })\n            }\n            this.axiosApi(this, 1, _search);\n\n        },\n        axiosApi(self, page, obj) {\n            httpclient.post(`/api/v1/vehiclesearch/searchnew?searchText=${this.search}&source=&pageNo=${page}&pageSize=10`, {\n                filters: obj\n            }).then((response) => {\n                self.data = response.data.data;\n                if (self.data) {\n                    self.total = response.data.data.rowCount ? response.data.data.rowCount : 0;\n                    self.currentPage = response.data.data.pageNo ? response.data.data.pageNo : 0;\n                    this.filterData(self.data.vehicles);\n                } else {\n                    self.total = 0;\n                    self.currentPage = 0;\n                    this.filterData([]);\n                }\n            }).catch((err) => {\n                alert(err)\n            })\n        },\n        formatNumber(nStr) {\n            nStr += '';\n            let x = nStr.split('.');\n            let x1 = x[0];\n            let x2 = x.length > 1 ? '.' + x[1] : '';\n            var rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(x1)) {\n                x1 = x1.replace(rgx, '$1' + ',' + '$2');\n            }\n            return x1 + x2;\n        },\n        changePage(page) {\n            let self = this;\n            this.axiosApi(self, page, []);\n        },\n        apiDel() {\n            httpclient.post('/api/v1/vehicle/delete', {\n                vehicleId: this.delId\n            }).then(response => {\n                if (response.data.code == 200) {\n                    this.reload();\n                    this.showDelMap = !this.showDelMap\n                } else {\n                    this.showEtip = true;\n                }\n            }).catch(() => {\n                this.showEtip = true;\n            })\n        },\n        showMapTip(lat, lng, area, info) {\n            if (lat || area.length) {\n                this.map = {\n                    lat: lat,\n                    lng: lng,\n                    area: area,\n                    vehicleInfo: info\n                };\n                this.showMap = true;\n            }\n        },\n        format_number(nStr) {\n            nStr += '';\n            let x = nStr.split('.');\n            let x1 = x[0];\n            let x2 = x.length > 1 ? '.' + x[1] : '';\n            var rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(x1)) {\n                x1 = x1.replace(rgx, '$1' + ',' + '$2');\n            }\n            return x1 + x2;\n        },\n        hideModal() {\n            // this.$refs['my-modal'].hide();\n            this.showDelMap = !this.showDelMap\n        },\n        delData(id) {\n            this.delId = id;\n            this.showDelMap = true;\n        },\n        filterData(data) {\n            let self = this;\n            this.table = data.map(function (item) {\n                let pack = item.outStatus == 1 ? item.parkingName : self.$t('m.vehicle_detail.off_lot');\n\n                let battery = null;\n                let batteryClass = null;\n                if (item.currentVoltage) {\n                    let numBat = item.currentVoltage.toFixed(1);\n                    battery = item.currentVoltage.toFixed(1) + ' V';\n                    batteryClass = numBat <= 11.7 ? 'badge-danger' : (numBat > 11.7 && numBat <= 12.1 ? 'badge-warning' : 'badge-success');\n                } else {\n                    battery = \"N/A\";\n                    batteryClass = 'badge-secondary';\n                }\n\n                let color = null;\n                self.colorList.map(value => { //手动翻译车辆的颜色\n                    if(item.color){\n                        if(item.color === value.y){\n                            color = value.c\n                        } else {\n                            color = item.color;\n                        }\n                    } else {\n                        color = 'N/A'\n                    }\n                });\n\n                let onlineStatus = item.isOnline == 1 ? \"Online\" : (item.isOnline == 3 ? 'N/A' : 'Offline') ;\n                let year = item.year ? item.year : 'N/A';\n                let make = item.make ? item.make : 'N/A';\n                let model = item.model ? item.model : 'N/A';\n                let alias = item.alias ? ('- '+item.alias) :'';\n                let info = (year == 'N/A' && make == 'N/A' && model == 'N/A' && alias == '') ? 'N/A' : year + ' ' + make + ' ' + model + ' ' + alias;\n                let trim = item.trim ? item.trim : 'N/A';\n                let colorTrim = (color == 'N/A' && trim == 'N/A') ? 'N/A' : color + ' , ' + trim;\n                let lastFlameoutDay = null;\n                if (item.lastFlameoutDay || item.lastFlameoutDay == 0) {\n                    lastFlameoutDay = item.lastFlameoutDay + self.$t('m.common.days');\n                } else {\n                    lastFlameoutDay = 'N/A';\n                }\n\n                let _mileage = null;//距离单位转换\n                if(item.currentMileage){\n                    if(self.changedLanguage === 'English'){\n                        _mileage = self.format_number((item.currentMileage * 0.0006214).toFixed(0))\n                    }else{\n                        _mileage = self.format_number((item.currentMileage / 1000).toFixed(0))\n                    }\n                }else{\n                    _mileage = 'N/A'\n                }\n\n                return {\n                    \"photoUrl\": item.photoUrl ? item.photoUrl : require(\"@/assets/pages-img/placeholder.svg\"),\n                    \"vehicle\": info,\n                    \"colorTrim\": colorTrim,\n                    \"stock\": item.stockNumber ? item.stockNumber : 'N/A',\n                    \"park\": pack,\n                    \"battery\": battery,\n                    \"batteryClass\": batteryClass,\n                    \"online\": onlineStatus,\n                    \"use\": item.available == 0 ? 'Available' : 'In Use',\n                    \"price\": item.price ?  self.formatNumber(item.price) : 'N/A',\n                    \"mileage\": _mileage,\n                    \"inventory\": item.inventoryDays ? item.inventoryDays + self.$t('m.common.days') : 'N/A',\n                    \"daysIdle\":  lastFlameoutDay,\n                    \"action\": \"<span>action</span>\",\n                    \"vehicleId\": item.vehicleId,\n                    \"unboundStatus\": item.isOnline == 3 ? self.$t('m.vehicle.unbound') : '',\n                    \"info\": info,\n                    \"lat\": item.lastLocationLat,\n                    \"lng\": item.lastLocationLng,\n                    \"area\": item.areaCoordinates ? item.areaCoordinates : []\n                }\n            })\n        }\n    }\n\n}\n",null]}