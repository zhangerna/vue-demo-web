{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/socket.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/socket.vue","mtime":1560488971000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport httpClient from \"@/utils/httpclient\";\nimport { getDateString } from \"@/utils/date\";\nimport SockJs from 'sockjs-client';\nexport default {\n    name: \"socketWarn\",\n    data() {\n        return {\n            topics: [\n                'queue.saas.alertPushMsgTopic',\n                'queue.saas.checkInRecordTopic'\n            ],\n            socketUrl: process.env.VUE_APP_SOCKET_URL,\n            maxConnect: 10,\n            connect: 0,\n            data: null,\n            alertData: []\n        }\n    },\n    mounted() {\n        httpClient.post('/api/v1/socketToken', {\n            topics: this.topics\n        }).then(response => {\n            if (response.data.data && response.data.code == 200) {\n                this.data = response.data.data;\n                this.initSocket(response.data.data);\n            }\n        })\n    },\n    methods:{\n        hide(key) {\n            this.alertData.splice(key, 1);\n        },\n        alertMessage(message) {\n            let year = message.year ? message.year : 'N/A';\n            let make = message.make ? message.make : 'N/A';\n            let model = message.model ? message.model : 'N/A';\n            let vehicleInfo = (!message.year && !message.make && !message.model) ? 'N/A' : `${year} ${make} ${model}`;\n            let stockNum = message.stockNum ? message.stockNum : 'N/A';\n            let createTime = message.createTime ? getDateString(message.createTime) : 'N/A';\n            this.alertData.push({\n                title: message.alertTypeName,\n                id: message.alertId,\n                desc: `${stockNum} | ${vehicleInfo} ${message.alertDescription} ${createTime}`\n            });\n            setTimeout(() => {\n                this.hide(this.alertData.length - 1);\n            }, 100000);\n        },\n        initSocket(respData) {\n            let self = this;\n            let sock = new SockJs(this.socketUrl + '/echo/?token=' + encodeURIComponent(respData.token));\n            sock.onopen = function () {\n                self.connect += 1;\n            };\n            sock.onmessage = function (e) {\n                let message = JSON.parse(e.data);\n                console.log(message);\n                switch (message.topic) {\n                    case self.topics[0] + respData.storeId + respData.tenantId:\n                        self.alertMessage(JSON.parse(message.message));\n                        break;\n                    case self.topics[1]:\n                        console.log(\"check\");\n                    default:\n                        break;\n                }\n            };\n            sock.onclose = function () {\n                if (self.connect < self.maxConnect) {\n                    setTimeout(() => {\n                        self.initSocket(this.data)\n                    }, self.connect * 20000);\n                }\n            }\n        }\n    }\n}\n",null]}