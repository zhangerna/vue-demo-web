{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/mapForAddress.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/mapForAddress.vue","mtime":1577066250000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AMap from \"AMap\";\nexport default {\n    name: \"mapForAddress\",\n    props: [\"address\"],\n    components: {\n        gMap: function(resolve) {\n            require([\"@/components/gmapForAddress\"], resolve);\n        },\n        aMap: function(resolve) {\n            require([\"@/components/amapForAddress\"], resolve);\n        }\n    },\n    data() {\n        return {\n            showMap: false,\n            address1: \"\"\n        };\n    },\n    watch: {\n        address(newVal) {\n            this.address1 = newVal;\n            // console.log(this.address1);\n        }\n    },\n    methods: {\n        showMapTip() {\n            this.showMap = true;\n            // console.log(2333);\n            this.initMap();\n        },\n        initMap() {\n            this.mapObj = new AMap.Map(\"map2\", {\n                zoom: 17\n            });\n            this.safeLayer = new AMap.TileLayer.Satellite({});\n            this.roadLayer = new AMap.TileLayer.RoadNet({});\n            this.mapObj.add(this.safeLayer);\n            this.mapObj.add(this.roadLayer);\n            this.safeLayer.hide();\n            this.roadLayer.hide();\n\n            this.geocoders = new AMap.Geocoder();\n            this.geocoders.getLocation(this.address1, (status, result) => {\n                if (status === \"complete\" && result.geocodes.length) {\n                    this.markers = new AMap.Marker({\n                        position: result.geocodes[0].location,\n                        icon: new AMap.Icon({\n                            image: \"https://cdn.shopify.com/s/files/1/0703/1149/files/Store.svg?854352\",\n                            size: new AMap.Size(60, 60),\n                            imageSize: new AMap.Size(20, 30)\n                        })\n                    });\n                    this.mapObj.add(this.markers);\n                    this.mapObj.setFitView(this.markers);\n                }\n            });\n        }\n    }\n};\n",{"version":3,"sources":["mapForAddress.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"mapForAddress.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"map-modal-custom\">\n        <div class=\"gaode-fullscreen\" @click=\"showMapTip\" v-if=\"$store.getters.userInfo.country && ($store.getters.userInfo.country == 'China' || $store.getters.userInfo.country == '中国')\">\n            <img src=\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2218%22%20height%3D%2218%22%20viewBox%3D%220%20018%2018%22%3E%0A%20%20%3Cpath%20fill%3D%22%23666%22%20d%3D%22M0%2C0v2v4h2V2h4V0H2H0z%20M16%2C0h-4v2h4v4h2V2V0H16z%20M16%2C16h-4v2h4h2v-2v-4h-2V16z%20M2%2C12H0v4v2h2h4v-2H2V12z%22%2F%3E%0A%3C%2Fsvg%3E%0A\"/>\n        </div>\n        <b-modal  ref=\"my-modal\" v-model=\"showMap\" :cancel-title=\"$t('m.tip.b_cancel')\" :ok-title=\"$t('m.tip.b_ok')\" @ok=\"showMap = false\" class=\"show-map show-google-gaode modal-dialog\">\n            <div id=\"map2\"></div>\n        </b-modal>\n        <a-map v-if=\"$store.getters.userInfo.country && ($store.getters.userInfo.country == 'China' || $store.getters.userInfo.country == '中国')\" :address=\"address\"></a-map>\n        <g-map v-if=\"!$store.getters.userInfo.country || ($store.getters.userInfo.country != 'China' && $store.getters.userInfo.country != '中国')\" :address=\"address\"></g-map>\n    </div>\n</template>\n\n<script>\nimport AMap from \"AMap\";\nexport default {\n    name: \"mapForAddress\",\n    props: [\"address\"],\n    components: {\n        gMap: function(resolve) {\n            require([\"@/components/gmapForAddress\"], resolve);\n        },\n        aMap: function(resolve) {\n            require([\"@/components/amapForAddress\"], resolve);\n        }\n    },\n    data() {\n        return {\n            showMap: false,\n            address1: \"\"\n        };\n    },\n    watch: {\n        address(newVal) {\n            this.address1 = newVal;\n            // console.log(this.address1);\n        }\n    },\n    methods: {\n        showMapTip() {\n            this.showMap = true;\n            // console.log(2333);\n            this.initMap();\n        },\n        initMap() {\n            this.mapObj = new AMap.Map(\"map2\", {\n                zoom: 17\n            });\n            this.safeLayer = new AMap.TileLayer.Satellite({});\n            this.roadLayer = new AMap.TileLayer.RoadNet({});\n            this.mapObj.add(this.safeLayer);\n            this.mapObj.add(this.roadLayer);\n            this.safeLayer.hide();\n            this.roadLayer.hide();\n\n            this.geocoders = new AMap.Geocoder();\n            this.geocoders.getLocation(this.address1, (status, result) => {\n                if (status === \"complete\" && result.geocodes.length) {\n                    this.markers = new AMap.Marker({\n                        position: result.geocodes[0].location,\n                        icon: new AMap.Icon({\n                            image: \"https://cdn.shopify.com/s/files/1/0703/1149/files/Store.svg?854352\",\n                            size: new AMap.Size(60, 60),\n                            imageSize: new AMap.Size(20, 30)\n                        })\n                    });\n                    this.mapObj.add(this.markers);\n                    this.mapObj.setFitView(this.markers);\n                }\n            });\n        }\n    }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n#map {\n    height: 40vh;\n    .gm-style .gm-style-iw-d {\n        max-width: 280px !important;\n        img {\n            width: 100%;\n        }\n    }\n}\n#map2 {\n    height: 70vh;\n    // width: 30vw;\n    .gm-style .gm-style-iw-d {\n        max-width: 280px !important;\n        img {\n            width: 100%;\n        }\n    }\n}\n.map-modal-custom {\n    height: 100%;\n    .show-map .modal-dialog {\n        max-width:50%;\n        max-width: 80%;\n    }\n    .gaode-fullscreen {\n        background: #ffffff;\n        width: 30px;\n        height: 30px;\n        text-align: center;\n        line-height: 30px;\n        position: absolute;\n        z-index: 1;\n        right: 6px;\n        top: 6px;\n        img {\n            height: 18px;\n            width: 18px;\n        }\n    }\n    .gm-style .gm-style-iw-d {\n        max-width: 280px !important;\n        img {\n            width: 100%;\n        }\n    }\n}\n.modal-dialog {\n    position: absolute;\n    top:20%;\n    left:20%;\n    max-width: 50% !important;\n    width: 50% !important;\n}\n</style>\n"]}]}