{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/socket.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/socket.vue","mtime":1576482964000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport httpClient from \"@/utils/httpclient\";\nimport { getDateString } from \"@/utils/date\";\nimport SockJs from 'sockjs-client';\nexport default {\n    name: \"socketWarn\",\n    data() {\n        return {\n            topics: [\n                'queue.saas.alertPushMsgTopic',\n                'queue.saas.checkInRecordTopic'\n            ],\n            topics3: '',\n            socketUrl: process.env.VUE_APP_SOCKET_URL,\n            maxConnect: 10,\n            connect: 0,\n            data: null,\n            alertData: [],\n            sockObj: null,\n            timeOut: null\n        }\n    },\n    mounted() {\n        this.GLOBAL.APP_ENV == 'cn' ?\n            this.getTopic().then((data) => {\n                this.topics3 = data;\n                let topics = [...this.topics, data];\n                this.getToken(data, topics);\n            }) : this.getToken(this.topics);\n    },\n    beforeDestroy: function(){\n        clearTimeout(this.timeOut);\n        this.sockObj.close();\n    },\n    methods:{\n        getToken(data, topics) {\n            httpClient.post('/api/v1/socketToken', {\n                topics: topics\n            }).then(response => {\n                if (response.data.data && response.data.code == 200) {\n                    this.topics.push(data);\n                    this.$store.dispatch('save_socket_data', response.data.data);\n                    this.initSocket(response.data.data);\n                }\n            });\n        },\n        getTopic() {\n            return new Promise((resolve, reject) => {\n                httpClient.get('/api/v1/clouddrive/notice/topic').then(response => {\n                    if (response.data.data && response.data.code == 200) {\n                        resolve(response.data.data);\n                    } else {\n                        reject();\n                    }\n                })\n            });\n\n        },\n        hide(key) {\n            this.alertData.splice(key, 1);\n        },\n        alertMessage(message) {\n            let year = message.year ? message.year : 'N/A';\n            let make = message.make ? message.make : 'N/A';\n            let model = message.model ? message.model : 'N/A';\n            let vehicleInfo = (!message.year && !message.make && !message.model) ? 'N/A' : `${year} ${make} ${model}`;\n            let stockNum = message.stockNum ? message.stockNum : 'N/A';\n            let voltage = message.pushTypeDesc;\n            this.alertData.push({\n                title: message.alertTypeName,\n                id: message.alertId,\n                desc: `${stockNum} | ${vehicleInfo} ${message.alertDescription} ${voltage ? voltage : ''} now`\n            });\n            setTimeout(() => {\n                this.hide(this.alertData.length - 1);\n            }, 5000);\n        },\n        filterMessage(data) {\n            let tempData = [{\n                user: data.firstName + \" \" + data.lastName,\n                action: data.available == '1' ? this.$t('m.index.has_just') + this.$t('m.index.check_in') : this.$t('m.index.has_just') + this.$t('m.index.check_out'),\n                vehicle: `${data.year ? data.year : 'N/A'} ${data.make ? data.make : 'N/A'} ${data.model ? data.model : 'N/A'}`,\n                time: getDateString(Number(data.createTime)),\n                vehicleId: data.vehicleId,\n                userId: data.checkUserId\n            }];\n            this.$store.dispatch('save_log_list', tempData);\n        },\n        initSocket(respData) {\n            let self = this;\n            this.sockObj = new SockJs(this.socketUrl + '/echo/?token=' + encodeURIComponent(respData.token));\n            this.sockObj.onopen = function () {\n                self.connect += 1;\n            };\n            this.sockObj.onmessage = function (e) {\n                let message = JSON.parse(e.data);\n                switch (message.topic) {\n                    case self.topics[0] + respData.storeId + respData.tenantId:\n                        self.alertMessage(JSON.parse(message.message));\n                        break;\n                    case self.topics[1] + respData.storeId + respData.tenantId:\n                        self.filterMessage(JSON.parse(message.message));\n                    case self.topics[2]:\n                        self.$store.dispatch('update_number', message.message);\n                    default:\n                        break;\n                }\n            };\n            this.sockObj.onclose = function () {\n                if (self.connect < self.maxConnect) {\n                    self.timeOut = setTimeout(() => {\n                        self.initSocket(self.$store.getters.socketData)\n                    }, self.connect * 20000);\n                }\n            }\n        }\n    }\n}\n",{"version":3,"sources":["socket.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"socket.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"toast-container\" class=\"toast-top-right\" v-show=\"alertData.length > 0\">\n        <div class=\"toast toast-error\" aria-live=\"polite\" v-for=\"(item, key) in alertData\" :key=\"key\">\n            <span class=\"fa fa-warning\"></span>\n            <h4 class=\"toast-title\">{{item.title}}</h4>\n            <div class=\"toast-message\" @click=\"$router.push('/inventory/alerts/detail/' + item.id)\">{{item.desc}}</div>\n            <i class=\"fa fa-close\" @click=\"hide(key)\"></i>\n        </div>\n    </div>\n</template>\n\n<style lang=\"scss\">\n    #toast-container {\n        position: fixed;\n        z-index: 999999;\n        right: 24px;\n        top: 10px;\n        .toast-error {\n            background-color: #bd362f;\n        }\n        .toast {\n            span {\n                font-size: 24px;\n                position: absolute;\n                left: 4%;\n                top: 34%;\n            }\n            i {\n                position: absolute;\n                right: 5%;\n                top: 35%;\n                font-size: 15px;\n                color: darkslategrey;\n            }\n            position: relative;\n            pointer-events: auto;\n            overflow: hidden;\n            margin: 0 0 6px;\n            padding: 15px 15px 15px 50px;\n            width: 300px;\n            -moz-border-radius: 3px;\n            -webkit-border-radius: 3px;\n            border-radius: 3px;\n            background-position: 15px center;\n            background-repeat: no-repeat;\n            -moz-box-shadow: 0 0 12px #999;\n            -webkit-box-shadow: 0 0 12px #999;\n            box-shadow: 0 0 12px #999;\n            color: #fff;\n            opacity: .8;\n            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=80);\n            filter: alpha(opacity=80);\n        }\n        .toast-title {\n            font-weight: bold;\n        }\n        .toast-message {\n            word-wrap: break-word;\n            cursor: pointer;\n        }\n    }\n    #toast-container * {\n        box-sizing: border-box;\n    }\n</style>\n\n<script>\n    import httpClient from \"@/utils/httpclient\";\n    import { getDateString } from \"@/utils/date\";\n    import SockJs from 'sockjs-client';\n    export default {\n        name: \"socketWarn\",\n        data() {\n            return {\n                topics: [\n                    'queue.saas.alertPushMsgTopic',\n                    'queue.saas.checkInRecordTopic'\n                ],\n                topics3: '',\n                socketUrl: process.env.VUE_APP_SOCKET_URL,\n                maxConnect: 10,\n                connect: 0,\n                data: null,\n                alertData: [],\n                sockObj: null,\n                timeOut: null\n            }\n        },\n        mounted() {\n            this.GLOBAL.APP_ENV == 'cn' ?\n                this.getTopic().then((data) => {\n                    this.topics3 = data;\n                    let topics = [...this.topics, data];\n                    this.getToken(data, topics);\n                }) : this.getToken(this.topics);\n        },\n        beforeDestroy: function(){\n            clearTimeout(this.timeOut);\n            this.sockObj.close();\n        },\n        methods:{\n            getToken(data, topics) {\n                httpClient.post('/api/v1/socketToken', {\n                    topics: topics\n                }).then(response => {\n                    if (response.data.data && response.data.code == 200) {\n                        this.topics.push(data);\n                        this.$store.dispatch('save_socket_data', response.data.data);\n                        this.initSocket(response.data.data);\n                    }\n                });\n            },\n            getTopic() {\n                return new Promise((resolve, reject) => {\n                    httpClient.get('/api/v1/clouddrive/notice/topic').then(response => {\n                        if (response.data.data && response.data.code == 200) {\n                            resolve(response.data.data);\n                        } else {\n                            reject();\n                        }\n                    })\n                });\n\n            },\n            hide(key) {\n                this.alertData.splice(key, 1);\n            },\n            alertMessage(message) {\n                let year = message.year ? message.year : 'N/A';\n                let make = message.make ? message.make : 'N/A';\n                let model = message.model ? message.model : 'N/A';\n                let vehicleInfo = (!message.year && !message.make && !message.model) ? 'N/A' : `${year} ${make} ${model}`;\n                let stockNum = message.stockNum ? message.stockNum : 'N/A';\n                let voltage = message.pushTypeDesc;\n                this.alertData.push({\n                    title: message.alertTypeName,\n                    id: message.alertId,\n                    desc: `${stockNum} | ${vehicleInfo} ${message.alertDescription} ${voltage ? voltage : ''} now`\n                });\n                setTimeout(() => {\n                    this.hide(this.alertData.length - 1);\n                }, 5000);\n            },\n            filterMessage(data) {\n                let tempData = [{\n                    user: data.firstName + \" \" + data.lastName,\n                    action: data.available == '1' ? this.$t('m.index.has_just') + this.$t('m.index.check_in') : this.$t('m.index.has_just') + this.$t('m.index.check_out'),\n                    vehicle: `${data.year ? data.year : 'N/A'} ${data.make ? data.make : 'N/A'} ${data.model ? data.model : 'N/A'}`,\n                    time: getDateString(Number(data.createTime)),\n                    vehicleId: data.vehicleId,\n                    userId: data.checkUserId\n                }];\n                this.$store.dispatch('save_log_list', tempData);\n            },\n            initSocket(respData) {\n                let self = this;\n                this.sockObj = new SockJs(this.socketUrl + '/echo/?token=' + encodeURIComponent(respData.token));\n                this.sockObj.onopen = function () {\n                    self.connect += 1;\n                };\n                this.sockObj.onmessage = function (e) {\n                    let message = JSON.parse(e.data);\n                    switch (message.topic) {\n                        case self.topics[0] + respData.storeId + respData.tenantId:\n                            self.alertMessage(JSON.parse(message.message));\n                            break;\n                        case self.topics[1] + respData.storeId + respData.tenantId:\n                            self.filterMessage(JSON.parse(message.message));\n                        case self.topics[2]:\n                            self.$store.dispatch('update_number', message.message);\n                        default:\n                            break;\n                    }\n                };\n                this.sockObj.onclose = function () {\n                    if (self.connect < self.maxConnect) {\n                        self.timeOut = setTimeout(() => {\n                            self.initSocket(self.$store.getters.socketData)\n                        }, self.connect * 20000);\n                    }\n                }\n            }\n        }\n    }\n</script>\n"]}]}