{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/component/testPointMap.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/component/testPointMap.vue","mtime":1568806123000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.draw-map {\n    .map-btn-group {\n        position: absolute;\n        margin-top: 10px;\n        z-index: 1;\n        margin-left: 20px;\n        ul {\n            color: black;\n            padding: 0 20px;\n            height: 40px;\n            line-height: 40px;\n            background: #ffffff;\n            font-size: 18px;\n            li {\n                cursor: pointer;\n                display: inline-block;\n            }\n        }\n    }\n    #map-canvas {\n        height: 40vh;\n    }\n    .submit {\n        background-color: #20a8d8!important;\n        border-color: #20a8d8!important;\n    }\n    .drawbutton {\n        height: 40px;\n        background: #ffffff;\n        color: black;\n        text-align: center;\n        line-height: 40px;\n        position: absolute;\n        z-index: 1;\n\n        margin-top: 10px;\n        cursor: pointer;\n    }\n    .left-button {\n        left: 45%;\n    }\n    .right-button {\n        background: rgba(255,255,255,0.8);\n        right: 4%;\n    }\n}\n",{"version":3,"sources":["testPointMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"testPointMap.vue","sourceRoot":"src/views/dashboard/component","sourcesContent":["<template>\n    <div class=\"draw-map\">\n        <b-row>\n            <b-col sm=\"6\">\n                <b-form-group>\n                    <label>{{ $t('m.cloud.test_store_name') }}</label>\n                    <b-form-input type=\"text\" v-model=\"parkingName\"></b-form-input>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.common.contact_person') }}</label>\n                    <b-form-input type=\"text\" v-model=\"user\"></b-form-input>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.common.contact_phone') }}</label>\n                    <b-form-input type=\"text\" v-model=\"phone\"></b-form-input>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.cloud.test_store_name') }}</label>\n                    <b-form-input type=\"text\" v-model=\"parkingName\"></b-form-input>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.lots.address') }}</label>\n                    <b-input-group>\n                        <b-form-input type=\"text\" v-model=\"address\"></b-form-input>\n                        <b-input-group-append>\n                            <b-button variant=\"secondary\" id=\"locate\" @click=\"getLocate()\">{{ $t('m.lots.b_locate') }}</b-button>\n                        </b-input-group-append>\n                    </b-input-group>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.common.address_des') }}</label>\n                    <b-form-input type=\"text\" v-model=\"parkingDes\"></b-form-input>\n                </b-form-group>\n            </b-col>\n            <b-col sm=\"6\">\n                <div>{{ $t('m.lots.add_lot_p') }}</div>\n                <div style=\"margin-bottom: 10px;\">{{ $t('m.map.double_tip') }}</div>\n                <div class=\"drawbutton left-button\" @click=\"drawPolygon()\">\n                    &nbsp;{{ drawButton }}&nbsp;\n                </div>\n                <div class=\"map-btn-group\">\n                    <ul>\n                        <li @click=\"changeMapType('default')\">{{ $t('m.map.map') }} |</li>\n                        <li @click=\"changeMapType('sate')\">&nbsp;{{ $t('m.map.satellite') }}</li>\n                    </ul>\n                </div>\n                <div id=\"map-canvas\">\n                </div>\n            </b-col>\n        </b-row>\n        <model\n                :show=\"show\"\n                :title=\"$t('m.tip.warn')\"\n                :content=\"content\"\n                :buttonText=\"btnGroup\"\n                @closeRemindBox=\"hideTip\"\n        ></model>\n        <b-button class=\"btn btn-primary submit\" @click=\"submitData()\" :disabled=\"disable\" style=\"margin-top: 12px;\">{{ $t('m.common.submit') }}</b-button>\n    </div>\n</template>\n\n<style lang=\"scss\">\n    .draw-map {\n        .map-btn-group {\n            position: absolute;\n            margin-top: 10px;\n            z-index: 1;\n            margin-left: 20px;\n            ul {\n                color: black;\n                padding: 0 20px;\n                height: 40px;\n                line-height: 40px;\n                background: #ffffff;\n                font-size: 18px;\n                li {\n                    cursor: pointer;\n                    display: inline-block;\n                }\n            }\n        }\n        #map-canvas {\n            height: 40vh;\n        }\n        .submit {\n            background-color: #20a8d8!important;\n            border-color: #20a8d8!important;\n        }\n        .drawbutton {\n            height: 40px;\n            background: #ffffff;\n            color: black;\n            text-align: center;\n            line-height: 40px;\n            position: absolute;\n            z-index: 1;\n\n            margin-top: 10px;\n            cursor: pointer;\n        }\n        .left-button {\n            left: 45%;\n        }\n        .right-button {\n            background: rgba(255,255,255,0.8);\n            right: 4%;\n        }\n    }\n</style>\n<script>\n    import httpClient from \"@/utils/httpclient\";\n    import { wgs84ToGcjo2, gcj02towgs84 } from \"@/utils/coordtransform\";\n    import AMap from 'AMap';\n    import model from \"@/components/model\";\n    export default {\n        name: 'drawMap',\n        props: ['data'],\n        components: {\n            model\n        },\n        watch: {\n            data(newV){\n                this.parkingName = newV.parkingName;\n                this.address = newV.address;\n                this.areaCoord = newV.areaCoordinate;\n                this.centerCoordinate = newV.centerCoordinate;\n                this.initEdit()\n            },\n            parkingName(newV) {\n                this.parkingName = this.trim(newV);\n                this.checkInput();\n            },\n            address(newV) {\n                this.address = this.trim(newV);\n                this.checkInput();\n            }\n        },\n        mounted() {\n            if (!this.$route.params.id) {\n                this.initialize()\n            }\n        },\n        data() {\n            return {\n                user: '',\n                disable: true,\n                mapObj: null,\n                infoWindow: null,\n                geocoders: null,\n                parkingDes: \"\",\n                drawManager: null,\n                polygonCompete: [],\n                locations: [],\n                parkingName: '',\n                centerCoordinate: null,\n                address: '',\n                show: false,\n                content: \"\",\n                btnGroup: {\n                    btnSecond: this.$t('m.tip.b_ok')\n                },\n                areaCoord: null,\n                bermudaTriangle: null,\n                isMapChanged:false,\n                drawButton: this.$t('m.map.start_draw'),\n                markers: [],\n                safeLayer: null,\n                roadLayer: null\n            }\n        },\n        methods:{\n            changeMapType(type) {\n                if (type == 'default') {\n                    this.roadLayer.hide();\n                    this.safeLayer.hide();\n                } else {\n                    this.roadLayer.show();\n                    this.safeLayer.show();\n                }\n            },\n            initEdit() {\n                this.drawButton = this.$t('m.map.redraw');\n                let temp = this.centerCoordinate.split(\" \");\n                let lnglat = wgs84ToGcjo2(temp[0], temp[1]);\n                this.mapObj = new AMap.Map('map-canvas', {\n                    center: lnglat,\n                    zoom: 17\n                });\n                this.safeLayer = new AMap.TileLayer.Satellite({\n                });\n                this.roadLayer = new AMap.TileLayer.RoadNet({\n                });\n                this.mapObj.add(this.safeLayer);\n                this.mapObj.add(this.roadLayer);\n                let area2 = [];\n                this.areaCoord.map(function (item) {\n                    let temp = item.split(\",\")\n                    area2.push(wgs84ToGcjo2(Number(temp[0]), Number(temp[1]) ))\n                });\n                this.initPolygon(area2);\n\n            },\n            initPolygon(area2) {\n                this.polygonCompete = new AMap.Polygon({\n                    path: area2,\n                    strokeColor: '#FF0000',\n                    strokeOpacity: 0.8,\n                    strokeWeight: 2,\n                    fillColor: '#FF0000',\n                    fillOpacity: 0.35\n                });\n                this.mapObj.add(this.polygonCompete);\n            },\n            drawPolygon() {\n\n                if (window.mouseTool) {\n                    this.mapObj.remove(this.polygonCompete);\n                    this.polygonCompete = [];\n                    window.mouseTool.close(true);\n                }\n                window.mouseTool = new AMap.MouseTool(this.mapObj);\n                window.mouseTool.polygon({\n                    strokeColor: \"#FF0000\",\n                    strokeOpacity: 0.8,\n                    strokeWeight: 2,\n                    fillColor: \"#FF0000\",\n                    fillOpacity: 0.35,\n                    editable: true,\n                });\n                window.mouseTool.on('draw', (event) => {\n                    // this.polygonCompete.push(event.obj);\n                    this.drawButton = this.$t('m.map.redraw');\n\n                    let array = event.obj.getPath();\n                    this.showLonLat(array);\n                    window.mouseTool.close(true);\n                })\n            },\n            showLonLat(arry) {\n                console.log(arry);\n                let locations = [];\n                let outChina = false;\n                arry.map(item => {\n                    if (gcj02towgs84(item.lng, item.lat).lng) {\n                        locations.push(gcj02towgs84(item.lng, item.lat));\n                    } else {\n                        outChina = true;\n                    }\n                });\n                if (outChina) {\n                    this.content = this.$t(\"m.map.out_china\");\n                    this.show = true;\n                    return\n                }\n                locations[arry.length] = locations[0];\n                this.initPolygon(arry);\n                this.areaCoord = locations;\n                httpClient.post('/api/v1/lot/isRepeated', {\n                    parkingName: this.parkingName,\n                    address: this.address,\n                    areaCoordinate: locations\n                }).then(response => {\n                    if (response.data.data != null) {\n                        this.isMapChanged = true;\n                        this.showTip(response.data.data)\n                    } else {\n                        this.checkInput();\n                        this.isMapChanged = true;\n                    }\n                })\n            },\n            hideTip() {\n                this.show = false;\n                this.disable = true;\n            },\n            initialize() {\n                this.mapObj = new AMap.Map('map-canvas', {\n                    zoom: 15\n                });\n                this.safeLayer = new AMap.TileLayer.Satellite({\n                });\n                this.roadLayer = new AMap.TileLayer.RoadNet({\n                });\n                this.mapObj.add(this.safeLayer);\n                this.mapObj.add(this.roadLayer);\n            },\n            getLocate() {\n                this.checkInput();\n                if (this.address) {\n                    this.mapObj.remove(this.markers)\n                    this.geocoders = new AMap.Geocoder();\n                    this.geocoders.getLocation(this.address, (status, result) => {\n                        if (status === 'complete' && result.geocodes.length) {\n                            this.markers = new AMap.Marker({\n                                position: result.geocodes[0].location,\n                                icon: new AMap.Icon({\n                                    image: \"https://cdn2.shopify.com/s/files/1/0703/1149/files/Location_03580bd1-f466-4803-a69e-720a098b08a5.svg?828688\",\n                                    size: new AMap.Size(60, 60),\n                                    imageSize: new AMap.Size(20,30),\n                                })\n                            });\n                            this.mapObj.add(this.markers);\n                            this.mapObj.setFitView(this.markers);\n                        }\n                    })\n                }\n            },\n            showTip(data) {\n                this.show = true;\n                this.content = this.$t('m.map.warn_repeat', {data: data});\n            },\n            trim(str){\n                return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n            },\n            checkInput() {\n                if (!this.parkingName) {\n                    this.disable = true;\n                    return;\n                }\n                if (!this.address) {\n                    this.disable = true;\n                    return;\n                }\n                this.disable = false;\n            },\n            submitData() {\n                this.checkInput();\n                let link='';\n                if(!this.data){\n                    link = '/api/v1/clouddrive/parkinglot/insert'\n                }else{\n                    link = '/api/v1/clouddrive/parkinglot/update'\n                }\n                httpClient.post(link, {\n                    parkingName: this.parkingName,\n                    address: this.address,\n                    areaCoordinate: this.isMapChanged === true ? this.areaCoord : [],\n                    id: this.$route.params.id ? this.$route.params.id : '',\n                    parkingAddressDesc: this.parkingDes,\n                    parkingContactName: this.user,\n                    parkingContactPhone: this.phone\n                }).then(response => {\n                    if (response.data.code == 200) {\n                        this.$router.push('/test-drive/test-point')\n                    } else {\n                        this.show = true;\n                        this.content = `Lot Name: ${response.data.data} Existed.`;\n                    }\n                })\n            }\n        },\n    }\n</script>\n"]}]}