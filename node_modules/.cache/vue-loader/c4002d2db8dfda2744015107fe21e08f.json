{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/component/testPointGMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/component/testPointGMap.vue","mtime":1569392859000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport httpClient from \"@/utils/httpclient\";\nimport google from \"google\";\nimport model from \"@/components/model\";\nexport default {\n    name: 'drawMap',\n    props: ['data'],\n    components: {\n        model\n    },\n    watch: {\n        data(newV){\n            this.parkingName = newV.parkingName;\n            this.address = newV.address;\n            this.areaCoord = newV.areaCoordinate;\n            this.centerCoordinate = newV.centerCoordinate;\n            this.user = newV.parkingContactName;\n            this.phone = newV.parkingContactPhone;\n            this.parkingDes = newV.parkingAddressDesc;\n            this.initEdit();\n        },\n        parkingName(newV) {\n            this.parkingName = this.trim(newV);\n            this.checkInput();\n        },\n        address(newV) {\n            this.address = this.trim(newV);\n            this.checkInput();\n        }\n    },\n    data() {\n        return {\n            user: '',\n            parkingDes: \"\",\n            disable: true,\n            mapObj: null,\n            infoWindow: null,\n            geocoders: null,\n            drawManager: null,\n            polygonCompete: null,\n            phone: '',\n            locations: [],\n            parkingName: '',\n            centerCoordinate: null,\n            address: '',\n            show: false,\n            content: \"\",\n            btnGroup: {\n                btnSecond: this.$t('m.tip.b_ok')\n            },\n            areaCoord: null,\n            bermudaTriangle: null,\n            isMapChanged:false\n        }\n    },\n    mounted() {\n        if (!this.$route.params.id) {\n            this.initialize()\n        }\n    },\n    methods:{\n        initEdit() {\n            this.disable = false;\n            let latlng = this.centerCoordinate.split(\" \");\n            this.mapObj = new google.maps.Map(document.getElementById('map-canvas'), {\n                zoom: 15,\n                center: {lat: Number(latlng[1]), lng: Number(latlng[0])}\n            });\n            let centerControDiv = document.createElement('div');\n            this.centerControl(centerControDiv);\n            centerControDiv.index = 1;\n            this.mapObj.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControDiv);\n            this.geocoders = new google.maps.Geocoder();\n            let triangleCoords = [];\n            for (let item of this.areaCoord) {\n                triangleCoords.push({lat: Number(item.split(\",\")[1]), lng: Number(item.split(\",\")[0]) })\n            }\n            // Construct the polygon.\n            this.bermudaTriangle = new google.maps.Polygon({\n                paths: triangleCoords,\n                strokeColor: '#FF0000',\n                strokeOpacity: 0.8,\n                strokeWeight: 2,\n                fillColor: '#FF0000',\n                fillOpacity: 0.35\n            });\n\n            this.bermudaTriangle.setMap(this.mapObj);\n            this.initDrawManager();\n        },\n        hideTip() {\n            this.show = false;\n            this.disable = true;\n        },\n        changeStatus() {\n            this.checkInput();\n        },\n        centerControl(controlDiv) {\n\n            // Set CSS for the control border.\n            let controlUI = document.createElement('div');\n            controlUI.style.backgroundColor = '#fff';\n            controlUI.style.border = '2px solid #fff';\n            controlUI.style.borderRadius = '2px';\n            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';\n            controlUI.style.cursor = 'pointer';\n            controlUI.style.marginTop = '10px';\n            controlUI.style.marginBottom = '22px';\n            controlUI.style.textAlign = 'center';\n            controlUI.title = 'Click to draw a geo fence';\n            controlDiv.appendChild(controlUI);\n\n            // Set CSS for the control interior.\n            var controlText = document.createElement('div');\n            controlText.style.color = 'rgb(25,25,25)';\n            controlText.style.fontFamily = 'Roboto,Arial,sans-serif';\n            controlText.style.fontSize = '16px';\n            controlText.style.lineHeight = '38px';\n            controlText.style.paddingLeft = '5px';\n            controlText.style.paddingRight = '5px';\n            controlText.innerHTML = this.$t('m.map.start_draw');\n            controlUI.appendChild(controlText);\n\n\n            var controlUI1 = document.createElement('div');\n            controlUI1.style.display = 'none';\n            controlUI1.style.backgroundColor = '#fff';\n            controlUI1.style.border = '2px solid #fff';\n            controlUI1.style.borderRadius = '2px';\n            controlUI1.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';\n            controlUI1.style.cursor = 'pointer';\n            controlUI1.style.marginTop = '10px';\n            controlUI1.style.marginBottom = '22px';\n            controlUI1.style.textAlign = 'center';\n            controlUI1.title = 'Click to redraw the geo fence';\n            controlDiv.appendChild(controlUI1);\n\n            // Set CSS for the control interior.\n            let controlText1 = document.createElement('div');\n            controlText1.style.color = 'rgb(25,25,25)';\n            controlText1.style.fontFamily = 'Roboto,Arial,sans-serif';\n            controlText1.style.fontSize = '16px';\n            controlText1.style.lineHeight = '38px';\n            controlText1.style.paddingLeft = '5px';\n            controlText1.style.paddingRight = '5px';\n            controlText1.innerHTML = this.$t('m.map.redraw');\n            controlUI1.appendChild(controlText1);\n\n            // Setup the click event listeners: simply set the map to Chicago.\n            var flightPath=new google.maps.Polyline({\n                strokeColor:\"#0000FF\",\n                strokeOpacity:0.8,\n                strokeWeight:2\n            });\n\n            flightPath.setMap(this.mapObj);\n            controlUI.addEventListener('click',() => {\n                controlUI.style.display = 'none';\n                controlUI1.style.display = 'block';\n                this.drawManager.setOptions({\n                    drawingMode: 'polygon',\n                    fillColor:'#fff'\n                });\n                this.$route.params.id ? this.bermudaTriangle.setMap(null) : '';\n\n            });\n            controlUI1.addEventListener('click', () => {\n                this.polygonCompete.setMap(null);\n                this.drawManager.setOptions({\n                    drawingMode: 'polygon',\n                    fillColor:'#fff'\n                });\n            });\n\n        },\n        initDrawManager() {\n            this.drawManager = new google.maps.drawing.DrawingManager(\n                {\n                    drawingMode: '',\n                    drawingControl: false,\n                    //设置图形显示样式\n                    circleOptions: {\n                        fillColor: '#ffff00',\n                        fillOpacity: 1,\n                        strokeWeight: 5,\n                        clickable: false,\n                        editable: true,\n                        zIndex: 1\n                    },\n                    polygonOptions: {\n                        strokeColor: \"#FF0000\",\n                        strokeOpacity: 0.8,\n                        strokeWeight: 2,\n                        fillColor: \"#FF0000\",\n                        fillOpacity: 0.35,\n                        editable: true,\n                    }\n                }\n            );\n            this.drawManager.setMap(this.mapObj);\n            google.maps.event.addListener(this.drawManager, 'polygoncomplete', polygon => {\n                this.polygonCompete = polygon;\n                this.drawManager.setOptions({\n                    drawingMode: ''\n                });\n            });\n            google.maps.event.addListener(this.drawManager, 'polygoncomplete', polygon => {\n                let array = polygon.getPath().getArray();\n                this.showLonLat(array)\n            })\n        },\n        initialize() {\n            let mapOptions = {\n                zoom: 15,\n            };\n            this.mapObj = new google.maps.Map(document.getElementById(\"map-canvas\"), mapOptions);\n            this.infoWindow = new google.maps.InfoWindow;\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(position => {\n                    let pos = {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    };\n                    this.infoWindow.setPosition(pos);\n                    this.infoWindow.setContent('Current Location');\n                    this.mapObj.setCenter(pos);\n\n                    let centerControDiv = document.createElement('div');\n                    this.centerControl(centerControDiv);\n                    centerControDiv.index = 1;\n                    this.geocoders = new google.maps.Geocoder();\n                    this.mapObj.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControDiv);\n\n                }, function () {\n                    this.handleError(true)\n                })\n            } else {\n                this.handleError(false)\n            }\n            this.initDrawManager()\n        },\n        handleError(status) {\n            this.infoWindow.setPosition(this.mapObj.getCenter());\n            this.infoWindow.setContent(status ? 'Error: The Geolocation service failed.' : 'Error: Your browser doesn\\'t support geolocation.');\n            this.infoWindow.open(this.mapObj)\n        },\n        showTip(data) {\n            this.show = true;\n            this.content = this.$t('m.map.warn_repeat', {data: data});\n        },\n        getLocate() {\n            this.checkInput();\n            if (this.address) {\n                this.geocoders.geocode({'address': this.address}, (results, status) => {\n                    if (status == \"OK\") {\n                        this.mapObj.setCenter(results[0].geometry.location);\n                        new google.maps.Marker({\n                            map: this.mapObj,\n                            position: results[0].geometry.location,\n                            icon: {\n                                url: \"https://cdn.shopify.com/s/files/1/0703/1149/files/Location.png?807016\",\n                                scaledSize: new google.maps.Size(30, 30)\n                            }\n                        });\n                    } else {\n                        console.log('Geocode was not successful for the following reason: ' + status);\n                    }\n                })\n            }\n        },\n        trim(str){\n            return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n        },\n        checkInput() {\n            if (!this.parkingName) {\n                this.disable = true;\n                return;\n            }\n            if (!this.user) {\n                this.disable = true;\n                return;\n            }\n            if (!this.phone) {\n                this.disable = true;\n                return;\n            }\n            if (!this.address) {\n                this.disable = true;\n                return;\n            }\n            this.disable = false;\n        },\n        showLonLat(arry) {\n            let locations = [];\n            arry.map(item => {\n                locations.push(item);\n            });\n            this.areaCoord = locations;\n            locations[arry.length] = arry[0];\n            httpClient.post('/api/v1/lot/isRepeated', {\n                parkingName: this.parkingName,\n                address: this.address,\n                areaCoordinate: locations,\n                id: this.$route.params.id,\n                lotType: 2\n            }).then(response => {\n                if (response.data.data != null) {\n                    this.isMapChanged = true;\n                    this.showTip(response.data.data)\n                } else {\n                    this.checkInput();\n                    this.isMapChanged = true;\n                }\n            })\n        },\n        submitData() {\n            this.checkInput();\n            let link='';\n            if(!this.data){\n                link = '/api/v1/clouddrive/parkinglot/insert'\n            }else{\n                link = '/api/v1/clouddrive/parkinglot/update'\n            }\n            if (!this.isMapChanged && this.areaCoord) {\n                let data = this.areaCoord.map(item => {\n                    return {\n                        lng: item.split(\",\")[0],\n                        lat: item.split(\",\")[1]\n                    }\n                });\n                this.areaCoord = data;\n            }\n            httpClient.post(link, {\n                parkingName: this.parkingName,\n                address: this.address,\n                areaCoordinate: this.areaCoord,\n                id: this.$route.params.id,\n                parkingAddressDesc: this.parkingDes,\n                parkingContactName: this.user,\n                parkingContactPhone: this.phone\n            }).then(response => {\n                if (response.data.code == 200) {\n                    this.$router.push('/test-drive/test-point')\n                } else {\n                    this.show = true;\n                    this.content = `Lot Name: ${response.data.data} Existed.`;\n                }\n            })\n        }\n    },\n}\n",null]}