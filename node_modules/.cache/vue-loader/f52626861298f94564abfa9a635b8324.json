{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/socket.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/socket.vue","mtime":1561104782000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport httpClient from \"@/utils/httpclient\";\nimport { getDateString } from \"@/utils/date\";\nimport SockJs from 'sockjs-client';\nexport default {\n    name: \"socketWarn\",\n    data() {\n        return {\n            topics: [\n                'queue.saas.alertPushMsgTopic',\n                'queue.saas.checkInRecordTopic'\n            ],\n            socketUrl: process.env.VUE_APP_SOCKET_URL,\n            maxConnect: 10,\n            connect: 0,\n            data: null,\n            alertData: [],\n            sockObj: null,\n            timeOut: null\n        }\n    },\n    mounted() {\n        httpClient.post('/api/v1/socketToken', {\n            topics: this.topics\n        }).then(response => {\n            if (response.data.data && response.data.code == 200) {\n                this.$store.dispatch('save_socket_data', response.data.data);\n                this.initSocket(response.data.data);\n            }\n        })\n    },\n    beforeDestroy: function(){\n        this.sockObj.close();\n        clearTimeout(this.timeOut);\n    },\n    methods:{\n        hide(key) {\n            this.alertData.splice(key, 1);\n        },\n        alertMessage(message) {\n            let year = message.year ? message.year : 'N/A';\n            let make = message.make ? message.make : 'N/A';\n            let model = message.model ? message.model : 'N/A';\n            let vehicleInfo = (!message.year && !message.make && !message.model) ? 'N/A' : `${year} ${make} ${model}`;\n            let stockNum = message.stockNum ? message.stockNum : 'N/A';\n            let createTime = message.createTime ? getDateString(message.createTime) : 'N/A';\n            this.alertData.push({\n                title: message.alertTypeName,\n                id: message.alertId,\n                desc: `${stockNum} | ${vehicleInfo} ${message.alertDescription} ${createTime}`\n            });\n            setTimeout(() => {\n                this.hide(this.alertData.length - 1);\n            }, 100000);\n        },\n        filterMessage(data) {\n            console.log(\"-----------\");\n            console.log(data);\n            let tempData = [{\n                user: data.firstName + \" \" + data.lastName,\n                action: data.available == '1' ? 'has just checked in' : 'has just checked out',\n                vehicle: `${data.year ? data.year : 'N/A'} ${data.make ? data.make : 'N/A'} ${data.model ? data.model : 'N/A'}`,\n                time: getDateString(Number(data.createTime)),\n                vehicleId: data.vehicleId,\n                userId: data.checkUserId\n            }];\n            this.$store.dispatch('save_log_list', tempData);\n        },\n        initSocket(respData) {\n            let self = this;\n            this.sockObj = new SockJs(this.socketUrl + '/echo/?token=' + encodeURIComponent(respData.token));\n            this.sockObj.onopen = function () {\n                self.connect += 1;\n            };\n            this.sockObj.onmessage = function (e) {\n                let message = JSON.parse(e.data);\n                switch (message.topic) {\n                    case self.topics[0] + respData.storeId + respData.tenantId:\n                        self.alertMessage(JSON.parse(message.message));\n                        break;\n                    case self.topics[1]:\n                        console.log(\"hehe----------\")\n                        self.filterMessage(JSON.parse(message.message));\n                    default:\n                        break;\n                }\n            };\n            this.sockObj.onclose = function () {\n                if (self.connect < self.maxConnect) {\n                    self.timeOut = setTimeout(() => {\n                        self.initSocket(self.$store.getters.socketData)\n                    }, self.connect * 20000);\n                }\n            }\n        }\n    }\n}\n",null]}