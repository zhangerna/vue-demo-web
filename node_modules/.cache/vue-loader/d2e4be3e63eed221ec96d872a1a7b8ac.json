{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/amapForAddress.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/amapForAddress.vue","mtime":1565338497000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n.maps {\n    .map-btn-group {\n        position: absolute;\n        margin-top: 10px;\n        z-index: 1;\n        margin-left: 20px;\n        ul {\n            color: grey;\n            padding: 0 20px;\n            height: 40px;\n            line-height: 40px;\n            background: #ffffff;\n            font-size: 18px;\n            li {\n                cursor: pointer;\n                display: inline-block;\n            }\n        }\n    }\n}\n#map {\n    height: 40vh;\n    .gm-style .gm-style-iw-d {\n        max-width: 280px!important;\n        img {\n            width: 100%;\n        }\n    }\n}\n",{"version":3,"sources":["amapForAddress.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"amapForAddress.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"maps\">\n        <div class=\"map-btn-group\">\n            <ul>\n                <li @click=\"changeMapType('default')\">地图 |</li>\n                <li @click=\"changeMapType('sate')\">&nbsp;卫星图像</li>\n            </ul>\n        </div>\n        <div id=\"map\">\n        </div>\n    </div>\n</template>\n\n<style lang=\"scss\">\n    .maps {\n        .map-btn-group {\n            position: absolute;\n            margin-top: 10px;\n            z-index: 1;\n            margin-left: 20px;\n            ul {\n                color: grey;\n                padding: 0 20px;\n                height: 40px;\n                line-height: 40px;\n                background: #ffffff;\n                font-size: 18px;\n                li {\n                    cursor: pointer;\n                    display: inline-block;\n                }\n            }\n        }\n    }\n    #map {\n        height: 40vh;\n        .gm-style .gm-style-iw-d {\n            max-width: 280px!important;\n            img {\n                width: 100%;\n            }\n        }\n    }\n</style>\n\n<script>\n    import AMap from 'AMap'\n    export default {\n        name: \"amapForAddress\",\n        props: [\"address\"],\n        data() {\n            return {\n                address1: \"\",\n                mapObj: null\n            }\n        },\n        watch: {\n            address: function (newVal) {\n                this.address1 = newVal;\n                this.initMap()\n            }\n        },\n        methods: {\n            initMap(){\n                this.mapObj = new AMap.Map('map', {\n                    zoom: 17\n                });\n                this.safeLayer = new AMap.TileLayer.Satellite({\n                });\n                this.roadLayer = new AMap.TileLayer.RoadNet({\n                });\n                this.mapObj.add(this.safeLayer);\n                this.mapObj.add(this.roadLayer);\n\n                this.geocoders = new AMap.Geocoder();\n                this.geocoders.getLocation(this.address1, (status, result) => {\n                    console.log(result)\n                    console.log(status)\n                    if (status === 'complete' && result.geocodes.length) {\n                        this.markers = new AMap.Marker({\n                            position: result.geocodes[0].location,\n                            icon: new AMap.Icon({\n                                image: \"https://cdn.shopify.com/s/files/1/0703/1149/files/Store.svg?854352\",\n                                size: new AMap.Size(60, 60),\n                                imageSize: new AMap.Size(20,30),\n                            })\n                        });\n                        this.mapObj.add(this.markers);\n                        this.mapObj.setFitView(this.markers);\n                    }\n                })\n\n            }\n        }\n    }\n</script>\n"]}]}