{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/vehicle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/vehicle.vue","mtime":1561463312000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport httpclient from '@/utils/httpclient';\nimport googleMap from '@components/googleMap'\n\nexport default {\n    name: \"vehicle\",\n    components: {\n        googleMap\n    },\n    inject: [\"reload\"],\n    data() {\n        return {\n            tableFields: {\n                photoUrl: {\n                    label: 'Photo',\n                    class: 'text-center'\n                },\n                vehicle: {\n                    label: 'Vehicle',\n                    class: 'text-center'\n                },\n                park: {\n                    label: 'Lot',\n                    class: 'text-center'\n                },\n                battery: {\n                    label: 'Voltage',\n                    class: 'text-center'\n                },\n                online: {\n                    label: 'Online/Offline',\n                    class: 'text-center'\n                },\n                use: {\n                    label: 'Available/In Use',\n                    class: 'text-center'\n                },\n                price: {\n                    label: 'Price',\n                    class: 'text-center'\n                },\n                mileage: {\n                    label: 'Mileage',\n                    class: 'text-center'\n                },\n                inventory: {\n                    label: 'Inventory Age',\n                    class: 'text-center'\n                },\n                daysIdle: {\n                    label: 'Days Idle',\n                    class: 'text-center'\n                },\n                action: {\n                    label: 'Actions',\n                    class: 'text-center'\n                }\n            },\n            data: null,\n            table: null,\n            showMap: false,\n            map: {},\n            rows: 0,\n            currentPage: 1,\n            total: 0,\n            perPage: 10,\n            showDelMap: false,\n            delId: '',\n            showEtip: false,\n            pageCount: 0,\n            gFData: [],\n            search: '',\n            queryData: {},\n        }\n    },\n    mounted() {\n        let self = this;\n        this.axiosApi(self, 1, this.$route.query.filters ? JSON.parse(this.$route.query.filters) : []);\n        this.getFilter();\n        //初始化checkbox勾选\n        let myData = this.$route.query.filters ? JSON.parse(this.$route.query.filters) : [];\n        if (myData.length) {\n            myData.map((item) => {\n                this.queryData[item.key] = item.value;\n            })\n        }\n\n    },\n    methods: {\n        getFilter() {\n            httpclient.post('/api/v1/vehiclesearch/filter').then(response => {\n                this.gFData = response.data.data;\n            }).catch(() => {\n            });\n        },\n        searchData() {\n            let search = [];\n            let keys = [];\n            this.$refs.checkbox.forEach((item) => {\n                if (item.is_Checked) {\n                    if (keys.includes(item.name)) {\n                        for (let it of search) {\n                            if (it.key == item.name) it.value.push(item.value);\n                        }\n                    } else {\n                        search.push({\n                            key: item.name,\n                            value: [item.value]\n                        });\n                        keys.push(item.name)\n                    }\n                }\n            });\n            this.axiosApi(this, 1, search);\n\n        },\n        axiosApi(self, page, obj) {\n            httpclient.post(`/api/v1/vehiclesearch/searchnew?searchText=${this.search}&source=&pageNo=${page}&pageSize=10`, {\n                filters: obj\n            }).then((response) => {\n                console.log(response);\n                self.data = response.data.data;\n                self.total = response.data.data.rowCount ? response.data.data.rowCount : 0;\n                self.currentPage = response.data.data.pageNo ? response.data.data.pageNo : 0;\n                self.pageCount = response.data.data.pageCount ? response.data.data.pageCount : 0;\n                this.filterData(self.data.vehicles);\n            }).catch((err) => {\n                alert(err)\n            })\n        },\n        formatNumber(nStr) {\n            nStr += '';\n            let x = nStr.split('.');\n            let x1 = x[0];\n            let x2 = x.length > 1 ? '.' + x[1] : '';\n            var rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(x1)) {\n                x1 = x1.replace(rgx, '$1' + ',' + '$2');\n            }\n            return x1 + x2;\n        },\n        changePage(page) {\n            let self = this;\n            this.axiosApi(self, page, []);\n        },\n        apiDel() {\n            httpclient.post('/api/v1/vehicle/delete', {\n                vehicleId: this.delId\n            }).then(response => {\n                if (response.data.code == 200) {\n                    this.reload();\n                    this.showDelMap = !this.showDelMap\n                } else {\n                    this.showEtip = true;\n                }\n            }).catch(() => {\n                this.showEtip = true;\n            })\n        },\n        showMapTip(lat, lng, area, info) {\n            if (lat || area) {\n                this.map = {\n                    lat: lat,\n                    lng: lng,\n                    area: area,\n                    vehicleInfo: info\n                };\n                this.showMap = true;\n            }\n        },\n        format_number(nStr) {\n            nStr += '';\n            let x = nStr.split('.');\n            let x1 = x[0];\n            let x2 = x.length > 1 ? '.' + x[1] : '';\n            var rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(x1)) {\n                x1 = x1.replace(rgx, '$1' + ',' + '$2');\n            }\n            return x1 + x2;\n        },\n        hideModal() {\n            // this.$refs['my-modal'].hide();\n            this.showDelMap = !this.showDelMap\n        },\n        delData(id) {\n            this.delId = id;\n            this.showDelMap = true;\n        },\n        filterData(data) {\n            let self = this;\n            this.table = data.map(function (item) {\n                let pack;\n                if(item.outStatus ===1){\n                    pack = item.parkingName\n                }else if(item.outStatus ===2){\n                    pack = item.parkingName ? 'Off Lot' : 'N/A'\n                }else{\n                    pack = 'N/A'\n                }\n\n                let battery = null;\n                let batteryClass = null;\n                if (item.currentVoltage) {\n                    let numBat = item.currentVoltage.toFixed(1);\n                    battery = item.currentVoltage.toFixed(1) + ' V';\n                    batteryClass = numBat <= 11.7 ? 'badge-danger' : (numBat > 11.7 && numBat <= 12.1 ? 'badge-warning' : 'badge-success');\n                } else {\n                    battery = \"N/A\";\n                    batteryClass = 'badge-secondary';\n                }\n                let onlineStatus = item.isOnline == 1 ? \"Online\" : \"Offline\";\n                let year = item.year ? item.year : 'N/A';\n                let make = item.make ? item.make : 'N/A';\n                let model = item.model ? item.model : 'N/A';\n                let info = (year == 'N/A' && make == 'N/A' && model == 'N/A') ? 'N/A' : year + ' ' + make + ' ' + model;\n                let color = item.color ? item.color : 'N/A';\n                let trim = item.trim ? item.trim : 'N/A';\n                let colorTrim = (color == 'N/A' && trim == 'N/A') ? 'N/A' : color + ' , ' + trim;\n                return {\n                    \"photoUrl\": item.photoUrl ? item.photoUrl : require(\"@/assets/pages-img/placeholder.svg\"),\n                    \"vehicle\": info,\n                    \"colorTrim\": colorTrim,\n                    \"stock\": item.stockNumber ? item.stockNumber : 'N/A',\n                    \"park\": pack,\n                    \"battery\": battery,\n                    \"batteryClass\": batteryClass,\n                    \"online\": onlineStatus,\n                    \"use\": item.available == 0 ? 'Available' : 'In Use',\n                    \"price\": item.price ? item.priceUnit + ' ' + self.formatNumber(item.price) : 'N/A',\n                    \"mileage\": item.currentMileage ? self.format_number((item.currentMileage * 0.0006214).toFixed(0)) : 'N/A',\n                    \"inventory\": item.inventoryDays ? item.inventoryDays + ' Days' : 'N/A',\n                    \"daysIdle\": item.lastFlameoutDay ? item.lastFlameoutDay + ' Days' : 'N/A',\n                    \"action\": \"<span>action</span>\",\n                    \"vehicleId\": item.vehicleId,\n                    \"unboundStatus\": item.isOnline == 3 ? 'Unbound' : '',\n                    \"info\": info,\n                    \"lat\": item.lastLocationLat,\n                    \"lng\": item.lastLocationLng,\n                    \"area\": item.areaCoordinates\n                }\n            })\n        }\n    }\n\n}\n",null]}