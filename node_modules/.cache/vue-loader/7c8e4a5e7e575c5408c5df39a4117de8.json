{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/testDrive/testReport.vue?vue&type=style&index=0&id=40cae3f2&lang=scss&scoped=true&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/testDrive/testReport.vue","mtime":1571899859000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#acceleration, #emotion , #speed, #turn, #pong{\n    height: 400px;\n}\n.hot-link {\n    color: rgb(99, 194, 222);\n    cursor: pointer;\n}\n\n",{"version":3,"sources":["testReport.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8YA;AACA;AACA;AACA;AACA;AACA;AACA","file":"testReport.vue","sourceRoot":"src/views/dashboard/testDrive","sourcesContent":["<template>\n    <div>\n        <b-card>\n            <div slot=\"header\">\n                {{ $t('m.report.title') }}\n            </div>\n            <div class=\"content\">\n                <b-row>\n                    <b-col sm=\"6\">\n                        <b-card>\n                            <div slot=\"header\">\n                                {{ $t('m.report.user_title') }}\n                            </div>\n                            <div class=\"content\">\n                                <b-row style=\"position: relative\">\n                                    <b-col sm=\"8\">\n                                        <p>{{ $t('m.admin.name') }}:{{ userDetail.driveLicenseName }}</p>\n                                        <p>{{ $t('m.cloud.gender') }}:{{ userDetail.driveLicenseGender == 1 ? $t('m.common.boy') : $t('m.common.girl') }}</p>\n                                        <p>{{ $t('m.report.age') }}:{{ userDetail.driveLicenseBirthDate ? calAge(userDetail.driveLicenseBirthDate) : 0 }}</p>\n                                        <p>{{ $t('m.report.driveAge') }}:{{ driveAge  }}</p>\n                                        <p>{{ $t('m.report.address') }}:{{ userDetail.driveLicenseAddress }}</p>\n                                    </b-col>\n                                    <b-col sm=\"4\">\n                                        <img :src=\"userDetail.faceRecognitionUrl\" width=\"100%\" style=\"margin-top:10px;-webkit-transform: rotate(90deg);-moz-transform: rotate(90deg);-ms-transform: rotate(90deg);-o-transform: rotate(90deg);transform: rotate(90deg);\">\n                                    </b-col>\n                                </b-row>\n                                <p>{{ $t('m.report.userId') }}<span class=\"hot-link\" @click=\"$router.push('/test-drive/test-user/detail/' + userDetail.userId)\">{{ userDetail.userId }}</span></p>\n                            </div>\n                        </b-card>\n                    </b-col>\n                    <b-col sm=\"6\">\n                        <b-card>\n                            <div slot=\"header\">\n                                {{ $t('m.report.vehicle_title') }}\n                            </div>\n                            <div class=\"content\">\n                                <b-row>\n                                    <b-col sm=\"6\">\n                                        <p>{{ $t('m.common.year') }}:{{ userDetail.year }}</p>\n                                        <p>{{ $t('m.report.make') }}:{{ userDetail.make }}</p>\n                                        <p>{{ $t('m.report.model') }}:{{ userDetail.model }}</p>\n                                        <p>{{ $t('m.common.color') }}:{{ userDetail.color }}</p>\n                                        <p>{{ $t('m.report.plat') }}:{{ userDetail.plat }}</p>\n                                    </b-col>\n                                    <b-col sm=\"6\">\n                                        <img :src=\"userDetail.vehiclePhotoPath\" width=\"100%\">\n                                    </b-col>\n                                </b-row>\n                                <p>{{ $t('m.report.vehicleId') }}<span class=\"hot-link\" @click=\"$router.push('/test-drive/test-vehicle/detail/' + userDetail.vehicleId)\">{{ userDetail.vehicleId }}</span></p>\n                            </div>\n                        </b-card>\n                    </b-col>\n                </b-row>\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.powerTitle') }}\n                        <div style=\"float: right\">\n                            {{ $t('m.report.orderId') }}: {{ userDetail.orderServiceNum ? userDetail.orderServiceNum : '' }}\n                        </div>\n                    </div>\n                    <div class=\"content\">\n                        <b-row>\n                            <b-col sm=\"3\">\n                                <p>{{ $t('m.report.days') }}:{{ driveInfo.cloudDriveStartTime ? getDateString2(driveInfo.cloudDriveStartTime) : '' }}</p>\n                                <p>{{ $t('m.report.time') }}:{{ driveInfo.cloudDriveStartTime ? timeInspect(driveInfo.cloudDriveStartTime, driveInfo.cloudDriveEndTime) : ''  }}</p>\n                                <p>{{ $t('m.report.totalmilege') }}: {{ driveInfo.totalTrip ? driveInfo.totalTrip + 'KM' : '0' }}</p>\n                                <p>{{ $t('m.report.totalOil') }}: {{ driveInfo.totalOilConsumption ? driveInfo.totalOilConsumption.toFixed(1) + 'L' : '0' }}</p>\n                                <p>{{ $t('m.report.aOil') }}: {{ driveInfo.averageOilConsumption ? driveInfo.averageOilConsumption.toFixed(1) + 'L/KM' : '0' }}</p>\n                            </b-col>\n                            <b-col sm=\"3\">\n                                <p>{{ $t('m.report.aSpeed') }}:{{ driveInfo.averageSpeed ? driveInfo.averageSpeed.toFixed(0) + 'KM/H' : 0 }}</p>\n                                <p>{{ $t('m.report.maxSpeed') }}:{{ driveInfo.maxSpeed ? driveInfo.maxSpeed.toFixed(0) + 'KM/H' : 0 }}</p>\n                                <p>{{ $t('m.report.acceSpeed') }}:{{ driveInfo.maxAcceleration ? driveInfo.maxAcceleration.toFixed(0) + 'KM/H/S' : 0 }}</p>\n                                <p>{{ $t('m.report.isPong') }}:{{ driveInfo.collisionStatus == 0 ? $t('m.report.col0') : $t('m.report.col1') }}</p>\n                            </b-col>\n                            <b-col sm=\"6\">\n                                <polygon-map :map=\"area\">\n                                </polygon-map>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n<!--                情绪曲线-->\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.spaceTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <div id=\"emotion\">\n                        </div>\n                        <b-row>\n                            <b-col sm=\"3\" style=\"padding-right: 0\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/font-door.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionData.lfDoor }}</div>\n                                            <div class=\"text-uppercase text-muted small\">左前车门开启</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionData.rfDoor }}</div>\n                                            <div class=\"text-uppercase text-muted small\">右前车门开启</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                            <b-col sm=\"4\" style=\"padding-right: 0\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/back-door.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionData.raDoor }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.lbDoor') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionData.laDoor }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.rbDoor') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionData.trunk }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.trunk') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                            <b-col sm=\"4\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/engine-start.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionTime.duration ? filterTime(emotionTime.duration) + $t('m.report.min') : '' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.timeLong') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionTime.positiveEmotion ? (emotionTime.positiveEmotion * 100).toFixed(0) + '%' : '' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionTime.negativeEmotion ? (emotionTime.negativeEmotion * 100).toFixed(0) + '%' : '' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n<!--                速度曲线-->\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.speedTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <div id=\"speed\">\n                        </div>\n                        <b-row>\n                            <b-col sm=\"4\" style=\"padding-right: 0\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/high-speed.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.high && speedTime['high'].durationTime ? Math.ceil(speedTime['high'].durationTime / 60) + $t('m.report.min') : '0' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.highSpeed') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.high && speedTime['high'].positiveEmotionTime ? (speedTime['high'].positiveEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.high && speedTime['high'].negativeEmotionTime ? (speedTime['high'].negativeEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                            <b-col sm=\"4\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/normal-speed.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.low && speedTime['low'].durationTime ? (speedTime['low'].durationTime / 60).toFixed(0) + $t('m.report.min') : '0' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.lowSpeed') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.low && speedTime['low'].positiveEmotionTime ? (speedTime['low'].positiveEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.low && speedTime['low'].negativeEmotionTime ? (speedTime['low'].negativeEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n<!--                加速度-->\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.acceTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <div id=\"acceleration\">\n                        </div>\n                        <b-row>\n                            <b-col sm=\"4\" style=\"padding-right: 0\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/speed-up.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.high && accleTime['high'].durationTime ? (accleTime['high'].durationTime / 60).toFixed(0) + $t('m.report.min') : '0' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.acceleration') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.high && accleTime['high'].positiveEmotionTime ? (accleTime['high'].positiveEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.high && accleTime['high'].negativeEmotionTime ? (accleTime['high'].negativeEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                            <b-col sm=\"4\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/break.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.low && accleTime['low'].durationTime ? (accleTime['low'].durationTime / 60).toFixed(0) + $t('m.report.min') : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.brake') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.low && accleTime['low'].positiveEmotionTime ? (accleTime['low'].positiveEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.low && accleTime['low'].negativeEmotionTime ? (accleTime['low'].negativeEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n<!--                转弯曲线-->\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.turnTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <div id=\"turn\">\n                        </div>\n                        <b-row>\n                            <b-col sm=\"4\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/turn.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ turnTime.durationTime ? Math.ceil(turnTime.durationTime / 60) + $t('m.report.min') : '0' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.turnCard') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ turnTime.positiveEmotionTime ? (turnTime.positiveEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ turnTime.negativeEmotionTime ? (turnTime.negativeEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n                <!--        颠簸点 -->\n                <b-card v-if=\"bumpTime.durationTime && bumpTime.durationTime != 0\">\n                    <div slot=\"header\">\n                        {{ $t('m.report.pongTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <div id=\"pong\">\n                        </div>\n                        {{ bumpTime.durationTime }}\n                        <b-row>\n                            <b-col sm=\"3\" style=\"padding-right: 0\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/zag.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ bumpTime.durationTime ? bumpTime.durationTime : '0' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.pongContent') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ bumpTime.positiveEmotionTime ?  (bumpTime.positiveEmotionTime * 100) + '%'  : 0 }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ bumpTime.negativeEmotionTime ? (bumpTime.negativeEmotionTime * 100) + '%' : 0 }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n                <!--      整体满意度分析  -->\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.wholeTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <b-row>\n                            <b-col sm=\"4\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/report.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ wholeEmotion.positiveEmotion ? (wholeEmotion.positiveEmotion * 100).toFixed(0) + '%' : '' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ wholeEmotion.negativeEmotion ? (wholeEmotion.negativeEmotion * 100).toFixed(0) + '%' : '' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n            </div>\n        </b-card>\n\n<!--        问卷调查-->\n        <b-card>\n            <div slot=\"header\">\n                {{ $t('m.report.surveyTitle') }}\n                <div style=\"float: right\">\n                    {{ $t('m.report.createTime') + \":\" }} {{ getDateString(finishTime) }}\n                </div>\n            </div>\n            <div class=\"content\">\n                <b-list-group>\n                    <div v-for=\"item in surveyList\" class=\"row list-group-item d-flex justify-content-between align-items-center\" :key=\"item.id\">\n                        <div class=\"col-sm-6\">\n                            {{ item.name}}\n                        </div>\n                        <div class=\"col-sm-6 text-right\">\n                            <template v-if=\"item.result == $t('m.report.good') \">\n                                <span class=\"badge badge-success\">{{ item.result }}</span>\n                            </template>\n                            <template v-else-if=\"item.result == $t('m.report.normal') \">\n                                <span class=\"badge badge-warning\">{{ item.result }}</span>\n                            </template>\n                            <template v-else-if=\"item.result == $t('m.report.noGood') \">\n                                <span class=\"badge badge-danger\">{{ item.result }}</span>\n                            </template>\n                            <template v-else-if=\"item.result == $t('m.report.veryGood')\">\n                                <span class=\"badge badge-primary\">{{ item.result }}</span>\n                            </template>\n                            <template v-else>\n                                <span>{{ item.result }}</span>\n                            </template>\n\n                        </div>\n                    </div>\n                </b-list-group>\n            </div>\n        </b-card>\n    </div>\n</template>\n\n<style lang=\"scss\" scoped>\n    #acceleration, #emotion , #speed, #turn, #pong{\n        height: 400px;\n    }\n    .hot-link {\n        color: rgb(99, 194, 222);\n        cursor: pointer;\n    }\n\n</style>\n\n<script>\n    import echarts from 'echarts';\n    import httpClient from \"@/utils/httpclient\";\n    import polygonMap from \"@/components/tripMap\";\n    import { calAge, calDriveAge, getDateString2, timeInspect, getDateString3, getDateString } from \"@/utils/date\";\n\n    export default {\n        name: \"testReport\",\n        inject: ['reload'],\n        components: {\n            polygonMap\n        },\n        data() {\n            return {\n                userDetail: {},\n                driveAge: \"\",\n                driveInfo: {},\n                area: null,\n                surveyList: [\n                    {\n                        id: \"1\",\n                        name: \"1. 您觉得外观设计如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"2\",\n                        name: \"2. 您觉得内饰设计如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"3\",\n                        name: \"3. 您觉得安全性能如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"4\",\n                        name: \"4. 您觉得动力性能如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"5\",\n                        name: \"5. 您觉得加速表现如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"6\",\n                        name: \"6. 您觉得操控性能如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"7\",\n                        name: \"7. 您觉得制动表现如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"8\",\n                        name: \"8. 您觉得舒适性如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"9\",\n                        name: \"9. 您觉得本次试驾流程安排如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"10\",\n                        name: \"10. 您近期的购车计划如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"11\",\n                        name: \"11. 您通过什么方式了解本次活动？\",\n                        result: ''\n                    },\n                    {\n                        id: \"12\",\n                        name: \"12. 通过此次试驾，您准备？\",\n                        result: ''\n                    },\n                    {\n                        id: \"13\",\n                        name: \"13. 您还有其他问题或建议吗？（选填）\",\n                        result: ''\n                    }\n                ],\n                baseData: null,\n                emotionStatus: {\n                    \"0\": \"--\",\n                    \"10\": this.$t('m.report.emotion10'),\n                    \"20\": this.$t('m.report.emotion20'),\n                    \"30\": this.$t('m.report.emotion30')\n                },\n                emotion: {\n                    title: {\n                        show: false,\n                        textStyle: {\n                            color: 'grey'\n                        }\n                    },\n                    dataZoom: [{\n                        orient:\"horizontal\",\n                        show: true,\n                        start: 0,\n                        end: 100\n                    }],\n                    tooltip: {\n                        trigger: 'axis',\n                        formatter: (data) => {\n                            return data[0].axisValue + \"<br />\" + this.emotionStatus[\"0\"]\n                        }\n                    },\n                    xAxis: {\n                        show: true,\n                        data: []\n                    },\n                    yAxis: [\n                        {\n                            type: 'value',\n                            show: true,\n                            name: '',\n                            min: 10,\n                            max: 30,\n                            interval: 10,\n                        },\n                        {\n                            axisTick: {\n                                show: false\n                            }\n                        }\n                    ],\n                    series: {\n                        yAxisIndex: 0,\n                        type: \"line\",\n                        smooth: true,\n                        lineStyle: {\n                            width: 0,\n                            color: 'rgba(0, 0, 0, 0)'\n                        },\n                        itemStyle: {\n                            normal: {\n                                opacity: 0,\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [],\n                        animation: true,\n                        symbol: \"none\",\n                        markArea: {\n                            data: [\n                            ]\n                        },\n                        markLine: {\n                            symbol: 'none',\n                            data: [\n                            ]\n                        },\n                        markPoint: {\n                            symbol: 'circle',\n                            symbolSize: 14,\n                            itemStyle: {\n                                normal: {\n                                    color: 'red',\n                                    opacity: 0.8,\n                                    label: {\n                                        show: false\n                                    }\n                                }\n                            },\n                            data: [\n                            ]\n\n                        }\n                    },\n                    grid: {\n                        x: 24,\n                        y: 40,\n                        x2: 20,\n                        y2: 80\n                    }\n                },\n                emotionData: {},\n                emotionTime: {},\n                speed: {\n                    title: {\n                        show: false,\n                        textStyle: {\n                            color: 'grey'\n                        }\n                    },\n                    dataZoom: [{\n                        orient:\"horizontal\",\n                        show: true,\n                        start: 0,\n                        end: 100\n                    }],\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    xAxis: {\n                        show: true,\n                        data: []\n                    },\n                    yAxis: {\n                        type: 'value',\n                        show: true,\n                        name: '',\n                        min: 0,\n                        max: 100,\n                        interval: 50,\n                    },\n                    series: {\n                        yAxisIndex: 0,\n                        type: \"line\",\n                        smooth: true,\n                        itemStyle: {\n                            normal: {\n                                opacity: 0,\n                                color: \"#3b5998\",\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [],\n                        animation: true,\n                        symbol: \"none\",\n                        name: this.$t('m.report.speed'),\n                        markArea: {\n                            data: [\n                            ]\n                        },\n                        markLine: {\n                            symbol: 'none',\n                            data: [\n                            ]\n                        }\n                    },\n                    grid: {\n                        x: 30,\n                        y: 40,\n                        x2: 20,\n                        y2: 80\n                    }\n                },\n                speedTime: {\n                    high: {},\n                    low: {}\n                },\n                accele: {\n                    title: {\n                        show: false,\n                        textStyle: {\n                            color: 'grey'\n                        }\n                    },\n                    dataZoom: [{\n                        orient:\"horizontal\",\n                        show: true,\n                        start: 0,\n                        end: 100\n                    }],\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    xAxis: {\n                        show: true,\n                        data: []\n                    },\n                    yAxis: {\n                        type: 'value',\n                        show: true,\n                        name: '',\n                        min: -10,\n                        max: 10,\n                        interval: 10,\n                    },\n                    series: {\n                        yAxisIndex: 0,\n                        type: \"line\",\n                        smooth: true,\n                        itemStyle: {\n                            normal: {\n                                opacity: 0,\n                                color: \"#3b5998\",\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [],\n                        animation: true,\n                        symbol: \"none\",\n                        name: this.$t('m.report.accele'),\n                        markArea: {\n                            data: [\n                            ]\n                        },\n                        markLine: {\n                            symbol: 'none',\n                            data: [\n                            ]\n                        }\n                    },\n                    grid: {\n                        x: 30,\n                        y: 40,\n                        x2: 20,\n                        y2: 80\n                    }\n                },\n                accleTime: {\n                    high: {},\n                    low: {}\n                },\n                turns: {\n                    title: {\n                        show: false,\n                        textStyle: {\n                            color: 'grey'\n                        }\n                    },\n                    dataZoom: [{\n                        orient:\"horizontal\",\n                        show: true,\n                        start: 0,\n                        end: 100\n                    }],\n                    tooltip: {\n                        trigger: 'axis',\n                        formatter: (data) => {\n                            return data[0].axisValue + \"<br />\" + `${data[0].data > 0 ? this.$t('m.report.leftStatus') : this.$t('m.report.rightStatus')}`\n                        }\n                    },\n                    xAxis: {\n                        show: true,\n                        data: []\n                    },\n                    yAxis: {\n                        type: 'value',\n                        show: true,\n                        name: '',\n                        min: -2,\n                        max: 2,\n                        interval: 2,\n                    },\n                    series: {\n                        yAxisIndex: 0,\n                        type: \"line\",\n                        smooth: true,\n                        itemStyle: {\n                            normal: {\n                                opacity: 0,\n                                color: \"#3b5998\",\n                                lineStyle: {\n                                    width: 1\n                                },\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [],\n                        animation: true,\n                        symbol: \"none\",\n                        name: this.$t('m.report.turnCard'),\n                        markArea: {\n                            data: [\n                            ]\n                        },\n                        markLine: {\n                            symbol: 'none',\n                            data: [\n                            ]\n                        }\n                    },\n                    grid: {\n                        x: 30,\n                        y: 40,\n                        x2: 20,\n                        y2: 80\n                    }\n                },\n                turnTime: {},\n                bumpTime: {},\n                pong: {\n                    title: {\n                        show: false,\n                        textStyle: {\n                            color: 'grey'\n                        }\n                    },\n                    dataZoom: [{\n                        orient:\"horizontal\",\n                        show: true,\n                        start: 0,\n                        end: 100\n                    }],\n                    tooltip: {\n                        trigger: 'axis',\n                        formatter: (data) => {\n                            return data[0].axisValue + \"<br />\" + this.emotionStatus[\"0\"]\n                        }\n                    },\n                    xAxis: {\n                        show: true,\n                        data: []\n                    },\n                    yAxis: [\n                        {\n                            type: 'value',\n                            show: true,\n                            name: '',\n                            min: 10,\n                            max: 30,\n                            interval: 10,\n                        },\n                        {\n                            axisTick: {\n                                show: false\n                            }\n                        }\n                    ],\n                    series: {\n                        yAxisIndex: 0,\n                        type: \"line\",\n                        smooth: true,\n                        lineStyle: {\n                            width: 0,\n                            color: 'rgba(0, 0, 0, 0)'\n                        },\n                        itemStyle: {\n                            normal: {\n                                opacity: 0,\n                                color: \"#ccc\",\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [],\n                        animation: true,\n                        symbol: \"none\",\n                        name: this.$t('m.report.break'),\n                        markArea: {\n                            data: [\n                            ]\n                        },\n                        markLine: {\n                            symbol: 'none',\n                            data: [\n                            ]\n                        },\n                        markPoint: {\n                            symbol: 'circle',\n                            symbolSize: 14,\n                            itemStyle: {\n                                normal: {\n                                    color: 'red',\n                                    opacity: 0.8,\n                                    label: {\n                                        show: false\n                                    }\n                                }\n                            },\n                            data: [\n                            ]\n\n                        }\n                    },\n                    grid: {\n                        x: 24,\n                        y: 40,\n                        x2: 20,\n                        y2: 80\n                    }\n                },\n                wholeEmotion: {},\n                finishTime: null,\n                emotionEvent: {\n                    \"0\": this.$t('m.report.laDoor'),\n                    \"1\": this.$t('m.report.raDoor'),\n                    \"2\": this.$t('m.report.lbDoor'),\n                    \"3\": this.$t('m.report.rbDoor'),\n                    \"6\": this.$t('m.report.trunk')\n                }\n            }\n        },\n        mounted() {\n            // coordinatetype 1,WGS84全球坐标系  2,GCJ02火星坐标系  3,BD09百度坐标系\n            httpClient.get('/api/v1/clouddrive/report/detail?coordinatetype=1&orderid=' + this.$route.params.id).then(response => {\n                if (response.data.code == 200) {\n                    this.userDetail = response.data.data.userDetailDTO ?  response.data.data.userDetailDTO : {};\n                    this.driveInfo = response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO;\n                    this.area = {\n                        area: response.data.data.cloudDriveReportDTO.tracesDataDTOList,\n                        center: response.data.data.cloudDriveReportDTO.tracesDataDTOList[0]\n                    };\n                    let time = response.data.data.userDetailDTO ? this.calDriveAge(response.data.data.userDetailDTO.driveLicenseInitDate) : 0;\n                    this.driveAge = time.year + this.$t('m.report.year') + time.month + this.$t('m.report.month');\n                    this.getEmotion(\n                        response.data.data.cloudDriveReportDTO.emotionList,\n                        response.data.data.cloudDriveReportDTO.accelerationDataList,\n                        response.data.data.cloudDriveReportDTO.alarmPushDTOList ? response.data.data.cloudDriveReportDTO.alarmPushDTOList.events : []);\n                    this.baseData = response.data.data.cloudDriveReportDTO.accelerationDataList;\n                    this.emotionData = response.data.data.cloudDriveReportDTO.alarmPushDTOList;\n                    this.emotionTime = response.data.data.cloudDriveReportDTO.startUp;\n                    this.speedTime = {\n                        \"high\": response.data.data.cloudDriveReportDTO.highSpeed,\n                        \"low\": response.data.data.cloudDriveReportDTO.lowSpeed\n                    };\n                    this.accleTime = {\n                        \"high\": response.data.data.cloudDriveReportDTO.accelerate,\n                        \"low\": response.data.data.cloudDriveReportDTO.brake\n                    };\n                    this.turnTime = response.data.data.cloudDriveReportDTO.swerve;\n                    this.bumpTime = response.data.data.cloudDriveReportDTO.bumpy;\n                    this.wholeEmotion = response.data.data.cloudDriveReportDTO.wholeEmotionDTO;\n                    this.finishTime = response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO.reportFinishTime;\n                    this.getSpeed(\n                        response.data.data.cloudDriveReportDTO.emotionList,\n                        response.data.data.cloudDriveReportDTO.speedList,\n                    );\n                    this.getAcceleration(\n                        response.data.data.cloudDriveReportDTO.emotionList,\n                        response.data.data.cloudDriveReportDTO.accelerationDataList,\n                        response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO.maxAcceleration\n                    );\n                    this.getTurn(response.data.data.cloudDriveReportDTO.emotionList,\n                        response.data.data.cloudDriveReportDTO.turnDataDTOS);\n\n                    //碰撞点为0， 则不现实整个模块\n                    response.data.data.cloudDriveReportDTO.bumpy && response.data.data.cloudDriveReportDTO.bumpy.durationTime &&\n                    response.data.data.cloudDriveReportDTO.bumpy.durationTime != 0 ?\n                        this.getPong(\n                            response.data.data.cloudDriveReportDTO.emotionList,\n                            response.data.data.cloudDriveReportDTO.accelerationDataList,\n                            response.data.data.cloudDriveReportDTO.alarmPushDTOList ? response.data.data.cloudDriveReportDTO.alarmPushDTOList.bumpyEvents : []\n                        )\n                        :\n                        '';\n\n                    response.data.data.surveyFeedbackDTO ?\n                        this.filterSurvey(response.data.data.surveyFeedbackDTO)\n                        :\n                        null;\n                }\n            });\n        },\n        methods: {\n            initBaseData(driveData) {\n                let driveDatas = [];\n                let driveEmotion = [];\n                driveData.map(item => {\n                    driveDatas.push(getDateString3(item.driveTime));\n                    driveEmotion.push(0)\n                });\n                return {\n                    driveDatas,\n                    driveEmotion\n                };\n            },\n            getDateString(time) {\n                return getDateString(time)\n            },\n            getPong(data, driveData, eventData) {\n                let eventList = [];\n                eventData.map(item => {\n                    eventList.push({\n                        xAxis: getDateString3(item.time),\n                        tooltip: {\n                            trigger: 'item'\n                        },\n                        yAxis: 20\n                    })\n                });\n                let {emotionList, area, line } = this.initEmotion(data);\n                this.pong.series.markArea.data = area;\n                let {driveDatas, driveEmotion} = this.initBaseData(driveData);\n                this.pong.xAxis.data = driveDatas;\n                this.pong.series.data = emotionList;\n                this.pong.series.markLine.data = line;\n                this.pong.series.markPoint.data = eventList;\n                echarts.init(document.getElementById('pong')).setOption(this.pong)\n            },\n            getTurn(data,accData) {\n                let accList = [];\n                let yList = [];\n                let { area, line } = this.defaultEmotion(data);\n                accData.map(item => {\n                    accList.push(getDateString3(item.driveTime));\n                    yList.push(item.turn)\n                });\n                this.turns.series.markArea.data = area;\n                this.turns.series.markLine.data = line;\n                this.turns.xAxis.data = accList;\n                this.turns.series.data = yList;\n                echarts.init(document.getElementById('turn')).setOption(this.turns)\n            },\n            filterTime(mis) {\n                return Math.ceil((mis % (1000 * 60 * 60)) / (1000 * 60));\n            },\n            filterSurvey(data) {\n                this.surveyList.map(item => {\n                    data.map(it => {\n                       if (it.subjectId == item.id) {\n                           item['result'] = it.questionnaireContent;\n                       }\n                    });\n                });\n            },\n            initEmotion(data, type) {\n                let emotionList =[];\n                let area = [];\n                let line = [];\n                data.map(item => {\n                    emotionList.push(item.emotion);\n                    if (item.emotion == 10 || item.emotion == 0) {\n                        line.push([\n                            {\n                                xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                                yAxis: type == 'speed' ? 50 : 20,\n                                itemStyle: {\n                                    color: \"#fbdc7f\",\n                                    width: 2\n                                },\n                                tooltip: {\n                                    trigger: 'item',\n                                    formatter: (data) => {\n                                        return (data.xAxis ? data.xAxis : data.data.xAxis ) + \"<br />\" + this.emotionStatus[\"10\"]\n                                    }\n                                }\n                            },\n                            {\n                                yAxis: type == 'speed' ? 50 : 20,\n                                xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n                            }\n                        ])\n                    } else {\n                        area.push([{\n                            value: item.emotion,\n                            xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                            temp: item.emotion,\n                            yAxis: type == 'speed' ? (item.emotion == 20 ? 50 : 0) : (item.emotion == 20 ? 20 : 0),\n                            itemStyle: {\n                                color: item.emotion == 20  ? \"#a2dab6\" : (item.emotion == 30 ? \"#f8b2b1\" : \"#fbdc7f\")\n                            },\n                            tooltip: {\n                                trigger: 'item',\n                                formatter: (data) => {\n                                    return getDateString3(item.emotionStartTime) + \"<br />\" + this.emotionStatus[data.value]\n                                }\n                            }\n                        }, {\n                            tooltip: {\n                                trigger: 'item',\n                                formatter: function (data) {\n                                    return data.value\n                                }\n                            },\n                            value: item.emotion,\n                            yAxis: type == 'speed' ? (item.emotion == 20 ? 100 : 50) : (item.emotion == 20  ? 30 : 20),\n                            xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n\n                        }])\n                    }\n                });\n                return {\n                    emotionList,\n                    area,\n                    line\n                }\n            },\n            defaultEmotion(data, max) {\n                let emotionList =[];\n                let area = [];\n                let line = [];\n                data.map(item => {\n                    emotionList.push(item.emotion);\n                    if (item.emotion == 10 || item.emotion == 0) {\n                        line.push([\n                            {\n                                xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                                yAxis: 0,\n                                itemStyle: {\n                                    color: \"#fbdc7f\",\n                                    width: 2\n                                },\n                            },\n                            {\n                                yAxis: 0,\n                                xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n                            }\n                        ])\n                    } else {\n                        area.push([{\n                            xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                            temp: item.emotion,\n                            yAxis: max ? (item.emotion == 20 ? 0 : Number('-' + max)) : (item.emotion == 20 ? 0 : -10),\n                            itemStyle: {\n                                color: item.emotion == 20  ? \"#a2dab6\" : (item.emotion == 30 ? \"#f8b2b1\" : \"#fbdc7f\")\n                            },\n                        }, {\n                            yAxis: max ? (item.emotion == 20 ? max : 0) : (item.emotion == 20 ? 10 : 0),\n                            xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n\n                        }])\n                    }\n                });\n                return {\n                    emotionList,\n                    area,\n                    line\n                }\n            },\n            getAcceleration(data, accData, maxAcc) {\n                let { area, line } = this.defaultEmotion(data, Math.ceil(maxAcc));\n                let accList = [];\n                let yList = [];\n                accData.map(item => {\n                    accList.push(getDateString3(item.driveTime));\n                    yList.push(item.acceleration)\n                });\n                this.accele.yAxis.min = \"-\" + Math.ceil(Number(maxAcc));\n                this.accele.yAxis.max = Math.ceil(Number(maxAcc));\n                this.accele.yAxis.interval = Math.ceil(Number(maxAcc));\n                this.accele.series.markArea.data = area;\n                this.accele.series.markLine.data = line;\n                this.accele.xAxis.data = accList;\n                this.accele.series.data = yList;\n                echarts.init(document.getElementById('acceleration')).setOption(this.accele)\n            },\n            getSpeed(data, speedData) {\n                let { area, line } = this.initEmotion(data, 'speed');\n                let speedList = [];\n                let yList = [];\n                speedData.map(item => {\n                    speedList.push(getDateString3(item.driveTime));\n                    yList.push(item.speed)\n                });\n                this.speed.series.markArea.data = area;\n                this.speed.series.markLine.data = line;\n                this.speed.xAxis.data = speedList;\n                this.speed.series.data = yList;\n                echarts.init(document.getElementById('speed')).setOption(this.speed)\n            },\n            getEmotion(data, driveData, eventData) {\n                let eventList = [];\n                eventData.map(item => {\n                    eventList.push({\n                        xAxis: getDateString3(item.time),\n                        name: this.emotionEvent[String(item.content)],\n                        yAxis: 20,\n                        tooltip: {\n                            trigger: 'item',\n                            formatter: function (data) {\n                                return data.data.xAxis + \"<br />\" + data.name\n                            }\n                        }\n                    })\n                });\n                let {emotionList, area, line } = this.initEmotion(data);\n                this.emotion.series.markArea.data = area;\n                let {driveDatas, driveEmotion} = this.initBaseData(driveData);\n                this.emotion.xAxis.data = driveDatas;\n                this.emotion.series.data = driveEmotion;\n                this.emotion.series.markLine.data = line;\n                this.emotion.series.markPoint.data = eventList;\n                echarts.init(document.getElementById('emotion')).setOption(this.emotion)\n\n            },\n            calAge(bir) {\n                return calAge(bir);\n            },\n            calDriveAge(time) {\n                return calDriveAge(time)\n            },\n            getDateString2(time) {\n                return getDateString2(time)\n            },\n            timeInspect(time1, time2){\n                return timeInspect(time1, time2)\n            }\n        }\n    }\n</script>\n"]}]}