{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/mainI.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/mainI.vue","mtime":1561016599000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport httpclient from '@/utils/httpclient';\nimport echarts from 'echarts';\nimport { getDateString, getYMDFormart } from \"@/utils/date\"\n\nexport default {\n    name: \"mainI\",\n    data() {\n        return {\n            weekly: \"week\",\n            daily: \"daily\",\n            dailyDate: \"\",\n            salePersonDate: \"\",\n            card: {\n                \"inventory\": {\n                    img: require('@assets/pages-img/inven-icon.svg'),\n                    type: \"inventory\",\n                    class: \"bg-primary\",\n                    num: \"\",\n                    filters: null,\n                    key:'',\n                    value:''\n                },\n                \"offLots\": {\n                    img: require('@assets/pages-img/off-lot.svg'),\n                    type: \"off lot\",\n                    class: \"bg-info\",\n                    num: \"\",\n                    filters: null,\n                    key:'',\n                    value:''\n                },\n                \"extremelyLowPower\": {\n                    img: require('@assets/pages-img/low-bat.svg'),\n                    type: \"low battery\",\n                    class: \"bg-warning\",\n                    num: \"\",\n                    filters: null,\n                    key:'',\n                    value:''\n                },\n                \"offLine\": {\n                    img: require('@assets/pages-img/off-line.svg'),\n                    type: \"offline\",\n                    class: \"bg-danger\",\n                    num: \"\",\n                    filters: null,\n                    key:'',\n                    value:''\n                }\n            },\n            option1 : {\n                legend: {\n                    y: \"20px\",\n                    textStyle: {\n                        color:[\"#fff\"],\n                    },\n                    data:['11.7V or lower', '11.7V - 12.1V', 'Above 12.1V']\n                },\n                series : [\n                    {\n                        type:'pie',\n                        label: {\n                            show: false\n                        },\n                        labelLine: {\n                            show: false\n                        },\n                        radius : '55%',\n                        center: ['50%', '60%'],\n                        data:[\n                            {value:0, name:'11.7V or lower'},\n                            {value:0, name:'11.7V - 12.1V'},\n                            {value:0, name:'Above 12.1V'}\n                        ],\n                        color: ['rgb(255,99,132)',\n                            'rgb(255, 205, 86)',\n                            'rgb(54, 162, 235)',]\n                    }\n                ]\n            },\n            option2 : {\n                legend: {\n                    y: \"20px\",\n                    textStyle: {\n                        color:[\"#fff\"],\n                    },\n                    data:['On Lot', 'Off Lot']\n                },\n                series : [\n                    {\n                        label: {\n                            show: false\n                        },\n                        labelLine: {\n                            show: false\n                        },\n                        type:'pie',\n                        radius : '55%',\n                        center: ['50%', '60%'],\n                        data:[\n                            {value:0, name:'On Lot'},\n                            {value:0, name:'Off Lot'}\n                        ],\n                        color: ['rgb(54, 162, 235)',\n                            'rgb(255,99,132)']\n                    }\n                ]\n            },\n            showLog: false,\n            lastDate: null,\n            color: ['99,194,222,0.8', '248,108,107,0.8', '255,193,5,0.8', '32,168,216,0.8', '77,189,116,0.8'],\n            deaLoction: {\n                tooltip: {\n                    trigger: 'axis'\n                },\n                legend: {\n                    data:[],\n                    textStyle: {\n                        color:[\"#fff\"],\n                    }\n                },\n                grid: {\n                    left: '1%',\n                    right: '1%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n\n                xAxis: {\n                    type: 'category',\n                    boundaryGap: false,\n                    splitLine: {\n                        show: true,\n                        lineStyle: {\n                            color: \"black\"\n                        }\n                    },\n                    data: [],\n                    axisLine: {\n                        lineStyle: {\n                            color: \"#73818f\"\n                        }\n                    }\n                },\n                yAxis: {\n                    type: 'value',\n                    splitLine: {\n                        show: true,\n                        lineStyle: {\n                            color: \"black\"\n                        }\n                    },\n                    axisLine: {\n                        lineStyle: {\n                            color: \"#73818f\"\n                        }\n                    }\n                },\n                series: []\n            },\n            saleOption: {\n                tooltip: {\n                    trigger: 'axis'\n                },\n                legend: {\n                    data:[\n                        {\n                            name: \"Average Time(min)\",\n                            icon: \"roundRect\"\n                        },\n                        {\n                            name: \"Average Number\",\n                            icon: \"roundRect\",\n\n                        }],\n                    textStyle: {\n                        color:[\"#fff\"],\n                    }\n                },\n                grid: {\n                    left: '1%',\n                    right: '1%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n\n                xAxis: {\n                    type: 'category',\n                    boundaryGap: false,\n                    splitLine: {\n                        show: true,\n                        lineStyle: {\n                            color: \"black\"\n                        }\n                    },\n                    data: [],\n                    axisLine: {\n                        lineStyle: {\n                            color: \"#73818f\"\n                        }\n                    }\n                },\n                yAxis: {\n                    type: 'value',\n                    splitLine: {\n                        show: true,\n                        lineStyle: {\n                            color: \"black\"\n                        }\n                    },\n                    axisLine: {\n                        lineStyle: {\n                            color: \"#73818f\"\n                        }\n                    }\n                },\n                series: [\n                    {\n                        name:'Average Time(min)',\n                        type:'line',\n                        stack: '总量',\n                        smooth: true,\n                        data:[],\n                        color: 'rgba(99,194,222, 0.8)',\n                        backgroundColor: \"#73818f\"\n                    },\n                    {\n                        name:'Average Number',\n                        type:'line',\n                        stack: '总量',\n                        smooth: true,\n                        data:[],\n                        color: 'rgba(248,108,107, 0.8)'\n                    }\n                ]\n            },\n            tableFields: {\n                user: {\n                    label: \"User\",\n                    class: \"text-left\"\n                },\n                action: {\n                    label: \"Action\",\n                    class: \"text-left\"\n                },\n                vehicle: {\n                    label: \"Vehicle\",\n                    class: \"text-left\"\n                },\n                time: {\n                    label: \"TimeStamp\",\n                    class: \"text-left\"\n                }\n            }\n    }\n    },\n    mounted() {\n        this.initData();\n    },\n    methods: {\n        initData() {\n            new Promise((resolve, reject) => {\n                httpclient.get(\"/api/v1/index\", {}).then((response) => {\n                    resolve(response.data.data);\n                }).catch((err) => {\n                    reject(err);\n                    alert(err)\n                });\n            }).then((data) =>  {\n                httpclient.get(\"/api/v1/vehicle/availableLogList\", {}).then((res) => {\n                    this.filterData(data, res.data.data)\n                }).catch((err) => {\n                    alert(err)\n                })\n            }).then(() => {\n                this.getSales(2);\n            }).then(() => {\n                this.getDealData(1)\n            })\n\n        },\n        chooseDealDate(type){\n            this.daily = type;\n            let num = (type == 'daily') ? 1: (type == 'week' ? 2 : 3);\n            this.getDealData(num)\n        },\n        getDealData(num) {\n            httpclient.post(\"/api/v1/index/averageparkinglotdata\", {timeType: num}).then((res) => {\n                this.filterDealData(res.data.data);\n            }).catch((err) => {\n                alert(err)\n            })\n        },\n        filterDealData(data) {\n            this.deaLoction.series = [];\n            this.deaLoction.xAxis.data = [];\n            this.deaLoction.legend.data = [];\n            let firstTime = getYMDFormart(data[0].averageDrivingTime2[data[0].averageDrivingTime2.length - 1].data);\n            let lastTime = getYMDFormart(data[0].averageDrivingTime2[0].data);\n            this.dailyDate = `${firstTime} - ${lastTime}`;\n            data.map((item, key) => {\n                this.deaLoction.legend.data.push({\n                    name: item.parkingName,\n                    icon: \"roundRect\"\n                });\n                let seData = [];\n                item.averageDrivingTime.reverse().map((it, k) => {\n                    seData.push(it.value);\n                    key == 0 ? this.deaLoction.xAxis.data.push(it.data) : null;\n                });\n                this.deaLoction.series.push({\n                    name: item.parkingName,\n                    type:'line',\n                    smooth: true,\n                    data: seData,\n                    color: `rgba(${this.color[key]})`,\n                    backgroundColor: \"#73818f\"\n                })\n\n            });\n            echarts.init(document.getElementById(\"deaLocation\")).setOption(this.deaLoction);\n        },\n        filterSalesData(data) {\n            this.saleOption.xAxis.data = [];\n            this.saleOption.series[0].data = [];\n            this.saleOption.series[1].data = [];\n            let firstTime = getYMDFormart(data[data.length - 1].standardStartDate);\n            let lastTime = getYMDFormart(data[0].standardStartDate);\n            this.salePersonDate = `${firstTime} - ${lastTime}`;\n            for (let item of data.reverse()) {\n                this.saleOption.xAxis.data.push(item.startDate);\n                this.saleOption.series[0].data.push(item.averageDrivingTime);\n                this.saleOption.series[1].data.push(item.averageDrivingNumber);\n            }\n            echarts.init(document.getElementById(\"sale\")).setOption(this.saleOption);\n        },\n        getSales(num) {\n            httpclient.post(\"/api/v1/index/averagesalesdata\", {timeType: num}).then((res) => {\n                this.filterSalesData(res.data.data);\n            }).catch((err) => {\n                alert(err)\n            })\n        },\n        chooseSaleDate(type) {\n            this.weekly = type;\n            let num = (type == 'month') ? 3 : 2;\n            this.getSales(num)\n        },\n        formatTime(val) {//格式化时间（06/17/2019 19:08）\n            let mon = (val.getMonth() + 1) > 9 ? (val.getMonth() + 1) : '0' + (val.getMonth() + 1);\n            let data = val.getDate() > 9 ? val.getDate() : '0' + val.getDate();\n            let hour = val.getHours() > 9 ? val.getHours() : '0' + val.getHours();\n            let minute = val.getMinutes() > 9 ? val.getMinutes() : '0' + val.getMinutes();\n            return mon + '/' + data + '/' + val.getFullYear() + '  ' + hour + ':' + minute\n        },\n        filterData(data, loglist) {\n            this.showLog = loglist.map(item => {\n                return {\n                    user: item.firstName + \" \" + item.lastName,\n                    action: item.available == '1' ? 'has just checked in' : 'has just checked out',\n                    vehicle: `${item.year ? item.year : 'N/A'} ${item.make ? item.make : 'N/A'} ${item.model ? item.model : 'N/A'}`,\n                    time: getDateString(Number(item.createTime)),\n                    vehicleId: item.vehicleId,\n                    userId: item.checkUserId\n                }\n            });\n            this.$store.dispatch(\"save_log_list\", this.showLog);\n\n            this.lastDate = this.formatTime(new Date());\n            let batHealth = [\"extremelyLowPower\", \"lowPower\", \"commonPower\"];\n            let inventory = [\"inLots\", \"offLots\"];\n\n            for (let item in this.card) {\n                this.card[item][\"num\"] = data[item] ? data[item][\"num\"] : \"\";\n                this.card[item][\"filters\"] = data[item] ? data[item][\"filters\"] : \"\";\n                this.card[item][\"key\"] = data[item][\"filters\"] ? data[item][\"filters\"][0].key: \"\";\n                this.card[item][\"value\"] = data[item][\"filters\"] ? data[item][\"filters\"][0].value[0]: \"\";\n            }\n\n            for (let i in batHealth){\n                this.option1.series[0].data[i].value = data[batHealth[i]][\"num\"]\n            }\n            for (let i in inventory){\n                this.option2.series[0].data[i].value = data[inventory[i]][\"num\"];\n            }\n            echarts.init(document.getElementById(\"battery-health\")).setOption(this.option1);\n            echarts.init(document.getElementById(\"inventory-location\")).setOption(this.option2);\n\n        }\n    }\n\n}\n",null]}