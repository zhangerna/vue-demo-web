{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/mainI.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/mainI.vue","mtime":1560753940000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport httpclient from '@/utils/httpclient';\nimport echarts from 'echarts';\nimport { getDateString, getYMDFormart } from \"@/utils/date\"\n\nexport default {\n    name: \"mainI\",\n    data() {\n        return {\n            weekly: \"week\",\n            daily: \"daily\",\n            dailyDate: \"\",\n            salePersonDate: \"\",\n            card: {\n                \"inventory\": {\n                    img: require('@assets/pages-img/inven-icon.svg'),\n                    type: \"inventory\",\n                    class: \"bg-primary\",\n                    num: \"\",\n                    filters: null,\n                    key:'',\n                    value:''\n                },\n                \"offLots\": {\n                    img: require('@assets/pages-img/off-lot.svg'),\n                    type: \"off lot\",\n                    class: \"bg-info\",\n                    num: \"\",\n                    filters: null,\n                    key:'',\n                    value:''\n                },\n                \"extremelyLowPower\": {\n                    img: require('@assets/pages-img/low-bat.svg'),\n                    type: \"low battery\",\n                    class: \"bg-warning\",\n                    num: \"\",\n                    filters: null,\n                    key:'',\n                    value:''\n                },\n                \"offLine\": {\n                    img: require('@assets/pages-img/off-line.svg'),\n                    type: \"offline\",\n                    class: \"bg-danger\",\n                    num: \"\",\n                    filters: null,\n                    key:'',\n                    value:''\n                }\n            },\n            option1 : {\n                legend: {\n                    y: \"20px\",\n                    textStyle: {\n                        color:[\"#fff\"],\n                    },\n                    data:['11.7V or lower', '11.7V - 12.1V', 'Above 12.1V']\n                },\n                series : [\n                    {\n                        type:'pie',\n                        label: {\n                            show: false\n                        },\n                        labelLine: {\n                            show: false\n                        },\n                        radius : '55%',\n                        center: ['50%', '60%'],\n                        data:[\n                            {value:0, name:'11.7V or lower'},\n                            {value:0, name:'11.7V - 12.1V'},\n                            {value:0, name:'Above 12.1V'}\n                        ],\n                        color: ['rgb(255,99,132)',\n                            'rgb(255, 205, 86)',\n                            'rgb(54, 162, 235)',]\n                    }\n                ]\n            },\n            option2 : {\n                legend: {\n                    y: \"20px\",\n                    textStyle: {\n                        color:[\"#fff\"],\n                    },\n                    data:['On Lot', 'Off Lot']\n                },\n                series : [\n                    {\n                        label: {\n                            show: false\n                        },\n                        labelLine: {\n                            show: false\n                        },\n                        type:'pie',\n                        radius : '55%',\n                        center: ['50%', '60%'],\n                        data:[\n                            {value:0, name:'On Lot'},\n                            {value:0, name:'Off Lot'}\n                        ],\n                        color: ['rgb(54, 162, 235)',\n                            'rgb(255,99,132)']\n                    }\n                ]\n            },\n            showLog: false,\n            lastDate: null,\n            color: ['99,194,222,0.8', '248,108,107,0.8', '255,193,5,0.8', '32,168,216,0.8', '77,189,116,0.8'],\n            deaLoction: {\n                tooltip: {\n                    trigger: 'axis'\n                },\n                legend: {\n                    data:[],\n                    textStyle: {\n                        color:[\"#fff\"],\n                    }\n                },\n                grid: {\n                    left: '1%',\n                    right: '1%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n\n                xAxis: {\n                    type: 'category',\n                    boundaryGap: false,\n                    splitLine: {\n                        show: true,\n                        lineStyle: {\n                            color: \"black\"\n                        }\n                    },\n                    data: [],\n                    axisLine: {\n                        lineStyle: {\n                            color: \"#73818f\"\n                        }\n                    }\n                },\n                yAxis: {\n                    type: 'value',\n                    splitLine: {\n                        show: true,\n                        lineStyle: {\n                            color: \"black\"\n                        }\n                    },\n                    axisLine: {\n                        lineStyle: {\n                            color: \"#73818f\"\n                        }\n                    }\n                },\n                series: []\n            },\n            saleOption: {\n                tooltip: {\n                    trigger: 'axis'\n                },\n                legend: {\n                    data:[\n                        {\n                            name: \"Average Time(min)\",\n                            icon: \"roundRect\"\n                        },\n                        {\n                            name: \"Average Number\",\n                            icon: \"roundRect\",\n\n                        }],\n                    textStyle: {\n                        color:[\"#fff\"],\n                    }\n                },\n                grid: {\n                    left: '1%',\n                    right: '1%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n\n                xAxis: {\n                    type: 'category',\n                    boundaryGap: false,\n                    splitLine: {\n                        show: true,\n                        lineStyle: {\n                            color: \"black\"\n                        }\n                    },\n                    data: [],\n                    axisLine: {\n                        lineStyle: {\n                            color: \"#73818f\"\n                        }\n                    }\n                },\n                yAxis: {\n                    type: 'value',\n                    splitLine: {\n                        show: true,\n                        lineStyle: {\n                            color: \"black\"\n                        }\n                    },\n                    axisLine: {\n                        lineStyle: {\n                            color: \"#73818f\"\n                        }\n                    }\n                },\n                series: [\n                    {\n                        name:'Average Time(min)',\n                        type:'line',\n                        stack: '总量',\n                        smooth: true,\n                        data:[],\n                        color: 'rgba(99,194,222, 0.8)',\n                        backgroundColor: \"#73818f\"\n                    },\n                    {\n                        name:'Average Number',\n                        type:'line',\n                        stack: '总量',\n                        smooth: true,\n                        data:[],\n                        color: 'rgba(248,108,107, 0.8)'\n                    }\n                ]\n            },\n            tableFields: {\n                user: {\n                    label: \"User\",\n                    class: \"text-left\"\n                },\n                action: {\n                    label: \"Action\",\n                    class: \"text-left\"\n                },\n                vehicle: {\n                    label: \"Vehicle\",\n                    class: \"text-left\"\n                },\n                time: {\n                    label: \"TimeStamp\",\n                    class: \"text-left\"\n                }\n            }\n    }\n    },\n    mounted() {\n        this.initData();\n    },\n    methods: {\n        initData() {\n            new Promise((resolve, reject) => {\n                httpclient.get(\"/api/v1/index\", {}).then((response) => {\n                    resolve(response.data.data);\n                }).catch((err) => {\n                    reject(err);\n                    alert(err)\n                });\n            }).then((data) =>  {\n                httpclient.get(\"/api/v1/vehicle/availableLogList\", {}).then((res) => {\n                    this.filterData(data, res.data.data)\n                }).catch((err) => {\n                    alert(err)\n                })\n            }).then(() => {\n                this.getSales(2);\n            }).then(() => {\n                this.getDealData(1)\n            })\n\n        },\n        chooseDealDate(type){\n            this.daily = type;\n            let num = (type == 'daily') ? 1: (type == 'week' ? 2 : 3);\n            this.getDealData(num)\n        },\n        getDealData(num) {\n            httpclient.post(\"/api/v1/index/averageparkinglotdata\", {timeType: num}).then((res) => {\n                this.filterDealData(res.data.data);\n            }).catch((err) => {\n                alert(err)\n            })\n        },\n        filterDealData(data) {\n            this.deaLoction.series = [];\n            this.deaLoction.xAxis.data = [];\n            this.deaLoction.legend.data = [];\n            let firstTime = getYMDFormart(data[0].averageDrivingTime2[data[0].averageDrivingTime2.length - 1].data);\n            let lastTime = getYMDFormart(data[0].averageDrivingTime2[0].data);\n            this.dailyDate = `${firstTime} - ${lastTime}`;\n            data.map((item, key) => {\n                this.deaLoction.legend.data.push({\n                    name: item.parkingName,\n                    icon: \"roundRect\"\n                });\n                let seData = [];\n                item.averageDrivingTime.reverse().map((it, k) => {\n                    seData.push(it.value);\n                    key == 0 ? this.deaLoction.xAxis.data.push(it.data) : null;\n                });\n                this.deaLoction.series.push({\n                    name: item.parkingName,\n                    type:'line',\n                    smooth: true,\n                    data: seData,\n                    color: `rgba(${this.color[key]})`,\n                    backgroundColor: \"#73818f\"\n                })\n\n            });\n            echarts.init(document.getElementById(\"deaLocation\")).setOption(this.deaLoction);\n        },\n        filterSalesData(data) {\n            this.saleOption.xAxis.data = [];\n            this.saleOption.series[0].data = [];\n            this.saleOption.series[1].data = [];\n            let firstTime = getYMDFormart(data[data.length - 1].standardStartDate);\n            let lastTime = getYMDFormart(data[0].standardStartDate);\n            this.salePersonDate = `${firstTime} - ${lastTime}`;\n            for (let item of data.reverse()) {\n                this.saleOption.xAxis.data.push(item.startDate);\n                this.saleOption.series[0].data.push(item.averageDrivingTime);\n                this.saleOption.series[1].data.push(item.averageDrivingNumber);\n            }\n            echarts.init(document.getElementById(\"sale\")).setOption(this.saleOption);\n        },\n        getSales(num) {\n            httpclient.post(\"/api/v1/index/averagesalesdata\", {timeType: num}).then((res) => {\n                this.filterSalesData(res.data.data);\n            }).catch((err) => {\n                alert(err)\n            })\n        },\n        chooseSaleDate(type) {\n            this.weekly = type;\n            let num = (type == 'month') ? 3 : 2;\n            this.getSales(num)\n        },\n        filterData(data, loglist) {\n            this.showLog = loglist.map(item => {\n                return {\n                    user: item.firstName + \" \" + item.lastName,\n                    action: item.available == '1' ? 'has just checked in' : 'has just checked out',\n                    vehicle: `${item.year ? item.year : 'N/A'} ${item.make ? item.make : 'N/A'} ${item.model ? item.model : 'N/A'}`,\n                    time: getDateString(Number(item.createTime)),\n                    vehicleId: item.vehicleId,\n                    userId: item.checkUserId\n                }\n            });\n\n            this.lastDate = getDateString(new Date());\n            let batHealth = [\"extremelyLowPower\", \"lowPower\", \"commonPower\"];\n            let inventory = [\"inLots\", \"offLots\"];\n\n            for (let item in this.card) {\n                this.card[item][\"num\"] = data[item] ? data[item][\"num\"] : \"\";\n                this.card[item][\"filters\"] = data[item] ? data[item][\"filters\"] : \"\";\n                this.card[item][\"key\"] = data[item][\"filters\"] ? data[item][\"filters\"][0].key: \"\";\n                this.card[item][\"value\"] = data[item][\"filters\"] ? data[item][\"filters\"][0].value[0]: \"\";\n            }\n\n            for (let i in batHealth){\n                this.option1.series[0].data[i].value = data[batHealth[i]][\"num\"]\n            }\n            for (let i in inventory){\n                this.option2.series[0].data[i].value = data[inventory[i]][\"num\"];\n                console.log(data[inventory[i]][\"num\"])\n            }\n            echarts.init(document.getElementById(\"battery-health\")).setOption(this.option1);\n            echarts.init(document.getElementById(\"inventory-location\")).setOption(this.option2);\n\n        }\n    }\n\n}\n",{"version":3,"sources":["mainI.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"mainI.vue","sourceRoot":"src/views/dashboard/dashboardMain","sourcesContent":["<template>\n    <div class=\"animated fadeIn mainI\">\n        <b-row>\n            <b-col sm=\"6\" lg=\"3\" v-for=\"(item, index) in card\" :key=\"index\" class=\"card-hover\"\n                   @click='$router.push({name: \"vehicle\",\n                   query: {filters:  `[{ \"key\":\"${item.key}\",\"value\":[\"${item.value}\"]}]` }})'>\n                <b-card no-body :class=\"item.class\">\n                    <b-card-body>\n                        <b-row>\n                            <b-col sm=\"6\" lg=\"6\" class=\"remove-padding\">\n                                <img  :src=\"item.img\">\n                            </b-col>\n                            <b-col sm=\"6\" lg=\"6\" class=\"text-center text-white remove-padding\">\n                                <p class=\"text-uppercase font-weight-bold text-muted\">{{ index === 'extremelyLowPower' ? 'LOW BATTERY' : index }}</p>\n                                <p class=\"text-uppercase text-value-lg font-weight-bold text-muted\">{{ item.num }}</p>\n                            </b-col>\n                        </b-row>\n                    </b-card-body>\n                </b-card>\n            </b-col>\n        </b-row>\n        <b-row v-if=\"showLog && showLog.length > 0\">\n            <b-col sm=\"12\" lg=\"12\">\n                <b-card\n                    header-tag=\"header\"\n                    footer-tag=\"footer\">\n                    <div slot=\"header\">\n                        <i class=\"fa fa-align-justify\"></i><strong>Recent Activities</strong>\n                        <small class=\"text-muted last-update\" v-cloak>{{ lastDate }}</small>\n                    </div>\n                    <b-table class=\"mb-0 table-outline\" small striped responsive=\"sm\" :items=\"showLog\" hover :fields=\"tableFields\">\n                        <template slot=\"user\" slot-scope=\"data\">\n                            <span class=\"user-name\" @click=\"$router.push('/admin-detail/' + data.item.userId)\">{{ data.item.user }}</span>\n                        </template>\n                        <template slot=\"vehicle\" slot-scope=\"data\">\n                            <span class=\"user-name\" @click=\"$router.push('/vehicle-detail/' + data.item.vehicleId)\">{{ data.item.vehicle }}</span>\n                        </template>\n                    </b-table>\n                </b-card>\n            </b-col>\n        </b-row>\n        <b-row columns class=\"pie-group\">\n            <b-col sm=\"6\" lg=\"6\">\n                <b-card header=\"Battery Health\" class=\"text-center\">\n                    <div style=\"height:400px\"  id=\"battery-health\">\n                    </div>\n                </b-card>\n            </b-col>\n            <b-col sm=\"6\" lg=\"6\">\n                <b-card header=\"Inventory Location\" class=\"text-center\">\n                    <div style=\"height:400px\"  id=\"inventory-location\">\n                    </div>\n                </b-card>\n            </b-col>\n        </b-row>\n        <b-row>\n            <b-col sm=\"12\" lg=\"12\">\n                <b-card>\n                    <b-row>\n                        <b-col sm=\"6\" lg=\"6\">\n                            <h4>Salesperson Test Drive Analysis</h4>\n                            <p class=\"text-muted\">{{ salePersonDate }}</p>\n                        </b-col>\n                        <b-col sm=\"6\" lg=\"6\" class=\"text-right\">\n                            <b-dropdown :text=\"weekly == 'week' ? 'Weeks' : 'Months'\" class=\"btn-group btn-group-toggle m-2 week-drop\">\n                                <b-dropdown-item>\n                                    <i v-if=\"weekly == 'week'\" class=\"fa fa-check mt-3 mr-1 float-left\"></i>\n                                    <div @click=\"chooseSaleDate('week')\">\n                                        <h6>Weekly interval</h6>\n                                        <p class=\"small text-muted mb-0\">Data aggregated to every week, starting on Monday</p>\n                                    </div>\n                                </b-dropdown-item>\n                                <b-dropdown-item>\n                                    <i v-if=\"weekly != 'week'\" class=\"fa fa-check mt-3 mr-1 float-left\"></i>\n                                    <div @click=\"chooseSaleDate('month')\">\n                                        <h6>Monthly interval</h6>\n                                        <p class=\"small text-muted mb-0\">Data aggregated to every calendar-month</p>\n                                    </div>\n                                </b-dropdown-item>\n                            </b-dropdown>\n                            <div style=\"display: inline-block\" class=\"text-muted\">Last 12 {{ weekly == 'week' ? 'Weeks' : 'Months' }}</div>\n                        </b-col>\n                    </b-row>\n                    <b-row>\n                        <b-col sm=\"12\" lg=\"12\" id=\"sale\" style=\"height: 400px\">\n                        </b-col>\n                    </b-row>\n                </b-card>\n            </b-col>\n        </b-row>\n\n        <b-row>\n            <b-col sm=\"12\" lg=\"12\">\n                <b-card>\n                    <b-row>\n                        <b-col sm=\"6\" lg=\"6\">\n                            <h4>Total Number of Test Drives Per Dealership Location</h4>\n                            <p class=\"text-muted\">{{ dailyDate }}</p>\n                        </b-col>\n                        <b-col sm=\"6\" lg=\"6\" class=\"text-right\">\n                            <b-dropdown :text=\"daily == 'daily' ? 'Daily' : (daily == 'week' ? 'Weekly' : 'Monthly')\" class=\"btn-group btn-group-toggle m-2 week-drop\">\n                                <b-dropdown-item>\n                                    <i v-if=\"daily == 'daily'\" class=\"fa fa-check mt-3 mr-1 float-left\"></i>\n                                    <div @click=\"chooseDealDate('daily')\">\n                                        <h6>Daily interval</h6>\n                                        <p class=\"small text-muted mb-0\">Data aggregated to every day</p>\n                                    </div>\n                                </b-dropdown-item>\n                                <b-dropdown-item>\n                                    <i v-if=\"daily == 'week'\" class=\"fa fa-check mt-3 mr-1 float-left\"></i>\n                                    <div @click=\"chooseDealDate('week')\">\n                                        <h6>Weekly interval</h6>\n                                        <p class=\"small text-muted mb-0\">Data aggregated to every week, starting on Monday</p>\n                                    </div>\n                                </b-dropdown-item>\n                                <b-dropdown-item>\n                                    <i v-if=\"daily == 'month'\" class=\"fa fa-check mt-3 mr-1 float-left\"></i>\n                                    <div @click=\"chooseDealDate('month')\">\n                                        <h6>Monthly interval</h6>\n                                        <p class=\"small text-muted mb-0\">Data aggregated to every calendar-month</p>\n                                    </div>\n                                </b-dropdown-item>\n                            </b-dropdown>\n                            <div style=\"display: inline-block\" class=\"text-muted\">Last 12 {{ daily == 'week' ? 'Weeks' : (daily == 'daily') ? 'Days' : 'Months' }}</div>\n                        </b-col>\n                    </b-row>\n                    <b-row>\n                        <b-col sm=\"12\" lg=\"12\" id=\"deaLocation\" style=\"height: 400px\">\n                        </b-col>\n                    </b-row>\n                </b-card>\n            </b-col>\n        </b-row>\n    </div>\n</template>\n\n<style lang=\"scss\">\n    .mainI {\n        .card {\n            width: 100%;\n        }\n        .remove-padding {\n            padding: 0 4px;\n        }\n        strong, small {\n            margin-left: 10px;\n        }\n        .card-hover {\n            cursor: pointer;\n        }\n        .user-name {\n            color: #20a8d8;\n            cursor: pointer;\n        }\n        .table-outline td {\n            height: 40px;\n        }\n        .table {\n            th {\n                color: #73818f;\n            }\n        }\n        .week-drop {\n            button {\n                color: #73818f;\n                background-color: transparent;\n                background-image: none;\n                border-color: #73818f;\n            }\n        }\n        .pie-group {\n            #battery-health > div, #inventory-location > div{\n                margin: 0 auto;\n            }\n            h4 {\n                text-align: center;\n                color: #73818f;\n            }\n        }\n    }\n</style>\n\n<script>\n    import httpclient from '@/utils/httpclient';\n    import echarts from 'echarts';\n    import { getDateString, getYMDFormart } from \"@/utils/date\"\n\n    export default {\n        name: \"mainI\",\n        data() {\n            return {\n                weekly: \"week\",\n                daily: \"daily\",\n                dailyDate: \"\",\n                salePersonDate: \"\",\n                card: {\n                    \"inventory\": {\n                        img: require('@assets/pages-img/inven-icon.svg'),\n                        type: \"inventory\",\n                        class: \"bg-primary\",\n                        num: \"\",\n                        filters: null,\n                        key:'',\n                        value:''\n                    },\n                    \"offLots\": {\n                        img: require('@assets/pages-img/off-lot.svg'),\n                        type: \"off lot\",\n                        class: \"bg-info\",\n                        num: \"\",\n                        filters: null,\n                        key:'',\n                        value:''\n                    },\n                    \"extremelyLowPower\": {\n                        img: require('@assets/pages-img/low-bat.svg'),\n                        type: \"low battery\",\n                        class: \"bg-warning\",\n                        num: \"\",\n                        filters: null,\n                        key:'',\n                        value:''\n                    },\n                    \"offLine\": {\n                        img: require('@assets/pages-img/off-line.svg'),\n                        type: \"offline\",\n                        class: \"bg-danger\",\n                        num: \"\",\n                        filters: null,\n                        key:'',\n                        value:''\n                    }\n                },\n                option1 : {\n                    legend: {\n                        y: \"20px\",\n                        textStyle: {\n                            color:[\"#fff\"],\n                        },\n                        data:['11.7V or lower', '11.7V - 12.1V', 'Above 12.1V']\n                    },\n                    series : [\n                        {\n                            type:'pie',\n                            label: {\n                                show: false\n                            },\n                            labelLine: {\n                                show: false\n                            },\n                            radius : '55%',\n                            center: ['50%', '60%'],\n                            data:[\n                                {value:0, name:'11.7V or lower'},\n                                {value:0, name:'11.7V - 12.1V'},\n                                {value:0, name:'Above 12.1V'}\n                            ],\n                            color: ['rgb(255,99,132)',\n                                'rgb(255, 205, 86)',\n                                'rgb(54, 162, 235)',]\n                        }\n                    ]\n                },\n                option2 : {\n                    legend: {\n                        y: \"20px\",\n                        textStyle: {\n                            color:[\"#fff\"],\n                        },\n                        data:['On Lot', 'Off Lot']\n                    },\n                    series : [\n                        {\n                            label: {\n                                show: false\n                            },\n                            labelLine: {\n                                show: false\n                            },\n                            type:'pie',\n                            radius : '55%',\n                            center: ['50%', '60%'],\n                            data:[\n                                {value:0, name:'On Lot'},\n                                {value:0, name:'Off Lot'}\n                            ],\n                            color: ['rgb(54, 162, 235)',\n                                'rgb(255,99,132)']\n                        }\n                    ]\n                },\n                showLog: false,\n                lastDate: null,\n                color: ['99,194,222,0.8', '248,108,107,0.8', '255,193,5,0.8', '32,168,216,0.8', '77,189,116,0.8'],\n                deaLoction: {\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    legend: {\n                        data:[],\n                        textStyle: {\n                            color:[\"#fff\"],\n                        }\n                    },\n                    grid: {\n                        left: '1%',\n                        right: '1%',\n                        bottom: '3%',\n                        containLabel: true\n                    },\n\n                    xAxis: {\n                        type: 'category',\n                        boundaryGap: false,\n                        splitLine: {\n                            show: true,\n                            lineStyle: {\n                                color: \"black\"\n                            }\n                        },\n                        data: [],\n                        axisLine: {\n                            lineStyle: {\n                                color: \"#73818f\"\n                            }\n                        }\n                    },\n                    yAxis: {\n                        type: 'value',\n                        splitLine: {\n                            show: true,\n                            lineStyle: {\n                                color: \"black\"\n                            }\n                        },\n                        axisLine: {\n                            lineStyle: {\n                                color: \"#73818f\"\n                            }\n                        }\n                    },\n                    series: []\n                },\n                saleOption: {\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    legend: {\n                        data:[\n                            {\n                                name: \"Average Time(min)\",\n                                icon: \"roundRect\"\n                            },\n                            {\n                                name: \"Average Number\",\n                                icon: \"roundRect\",\n\n                            }],\n                        textStyle: {\n                            color:[\"#fff\"],\n                        }\n                    },\n                    grid: {\n                        left: '1%',\n                        right: '1%',\n                        bottom: '3%',\n                        containLabel: true\n                    },\n\n                    xAxis: {\n                        type: 'category',\n                        boundaryGap: false,\n                        splitLine: {\n                            show: true,\n                            lineStyle: {\n                                color: \"black\"\n                            }\n                        },\n                        data: [],\n                        axisLine: {\n                            lineStyle: {\n                                color: \"#73818f\"\n                            }\n                        }\n                    },\n                    yAxis: {\n                        type: 'value',\n                        splitLine: {\n                            show: true,\n                            lineStyle: {\n                                color: \"black\"\n                            }\n                        },\n                        axisLine: {\n                            lineStyle: {\n                                color: \"#73818f\"\n                            }\n                        }\n                    },\n                    series: [\n                        {\n                            name:'Average Time(min)',\n                            type:'line',\n                            stack: '总量',\n                            smooth: true,\n                            data:[],\n                            color: 'rgba(99,194,222, 0.8)',\n                            backgroundColor: \"#73818f\"\n                        },\n                        {\n                            name:'Average Number',\n                            type:'line',\n                            stack: '总量',\n                            smooth: true,\n                            data:[],\n                            color: 'rgba(248,108,107, 0.8)'\n                        }\n                    ]\n                },\n                tableFields: {\n                    user: {\n                        label: \"User\",\n                        class: \"text-left\"\n                    },\n                    action: {\n                        label: \"Action\",\n                        class: \"text-left\"\n                    },\n                    vehicle: {\n                        label: \"Vehicle\",\n                        class: \"text-left\"\n                    },\n                    time: {\n                        label: \"TimeStamp\",\n                        class: \"text-left\"\n                    }\n                }\n        }\n        },\n        mounted() {\n            this.initData();\n        },\n        methods: {\n            initData() {\n                new Promise((resolve, reject) => {\n                    httpclient.get(\"/api/v1/index\", {}).then((response) => {\n                        resolve(response.data.data);\n                    }).catch((err) => {\n                        reject(err);\n                        alert(err)\n                    });\n                }).then((data) =>  {\n                    httpclient.get(\"/api/v1/vehicle/availableLogList\", {}).then((res) => {\n                        this.filterData(data, res.data.data)\n                    }).catch((err) => {\n                        alert(err)\n                    })\n                }).then(() => {\n                    this.getSales(2);\n                }).then(() => {\n                    this.getDealData(1)\n                })\n\n            },\n            chooseDealDate(type){\n                this.daily = type;\n                let num = (type == 'daily') ? 1: (type == 'week' ? 2 : 3);\n                this.getDealData(num)\n            },\n            getDealData(num) {\n                httpclient.post(\"/api/v1/index/averageparkinglotdata\", {timeType: num}).then((res) => {\n                    this.filterDealData(res.data.data);\n                }).catch((err) => {\n                    alert(err)\n                })\n            },\n            filterDealData(data) {\n                this.deaLoction.series = [];\n                this.deaLoction.xAxis.data = [];\n                this.deaLoction.legend.data = [];\n                let firstTime = getYMDFormart(data[0].averageDrivingTime2[data[0].averageDrivingTime2.length - 1].data);\n                let lastTime = getYMDFormart(data[0].averageDrivingTime2[0].data);\n                this.dailyDate = `${firstTime} - ${lastTime}`;\n                data.map((item, key) => {\n                    this.deaLoction.legend.data.push({\n                        name: item.parkingName,\n                        icon: \"roundRect\"\n                    });\n                    let seData = [];\n                    item.averageDrivingTime.reverse().map((it, k) => {\n                        seData.push(it.value);\n                        key == 0 ? this.deaLoction.xAxis.data.push(it.data) : null;\n                    });\n                    this.deaLoction.series.push({\n                        name: item.parkingName,\n                        type:'line',\n                        smooth: true,\n                        data: seData,\n                        color: `rgba(${this.color[key]})`,\n                        backgroundColor: \"#73818f\"\n                    })\n\n                });\n                echarts.init(document.getElementById(\"deaLocation\")).setOption(this.deaLoction);\n            },\n            filterSalesData(data) {\n                this.saleOption.xAxis.data = [];\n                this.saleOption.series[0].data = [];\n                this.saleOption.series[1].data = [];\n                let firstTime = getYMDFormart(data[data.length - 1].standardStartDate);\n                let lastTime = getYMDFormart(data[0].standardStartDate);\n                this.salePersonDate = `${firstTime} - ${lastTime}`;\n                for (let item of data.reverse()) {\n                    this.saleOption.xAxis.data.push(item.startDate);\n                    this.saleOption.series[0].data.push(item.averageDrivingTime);\n                    this.saleOption.series[1].data.push(item.averageDrivingNumber);\n                }\n                echarts.init(document.getElementById(\"sale\")).setOption(this.saleOption);\n            },\n            getSales(num) {\n                httpclient.post(\"/api/v1/index/averagesalesdata\", {timeType: num}).then((res) => {\n                    this.filterSalesData(res.data.data);\n                }).catch((err) => {\n                    alert(err)\n                })\n            },\n            chooseSaleDate(type) {\n                this.weekly = type;\n                let num = (type == 'month') ? 3 : 2;\n                this.getSales(num)\n            },\n            filterData(data, loglist) {\n                this.showLog = loglist.map(item => {\n                    return {\n                        user: item.firstName + \" \" + item.lastName,\n                        action: item.available == '1' ? 'has just checked in' : 'has just checked out',\n                        vehicle: `${item.year ? item.year : 'N/A'} ${item.make ? item.make : 'N/A'} ${item.model ? item.model : 'N/A'}`,\n                        time: getDateString(Number(item.createTime)),\n                        vehicleId: item.vehicleId,\n                        userId: item.checkUserId\n                    }\n                });\n\n                this.lastDate = getDateString(new Date());\n                let batHealth = [\"extremelyLowPower\", \"lowPower\", \"commonPower\"];\n                let inventory = [\"inLots\", \"offLots\"];\n\n                for (let item in this.card) {\n                    this.card[item][\"num\"] = data[item] ? data[item][\"num\"] : \"\";\n                    this.card[item][\"filters\"] = data[item] ? data[item][\"filters\"] : \"\";\n                    this.card[item][\"key\"] = data[item][\"filters\"] ? data[item][\"filters\"][0].key: \"\";\n                    this.card[item][\"value\"] = data[item][\"filters\"] ? data[item][\"filters\"][0].value[0]: \"\";\n                }\n\n                for (let i in batHealth){\n                    this.option1.series[0].data[i].value = data[batHealth[i]][\"num\"]\n                }\n                for (let i in inventory){\n                    this.option2.series[0].data[i].value = data[inventory[i]][\"num\"];\n                    console.log(data[inventory[i]][\"num\"])\n                }\n                echarts.init(document.getElementById(\"battery-health\")).setOption(this.option1);\n                echarts.init(document.getElementById(\"inventory-location\")).setOption(this.option2);\n\n            }\n        }\n\n    }\n</script>"]}]}