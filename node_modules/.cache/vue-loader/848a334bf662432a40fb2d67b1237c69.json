{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/testDrive/testReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/testDrive/testReport.vue","mtime":1571810315000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport echarts from 'echarts';\nimport httpClient from \"@/utils/httpclient\";\nimport polygonMap from \"@/components/tripMap\";\nimport { calAge, calDriveAge, getDateString2, timeInspect, getDateString3, getDateString } from \"@/utils/date\";\n\nexport default {\n    name: \"testReport\",\n    inject: ['reload'],\n    components: {\n        polygonMap\n    },\n    data() {\n        return {\n            userDetail: {},\n            driveAge: \"\",\n            driveInfo: {},\n            area: null,\n            surveyList: [\n                {\n                    id: \"1\",\n                    name: \"1. 您觉得外观设计如何？\",\n                    result: ''\n                },\n                {\n                    id: \"2\",\n                    name: \"2. 您觉得内饰设计如何？\",\n                    result: ''\n                },\n                {\n                    id: \"3\",\n                    name: \"3. 您觉得安全性能如何？\",\n                    result: ''\n                },\n                {\n                    id: \"4\",\n                    name: \"4. 您觉得动力性能如何？\",\n                    result: ''\n                },\n                {\n                    id: \"5\",\n                    name: \"5. 您觉得加速表现如何？\",\n                    result: ''\n                },\n                {\n                    id: \"6\",\n                    name: \"6. 您觉得操控性能如何？\",\n                    result: ''\n                },\n                {\n                    id: \"7\",\n                    name: \"7. 您觉得制动表现如何？\",\n                    result: ''\n                },\n                {\n                    id: \"8\",\n                    name: \"8. 您觉得舒适性如何？\",\n                    result: ''\n                },\n                {\n                    id: \"9\",\n                    name: \"9. 您觉得本次试驾流程安排如何？\",\n                    result: ''\n                },\n                {\n                    id: \"10\",\n                    name: \"10. 您近期的购车计划如何？\",\n                    result: ''\n                },\n                {\n                    id: \"11\",\n                    name: \"11. 您通过什么方式了解本次活动？\",\n                    result: ''\n                },\n                {\n                    id: \"12\",\n                    name: \"12. 通过此次试驾，您准备？\",\n                    result: ''\n                },\n                {\n                    id: \"13\",\n                    name: \"13. 您还有其他问题或建议吗？（选填）\",\n                    result: ''\n                }\n            ],\n            baseData: null,\n            emotion: {\n                title: {\n                    show: false,\n                    textStyle: {\n                        color: 'grey'\n                    }\n                },\n                dataZoom: [{\n                    orient:\"horizontal\",\n                    show: true,\n                    start: 10,\n                    end: 15\n                }],\n                tooltip: {\n                    trigger: 'axis'\n                },\n                xAxis: {\n                    show: true,\n                    data: []\n                },\n                yAxis: [\n                    {\n                        type: 'value',\n                        show: true,\n                        name: '',\n                        min: 10,\n                        max: 30,\n                        interval: 10,\n                    },\n                    {\n                        axisTick: {\n                            show: false\n                        }\n                    }\n                ],\n                series: {\n                    yAxisIndex: 0,\n                    type: \"line\",\n                    smooth: true,\n                    lineStyle: {\n                        width: 0,\n                        color: 'rgba(0, 0, 0, 0)'\n                    },\n                    itemStyle: {\n                        normal: {\n                            opacity: 0,\n                            label: {\n                                show: false\n                            }\n                        }\n                    },\n                    data: [],\n                    animation: true,\n                    symbol: \"none\",\n                    name: \"emotion\",\n                    markArea: {\n                        data: [\n                        ]\n                    },\n                    markLine: {\n                        symbol: 'none',\n                        data: [\n                        ]\n                    },\n                    markPoint: {\n                        symbol: 'circle',\n                        symbolSize: 14,\n                        itemStyle: {\n                            normal: {\n                                color: 'red',\n                                opacity: 0.8,\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [\n                        ]\n\n                    }\n                },\n                grid: {\n                    x: 24,\n                    y: 40,\n                    x2: 20,\n                    y2: 80\n                }\n            },\n            emotionData: {},\n            emotionTime: {},\n            speed: {\n                title: {\n                    show: false,\n                    textStyle: {\n                        color: 'grey'\n                    }\n                },\n                dataZoom: [{\n                    orient:\"horizontal\",\n                    show: true,\n                    start: 10,\n                    end: 15\n                }],\n                tooltip: {\n                    trigger: 'axis'\n                },\n                xAxis: {\n                    show: true,\n                    data: []\n                },\n                yAxis: {\n                    type: 'value',\n                    show: true,\n                    name: '',\n                    min: 0,\n                    max: 100,\n                    interval: 50,\n                },\n                series: {\n                    yAxisIndex: 0,\n                    type: \"line\",\n                    smooth: true,\n                    itemStyle: {\n                        normal: {\n                            opacity: 0,\n                            color: \"blue\",\n                            label: {\n                                show: false\n                            }\n                        }\n                    },\n                    data: [],\n                    animation: true,\n                    symbol: \"none\",\n                    name: \"speed\",\n                    markArea: {\n                        data: [\n                        ]\n                    },\n                    markLine: {\n                        symbol: 'none',\n                        data: [\n                        ]\n                    }\n                },\n                grid: {\n                    x: 30,\n                    y: 40,\n                    x2: 20,\n                    y2: 80\n                }\n            },\n            speedTime: {\n                high: {},\n                low: {}\n            },\n            accele: {\n                title: {\n                    show: false,\n                    textStyle: {\n                        color: 'grey'\n                    }\n                },\n                dataZoom: [{\n                    orient:\"horizontal\",\n                    show: true,\n                    start: 10,\n                    end: 15\n                }],\n                tooltip: {\n                    trigger: 'axis'\n                },\n                xAxis: {\n                    show: true,\n                    data: []\n                },\n                yAxis: {\n                    type: 'value',\n                    show: true,\n                    name: '',\n                    min: -1,\n                    max: 1,\n                    interval: 1,\n                },\n                series: {\n                    yAxisIndex: 0,\n                    type: \"line\",\n                    smooth: true,\n                    itemStyle: {\n                        normal: {\n                            opacity: 0,\n                            color: \"blue\",\n                            label: {\n                                show: false\n                            }\n                        }\n                    },\n                    data: [],\n                    animation: true,\n                    symbol: \"none\",\n                    name: \"accele\",\n                    markArea: {\n                        data: [\n                        ]\n                    },\n                    markLine: {\n                        symbol: 'none',\n                        data: [\n                        ]\n                    }\n                },\n                grid: {\n                    x: 30,\n                    y: 40,\n                    x2: 20,\n                    y2: 80\n                }\n            },\n            accleTime: {\n                high: {},\n                low: {}\n            },\n            turns: {\n                title: {\n                    show: false,\n                    textStyle: {\n                        color: 'grey'\n                    }\n                },\n                dataZoom: [{\n                    orient:\"horizontal\",\n                    show: true,\n                    start: 10,\n                    end: 15\n                }],\n                tooltip: {\n                    trigger: 'axis'\n                },\n                xAxis: {\n                    show: true,\n                    data: []\n                },\n                yAxis: {\n                    type: 'value',\n                    show: true,\n                    name: '',\n                    min: -10,\n                    max: 10,\n                    interval: 10,\n                },\n                series: {\n                    yAxisIndex: 0,\n                    type: \"line\",\n                    smooth: true,\n                    itemStyle: {\n                        normal: {\n                            opacity: 0,\n                            color: \"blue\",\n                            label: {\n                                show: false\n                            }\n                        }\n                    },\n                    data: [],\n                    animation: true,\n                    symbol: \"none\",\n                    name: \"turn\",\n                    markArea: {\n                        data: [\n                        ]\n                    },\n                    markLine: {\n                        symbol: 'none',\n                        data: [\n                        ]\n                    }\n                },\n                grid: {\n                    x: 30,\n                    y: 40,\n                    x2: 20,\n                    y2: 80\n                }\n            },\n            turnTime: {},\n            bumpTime: {},\n            pong: {\n                title: {\n                    show: false,\n                    textStyle: {\n                        color: 'grey'\n                    }\n                },\n                dataZoom: [{\n                    orient:\"horizontal\",\n                    show: true,\n                    start: 10,\n                    end: 15\n                }],\n                tooltip: {\n                    trigger: 'axis'\n                },\n                xAxis: {\n                    show: true,\n                    data: []\n                },\n                yAxis: [\n                    {\n                        type: 'value',\n                        show: true,\n                        name: '',\n                        min: 10,\n                        max: 30,\n                        interval: 10,\n                    },\n                    {\n                        axisTick: {\n                            show: false\n                        }\n                    }\n                ],\n                series: {\n                    yAxisIndex: 0,\n                    type: \"line\",\n                    smooth: true,\n                    lineStyle: {\n                        width: 0,\n                        color: 'rgba(0, 0, 0, 0)'\n                    },\n                    itemStyle: {\n                        normal: {\n                            opacity: 0,\n                            color: \"#ccc\",\n                            label: {\n                                show: false\n                            }\n                        }\n                    },\n                    data: [],\n                    animation: true,\n                    symbol: \"none\",\n                    name: \"pong\",\n                    markArea: {\n                        data: [\n                        ]\n                    },\n                    markLine: {\n                        symbol: 'none',\n                        data: [\n                        ]\n                    },\n                    markPoint: {\n                        symbol: 'circle',\n                        symbolSize: 14,\n                        itemStyle: {\n                            normal: {\n                                color: 'red',\n                                opacity: 0.8,\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [\n                        ]\n\n                    }\n                },\n                grid: {\n                    x: 24,\n                    y: 40,\n                    x2: 20,\n                    y2: 50\n                }\n            },\n            wholeEmotion: {},\n            finishTime: null\n        }\n    },\n    mounted() {\n        // coordinatetype 1,WGS84全球坐标系  2,GCJ02火星坐标系  3,BD09百度坐标系\n        httpClient.get('/api/v1/clouddrive/report/detail?coordinatetype=1&orderid=' + this.$route.params.id).then(response => {\n            if (response.data.code == 200) {\n                this.userDetail = response.data.data.userDetailDTO ?  response.data.data.userDetailDTO : {};\n                this.driveInfo = response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO;\n                this.area = {\n                    area: response.data.data.cloudDriveReportDTO.tracesDataDTOList,\n                    center: response.data.data.cloudDriveReportDTO.tracesDataDTOList[0]\n                };\n                let time = response.data.data.userDetailDTO ? this.calDriveAge(response.data.data.userDetailDTO.driveLicenseInitDate) : 0;\n                this.driveAge = time.year + this.$t('m.report.year') + time.month + this.$t('m.report.month');\n                this.getEmotion(\n                    response.data.data.cloudDriveReportDTO.emotionList,\n                    response.data.data.cloudDriveReportDTO.accelerationDataList,\n                    response.data.data.cloudDriveReportDTO.alarmPushDTOList ? response.data.data.cloudDriveReportDTO.alarmPushDTOList.events : []);\n                this.baseData = response.data.data.cloudDriveReportDTO.accelerationDataList;\n                this.emotionData = response.data.data.cloudDriveReportDTO.alarmPushDTOList;\n                this.emotionTime = response.data.data.cloudDriveReportDTO.startUp;\n                this.speedTime = {\n                    \"high\": response.data.data.cloudDriveReportDTO.highSpeed,\n                    \"low\": response.data.data.cloudDriveReportDTO.lowSpeed\n                };\n                this.accleTime = {\n                    \"high\": response.data.data.cloudDriveReportDTO.accelerate,\n                    \"low\": response.data.data.cloudDriveReportDTO.swerve\n                };\n                this.turnTime = response.data.data.cloudDriveReportDTO.swerve;\n                this.bumpTime = response.data.data.cloudDriveReportDTO.bumpy;\n                this.wholeEmotion = response.data.data.cloudDriveReportDTO.wholeEmotionDTO;\n                this.finishTime = response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO.reportFinishTime;\n                this.getSpeed(\n                    response.data.data.cloudDriveReportDTO.emotionList,\n                    response.data.data.cloudDriveReportDTO.speedList,\n                );\n                this.getAcceleration(\n                    response.data.data.cloudDriveReportDTO.emotionList,\n                    response.data.data.cloudDriveReportDTO.accelerationDataList,\n                );\n                this.getTurn(response.data.data.cloudDriveReportDTO.emotionList,\n                    response.data.data.cloudDriveReportDTO.turnDataDTOS);\n                this.getPong(\n                    response.data.data.cloudDriveReportDTO.emotionList,\n                    response.data.data.cloudDriveReportDTO.accelerationDataList,\n                    response.data.data.cloudDriveReportDTO.alarmPushDTOList ? response.data.data.cloudDriveReportDTO.alarmPushDTOList.bumpyEvents : []\n                );\n                response.data.data.surveyFeedbackDTO ?\n                    this.filterSurvey(response.data.data.surveyFeedbackDTO)\n                    :\n                    null;\n            }\n        });\n    },\n    methods: {\n        initBaseData(driveData) {\n            let data = [];\n            driveData.map(item => {\n                data.push(getDateString3(item.driveTime));\n            });\n            return data;\n        },\n        getDateString(time) {\n            return getDateString(time)\n        },\n        getPong(data, driveData, eventData) {\n            let eventList = [];\n            eventData.map(item => {\n                eventList.push({\n                    value: item.content,\n                    xAxis: getDateString3(item.time),\n                    yAxis: 20\n                })\n            });\n            let {emotionList, area, line } = this.initEmotion(data);\n            this.pong.series.markArea.data = area;\n            this.pong.xAxis.data = this.initBaseData(driveData);\n            this.pong.series.data = emotionList;\n            this.pong.series.markLine.data = line;\n            this.pong.series.markPoint.data = eventList;\n            echarts.init(document.getElementById('pong')).setOption(this.pong)\n        },\n        getTurn(data,accData) {\n            let accList = [];\n            let yList = [];\n            let { area, line } = this.defaultEmotion(data, 'turn');\n            accData.map(item => {\n                accList.push(getDateString3(item.driveTime));\n                yList.push(item.turn)\n            });\n            this.turns.series.markArea.data = area;\n            this.turns.series.markLine.data = line;\n            this.turns.xAxis.data = accList;\n            this.turns.series.data = yList;\n            echarts.init(document.getElementById('turn')).setOption(this.turns)\n        },\n        filterTime(mis) {\n            return parseInt((mis % (1000 * 60 * 60)) / (1000 * 60));\n        },\n        filterSurvey(data) {\n            this.surveyList.map(item => {\n                data.map(it => {\n                   if (it.subjectId == item.id) {\n                       item['result'] = it.questionnaireContent;\n                   }\n                });\n            });\n        },\n        initEmotion(data, type) {\n            let emotionList =[];\n            let area = [];\n            let line = [];\n            data.map(item => {\n                emotionList.push(item.emotion);\n                if (item.emotion == 10 || item.emotion == 0) {\n                    line.push([\n                        {\n                            xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                            yAxis: type == 'speed' ? 50 : 20,\n                            itemStyle: {\n                                color: \"black\"\n                            },\n                        },\n                        {\n                            yAxis: type == 'speed' ? 50 : 20,\n                            xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n                        }\n                    ])\n                } else {\n                    area.push([{\n                        xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                        temp: item.emotion,\n                        yAxis: type == 'speed' ? (item.emotion == 20 ? 50 : 0) : (item.emotion == 20 ? 20 : 0),\n                        itemStyle: {\n                            color: item.emotion == 20  ? \"green\" : (item.emotion == 30 ? \"red\" : \"yellow\")\n                        },\n                    }, {\n                        yAxis: type == 'speed' ? (item.emotion == 20 ? 100 : 50) : (item.emotion == 20  ? 30 : 20),\n                        xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n\n                    }])\n                }\n            });\n            return {\n                emotionList,\n                area,\n                line\n            }\n        },\n        defaultEmotion(data, type) {\n            let emotionList =[];\n            let area = [];\n            let line = [];\n            data.map(item => {\n                emotionList.push(item.emotion);\n                if (item.emotion == 10 || item.emotion == 0) {\n                    line.push([\n                        {\n                            xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                            yAxis: 0,\n                            itemStyle: {\n                                color: \"black\"\n                            },\n                        },\n                        {\n                            yAxis: 0,\n                            xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n                        }\n                    ])\n                } else {\n                    area.push([{\n                        xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                        temp: item.emotion,\n                        yAxis: type == 'turn' ? ( item.emotion == 20 ? 0 : -10) : ( item.emotion == 20 ? 0 : -1),\n                        itemStyle: {\n                            color: item.emotion == 20  ? \"green\" : (item.emotion == 30 ? \"red\" : \"yellow\")\n                        },\n                    }, {\n                        yAxis: type == 'turn' ? (item.emotion == 20 ? 10 : 0 ) : (item.emotion == 20 ? 1 : 0 ),\n                        xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n\n                    }])\n                }\n            });\n            return {\n                emotionList,\n                area,\n                line\n            }\n        },\n        getAcceleration(data, accData) {\n            let { area, line } = this.defaultEmotion(data);\n            let accList = [];\n            let yList = [];\n            accData.map(item => {\n                accList.push(getDateString3(item.driveTime));\n                yList.push(item.type)\n            });\n            this.accele.series.markArea.data = area;\n            this.accele.series.markLine.data = line;\n            this.accele.xAxis.data = accList;\n            this.accele.series.data = yList;\n            echarts.init(document.getElementById('acceleration')).setOption(this.accele)\n        },\n        getSpeed(data, speedData) {\n            let { area, line } = this.initEmotion(data, 'speed');\n            let speedList = [];\n            let yList = [];\n            speedData.map(item => {\n                speedList.push(getDateString3(item.driveTime));\n                yList.push(item.speed)\n            });\n            this.speed.series.markArea.data = area;\n            this.speed.series.markLine.data = line;\n            this.speed.xAxis.data = speedList;\n            this.speed.series.data = yList;\n            echarts.init(document.getElementById('speed')).setOption(this.speed)\n        },\n        getEmotion(data, driveData, eventData) {\n            let eventList = [];\n            eventData.map(item => {\n                eventList.push({\n                    value: item.content,\n                    xAxis: getDateString3(item.time),\n                    name: '积极情绪',\n                    yAxis: 20\n                })\n            });\n            let {emotionList, area, line } = this.initEmotion(data);\n            this.emotion.series.markArea.data = area;\n            this.emotion.xAxis.data = this.initBaseData(driveData);\n            this.emotion.series.data = emotionList;\n            this.emotion.series.markLine.data = line;\n            this.emotion.series.markPoint.data = eventList;\n            echarts.init(document.getElementById('emotion')).setOption(this.emotion)\n\n        },\n        calAge(bir) {\n            return calAge(bir);\n        },\n        calDriveAge(time) {\n            return calDriveAge(time)\n        },\n        getDateString2(time) {\n            return getDateString2(time)\n        },\n        timeInspect(time1, time2){\n            return timeInspect(time1, time2)\n        }\n    }\n}\n",null]}