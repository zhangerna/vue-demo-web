{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/searchMapForGoogle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/searchMapForGoogle.vue","mtime":1577962918000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport google from \"google\";\nimport httpClient from '@/utils/httpclient';\nexport default {\n  name: \"SearchMapForGoogle\",\n  props: [\"map\", \"from\"],\n  data: function data() {\n    return {\n      mapInfo: {\n        lots: [],\n        lat: 0,\n        lng: 0,\n        vehicleInfo: [],\n        showMult: true\n      },\n      mapObj: {},\n      marker: null,\n      polygon: null,\n      markers: [],\n      bounds: null\n    };\n  },\n  watch: {\n    map: function map(newVal) {\n      console.log(\"----\");\n\n      if (newVal) {\n        this.mapInfo.lots = newVal.lots;\n        this.mapInfo.lat = newVal.lots.length > 0 ? newVal.lots[0].centerCoordinate.split(' ')[1] : 31.3249335128696;\n        this.mapInfo.lng = newVal.lots.length > 0 ? newVal.lots[0].centerCoordinate.split(' ')[0] : 121.594292808653;\n        this.mapInfo.vehicleInfo = newVal.vehicles;\n        this.initMap();\n      }\n    }\n  },\n  methods: {\n    getYMDString: function getYMDString(time) {\n      console.log(time);\n\n      if (time) {\n        var date = new Date(time);\n        var Y = date.getFullYear() + ' ';\n        var M = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;\n        var D = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();\n        var h = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\n        var m = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\n        return M + '/' + D + '/' + Y + ' ' + h + ':' + m + ' ';\n      } else {\n        return '';\n      }\n    },\n    addMarker: function addMarker(position, title, item) {\n      var marker = new google.maps.Marker({\n        position: position,\n        map: this.mapObj,\n        animation: google.maps.Animation.DROP,\n        title: title,\n        icon: {\n          url: item.currentVoltage < 11.7 ? \"https://cdn.shopify.com/s/files/1/0703/1149/files/Location.png?807016\" : \"https://pic.zus.ai/saas/vehicle.png\",\n          scaledSize: new google.maps.Size(30, 30)\n        }\n      });\n      this.bounds.extend(marker.getPosition());\n      this.markers.push(marker);\n      var self = this;\n      marker.addListener('click', function () {\n        var _this = this;\n\n        var lang = '';\n\n        if (self.$i18n.locale === 'zh-CN') {\n          lang = 'China';\n        } else {\n          lang = 'US';\n        }\n\n        var link = '/api/v1/getlastLocation?lastlocationlat=' + item.lastLocationLat + '&lastlocationlng=' + item.lastLocationLng + '&country=' + lang;\n        var myString = '';\n        httpClient.get(link).then(function (res) {\n          if (res.data.code === 200) {\n            var p = item.currentVoltage < 11.7 ? \"<p style=\\\"margin-bottom:6px;font-size: 12px;\\\">\".concat(self.$t('m.common.voltage'), \":  <span style=\\\"color: red\\\"> <i class=\\\"fa fa-exclamation-triangle\\\"></i> \").concat(item.currentVoltage, \"V</span></p>\") : \"<p style=\\\"margin-bottom:6px;font-size: 12px;\\\">\".concat(self.$t('m.common.voltage'), \":\").concat(item.currentVoltage, \"V</p>\");\n            myString = \"<a href='/vehicle/detail/\".concat(item.vehicleId, \"'>\\n                        <img style=\\\"background: #3a4149\\\" src=\\\"\").concat(item.photoUrl ? item.photoUrl : '/img/placeholder.5367544d.svg', \"\\\" width=\\\"40%\\\">\\n                        <h5 id=\\\"firstHeading\\\" class=\\\"firstHeading\\\">\\n                            <a target=\\\"_blank\\\" href=\\\"/vehicle/\").concat(item.saleStatus === 1 ? \"vehicle\" : \"sold-manager\", \"/\").concat(item.vehicleId, \"\\\">\").concat(item.year ? item.year : 'N/A', \" \").concat(item.make ? item.make : 'N/A', \" \").concat(item.model ? item.model : 'N/A', \" \").concat(item.alias ? \"-\" + item.alias : '', \"</a>\\n                        </h5>\\n                        <p style=\\\"margin-bottom:6px;font-size: 12px\\\">VIN:\").concat(item.vin, \"</p>\\n                        \").concat(p, \"\\n                        <p style=\\\"margin-bottom:6px;font-size: 12px\\\">\").concat(self.$t('m.common.last_location'), \":\").concat(res.data.data.locationName, \"</p>\\n                        <p style=\\\"margin-bottom:6px;font-size: 12px\\\">\").concat(self.$t('m.common.last_update'), \":\").concat(self.getYMDString(item.locationTime), \"</p>\\n                        </a>\");\n            var infoWindow = new google.maps.InfoWindow({\n              content: myString\n            });\n            infoWindow.open(_this.mapObj, marker);\n          }\n        });\n      });\n    },\n    initMap: function initMap() {\n      var _this2 = this;\n\n      this.mapObj = new google.maps.Map(document.getElementById(\"google-map\"), {\n        zoom: 15,\n        center: {\n          lng: Number(this.mapInfo.lng),\n          lat: Number(this.mapInfo.lat)\n        }\n      });\n      var coords = [];\n\n      if (this.mapInfo.lots.length > 0) {\n        this.mapInfo.lots.map(function (item) {\n          var myArr = [];\n\n          if (item.areaCoordinate) {\n            item.areaCoordinate.map(function (val) {\n              myArr.push({\n                lat: Number(val.split(\",\")[1]),\n                lng: Number(val.split(\",\")[0])\n              });\n            });\n            coords.push(myArr);\n          }\n        });\n      }\n\n      this.bounds = new google.maps.LatLngBounds();\n\n      if (this.mapInfo.showMult && this.mapInfo.vehicleInfo.length > 0) {\n        this.mapInfo.vehicleInfo.map(function (item) {\n          if (item.lastLocationLat) {\n            var position = {\n              lat: Number(item.lastLocationLat),\n              lng: Number(item.lastLocationLng)\n            };\n            var title = \"\".concat(item.year ? item.year : 'N/A', \" \").concat(item.make ? item.make : 'N/A', \" \").concat(item.model ? item.model : 'N/A', \" - \").concat(item.alias ? item.alias : 'N/A');\n\n            _this2.addMarker(position, title, item);\n          }\n        });\n      }\n\n      this.mapObj.fitBounds(this.bounds);\n      this.polygon = new google.maps.Polygon({\n        paths: coords,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35\n      });\n      this.polygon.setMap(this.mapObj);\n      new google.maps.drawing.DrawingManager({\n        drawingControl: true,\n        drawingControlOptions: {\n          position: google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [google.maps.drawing.OverlayType.POLYGON]\n        },\n        circleOptions: {\n          fillColor: '#ffff00',\n          fillOpacity: 1,\n          strokeWeight: 5,\n          clickable: false,\n          editable: true,\n          zIndex: 1\n        },\n        polygonOptions: {\n          strokeColor: \"#FF0000\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: \"#FF0000\",\n          fillOpacity: 0.35,\n          editable: true\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["searchMapForGoogle.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div id=\"google-map\"></div>\n</template>\n\n<style lang=\"scss\">\n    #google-map {\n        width: 100%;\n        height: 60vh;\n        margin-bottom: 5vh;\n        .gm-style .gm-style-iw-d {\n            max-width: 280px !important;\n\n            img {\n                width: 100%;\n            }\n        }\n    }\n</style>\n\n<script>\n    import google from \"google\"\n    import httpClient from '@/utils/httpclient';\n    export default {\n        name: \"SearchMapForGoogle\",\n        props: [\"map\", \"from\"],\n        data() {\n            return {\n                mapInfo: {\n                    lots:[],\n                    lat:0,\n                    lng:0,\n                    vehicleInfo:[],\n                    showMult:true\n                },\n                mapObj: {},\n                marker: null,\n                polygon: null,\n                markers: [],\n                bounds: null,\n            }\n        },\n        watch: {\n            map: function (newVal) {\n                console.log(\"----\");\n                if (newVal) {\n                    this.mapInfo.lots = newVal.lots;\n                    this.mapInfo.lat = newVal.lots.length > 0 ? newVal.lots[0].centerCoordinate.split(' ')[1] : 31.3249335128696;\n                    this.mapInfo.lng = newVal.lots.length > 0 ? newVal.lots[0].centerCoordinate.split(' ')[0] : 121.594292808653;\n                    this.mapInfo.vehicleInfo = newVal.vehicles;\n                    this.initMap();\n                }\n            }\n        },\n        methods: {\n            getYMDString(time) {\n                console.log(time)\n                if(time){\n                    let date = new Date(time);\n                    let Y = date.getFullYear() + ' ';\n                    let M = (date.getMonth() + 1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1);\n                    let D = date.getDate() < 10 ? '0' + date.getDate() : date.getDate() ;\n                    let h = date.getHours() < 10 ? '0' + date.getHours() : date.getHours() ;\n                    let m = date.getMinutes() < 10 ? '0' + date.getMinutes()  : date.getMinutes();\n                    return  M + '/' + D + '/' + Y + ' ' + h +':'+ m +  ' ';\n                }else{\n                    return  '';\n                }\n\n            },\n            addMarker(position, title, item) {\n                var marker = new google.maps.Marker({\n                    position: position,\n                    map: this.mapObj,\n                    animation: google.maps.Animation.DROP,\n                    title: title,\n                    icon: {\n                        url: item.currentVoltage < 11.7 ? \"https://cdn.shopify.com/s/files/1/0703/1149/files/Location.png?807016\" : \"https://pic.zus.ai/saas/vehicle.png\",\n                        scaledSize: new google.maps.Size(30, 30)\n                    }\n                });\n                this.bounds.extend(marker.getPosition());\n                this.markers.push(marker);\n                let self = this;\n                marker.addListener('click', function () {\n                    let lang='';\n                    if(self.$i18n.locale === 'zh-CN'){\n                        lang = 'China'\n                    }else{\n                        lang = 'US'\n                    }\n\n                    let link = '/api/v1/getlastLocation?lastlocationlat='+item.lastLocationLat+'&lastlocationlng='+item.lastLocationLng+'&country='+lang;\n                    let myString='';\n                    httpClient.get(link).then(res=>{\n                        if(res.data.code === 200){\n                            let p = item.currentVoltage < 11.7 ? `<p style=\"margin-bottom:6px;font-size: 12px;\">${ self.$t('m.common.voltage') }:  <span style=\"color: red\"> <i class=\"fa fa-exclamation-triangle\"></i> ${item.currentVoltage}V</span></p>` : `<p style=\"margin-bottom:6px;font-size: 12px;\">${ self.$t('m.common.voltage') }:${item.currentVoltage}V</p>`;\n                            myString = `<a href='/vehicle/detail/${item.vehicleId}'>\n                            <img style=\"background: #3a4149\" src=\"${item.photoUrl ? item.photoUrl : '/img/placeholder.5367544d.svg'}\" width=\"40%\">\n                            <h5 id=\"firstHeading\" class=\"firstHeading\">\n                                <a target=\"_blank\" href=\"/vehicle/${item.saleStatus === 1 ?\"vehicle\":\"sold-manager\"}/${item.vehicleId}\">${item.year ? item.year :'N/A'} ${item.make ? item.make :'N/A'} ${item.model ? item.model:'N/A'} ${item.alias? \"-\" + item.alias: ''}</a>\n                            </h5>\n                            <p style=\"margin-bottom:6px;font-size: 12px\">VIN:${item.vin}</p>\n                            ${p}\n                            <p style=\"margin-bottom:6px;font-size: 12px\">${self.$t('m.common.last_location')}:${res.data.data.locationName}</p>\n                            <p style=\"margin-bottom:6px;font-size: 12px\">${self.$t('m.common.last_update')}:${self.getYMDString(item.locationTime)}</p>\n                            </a>`;\n                            let infoWindow = new google.maps.InfoWindow({\n                                content:myString\n                            });\n\n                            infoWindow.open(this.mapObj, marker);\n                        }\n                    })\n                })\n            },\n            initMap(){\n                this.mapObj = new google.maps.Map(document.getElementById(\"google-map\"), {\n                    zoom: 15,\n                    center: {lng: Number(this.mapInfo.lng), lat: Number(this.mapInfo.lat)}\n                });\n\n                let coords=[];\n                if(this.mapInfo.lots.length > 0){\n                    this.mapInfo.lots.map(item => {\n                        let myArr=[];\n                        if (item.areaCoordinate) {\n                            item.areaCoordinate.map(val=>{\n                                myArr.push({lat: Number(val.split(\",\")[1]), lng: Number(val.split(\",\")[0]) })\n                            });\n                            coords.push(myArr)\n                        }\n                    });\n                }\n\n                this.bounds = new google.maps.LatLngBounds();\n\n                if (this.mapInfo.showMult && this.mapInfo.vehicleInfo.length > 0) {\n                    this.mapInfo.vehicleInfo.map(item => {\n                        if(item.lastLocationLat ){\n                            let position = {lat: Number(item.lastLocationLat), lng: Number(item.lastLocationLng)};\n                            let title = `${item.year? item.year :'N/A'} ${item.make? item.make :'N/A'} ${item.model? item.model:'N/A'} - ${item.alias? item.alias:'N/A'}`;\n                            this.addMarker(position, title, item);\n                        }\n                    })\n                }\n                this.mapObj.fitBounds(this.bounds);\n\n                this.polygon = new google.maps.Polygon({\n                    paths: coords,\n                    strokeColor: '#FF0000',\n                    strokeOpacity: 0.8,\n                    strokeWeight: 2,\n                    fillColor: '#FF0000',\n                    fillOpacity: 0.35\n                });\n                this.polygon.setMap(this.mapObj);\n                new google.maps.drawing.DrawingManager({\n                    drawingControl: true,\n                    drawingControlOptions: {\n                        position: google.maps.ControlPosition.TOP_CENTER,\n                        drawingModes: [\n                            google.maps.drawing.OverlayType.POLYGON\n                        ]\n                    },\n\n                    circleOptions: {\n                        fillColor: '#ffff00',\n                        fillOpacity: 1,\n                        strokeWeight: 5,\n                        clickable: false,\n                        editable: true,\n                        zIndex: 1\n                    },\n\n                    polygonOptions: {\n                        strokeColor: \"#FF0000\",\n                        strokeOpacity: 0.8,\n                        strokeWeight: 2,\n                        fillColor: \"#FF0000\",\n                        fillOpacity: 0.35,\n                        editable: true,\n                    }\n                });\n\n            }\n        }\n    }\n</script>\n"],"sourceRoot":"src/components"}]}