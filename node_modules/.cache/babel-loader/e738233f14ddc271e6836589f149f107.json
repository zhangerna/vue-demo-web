{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/drawAmap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/drawAmap.vue","mtime":1577066250000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport httpClient from \"@/utils/httpclient\";\nimport { wgs84ToGcjo2, gcj02towgs84 } from \"@/utils/coordtransform\";\nimport AMap from 'AMap';\nimport model from \"./model\";\nimport { findIndex } from \"@/utils/db\";\nexport default {\n  name: 'drawMap',\n  props: ['data'],\n  components: {\n    model: model\n  },\n  watch: {\n    data: function data(newV) {\n      this.parkingName = newV.parkingName;\n      this.address = newV.address;\n      this.areaCoord = newV.areaCoordinate;\n      this.centerCoordinate = newV.centerCoordinate;\n      this.user = newV.parkingContactName;\n      this.phone = newV.parkingContactPhone;\n      this.parkingDes = newV.parkingAddressDesc;\n      this.getCityList(newV);\n      this.initEdit();\n    },\n    parkingName: function parkingName(newV) {\n      this.parkingName = this.trim(newV);\n      this.checkInput();\n    },\n    address: function address(newV) {\n      this.address = this.trim(newV);\n      this.checkInput();\n    }\n  },\n  mounted: function mounted() {\n    if (!this.$route.params.id) {\n      this.getCityList();\n      this.initialize();\n    } // this.initEdit()\n\n  },\n  data: function data() {\n    return {\n      list: [],\n      country: '',\n      state: '',\n      city: '',\n      area: '',\n      user: '',\n      parkingDes: \"\",\n      phone: '',\n      disable: true,\n      mapObj: null,\n      infoWindow: null,\n      geocoders: null,\n      drawManager: null,\n      polygonCompete: [],\n      locations: [],\n      parkingName: '',\n      centerCoordinate: null,\n      address: '',\n      show: false,\n      content: \"\",\n      btnGroup: {\n        btnSecond: this.$t('m.tip.b_ok')\n      },\n      areaCoord: null,\n      bermudaTriangle: null,\n      isMapChanged: false,\n      drawButton: this.$t('m.map.start_draw'),\n      markers: [],\n      roadLayer: null,\n      curOperation: false,\n      safeLayer: null,\n      showMap: false\n    };\n  },\n  methods: {\n    showMapTip: function showMapTip() {\n      this.showMap = true;\n    },\n    getCityList: function getCityList(newV) {\n      var _this = this;\n\n      httpClient.get(\"/api/v1/getprovicescitynew\").then(function (res) {\n        if (res.data.code == 200) {\n          process.env.VUE_APP_ENV == 'cn' ? _this.list = res.data.data.countryList.filter(function (item) {\n            return item.countryId == '248';\n          }) : _this.list = res.data.data.countryList;\n\n          if (_this.$route.params.id && newV.parkingCountryCode && newV.parkingStateCode && newV.parkingCityCode) {\n            var temp = findIndex(res.data.data.countryList, newV.parkingCountryCode, \"country\");\n            _this.country = temp.index + 1;\n            temp = findIndex(temp.item.proviceList, newV.parkingStateCode, \"provice\");\n            _this.state = temp.index + 1;\n            temp = findIndex(temp.item.cityList, newV.parkingCityCode, \"city\");\n            _this.city = temp.index + 1;\n\n            if (_this.GLOBAL.APP_ENV == 'cn') {\n              temp = findIndex(temp.item.areaDTOList, newV.parkingAreaCode, \"area\");\n              _this.area = temp.index + 1;\n            }\n          }\n        }\n      });\n    },\n    changeMapType: function changeMapType(type) {\n      if (type == 'default') {\n        this.roadLayer.hide();\n        this.safeLayer.hide();\n      } else {\n        this.roadLayer.show();\n        this.safeLayer.show();\n      }\n    },\n    initEdit: function initEdit() {\n      this.drawButton = this.$t('m.map.redraw');\n      var temp = this.centerCoordinate.split(\" \");\n      var lnglat = wgs84ToGcjo2(temp[0], temp[1]);\n      this.mapObj = new AMap.Map('map-canvas', {\n        center: lnglat,\n        zoom: 17\n      });\n      this.safeLayer = new AMap.TileLayer.Satellite({});\n      this.roadLayer = new AMap.TileLayer.RoadNet({});\n      this.mapObj.add(this.roadLayer);\n      this.mapObj.add(this.safeLayer); // this.mapObj.add(this.roadLayer);\n\n      this.safeLayer.hide();\n      this.roadLayer.hide();\n      var area2 = [];\n      this.areaCoord.map(function (item) {\n        var temp = item.split(\",\");\n        area2.push(wgs84ToGcjo2(Number(temp[0]), Number(temp[1])));\n      });\n      this.initPolygon(area2);\n    },\n    initPolygon: function initPolygon(area2) {\n      this.polygonCompete = new AMap.Polygon({\n        path: area2,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35\n      });\n      this.mapObj.add(this.polygonCompete);\n    },\n    drawPolygon: function drawPolygon() {\n      var _this2 = this;\n\n      this.checkInput();\n\n      if (window.mouseTool) {\n        this.mapObj.remove(this.polygonCompete);\n        this.polygonCompete = [];\n        window.mouseTool.close(true);\n      }\n\n      window.mouseTool = new AMap.MouseTool(this.mapObj);\n      window.mouseTool.polygon({\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#FF0000\",\n        fillOpacity: 0.35,\n        editable: true\n      });\n      window.mouseTool.on('draw', function (event) {\n        // this.polygonCompete.push(event.obj);\n        _this2.drawButton = _this2.$t('m.map.redraw');\n        var array = event.obj.getPath();\n\n        _this2.showLonLat(array);\n\n        window.mouseTool.close(true);\n      });\n    },\n    showLonLat: function showLonLat(arry) {\n      var _this3 = this;\n\n      var locations = [];\n      var outChina = false;\n      arry.map(function (item) {\n        if (gcj02towgs84(item.lng, item.lat).lng) {\n          locations.push(gcj02towgs84(item.lng, item.lat));\n        } else {\n          outChina = true;\n        }\n      });\n\n      if (outChina) {\n        this.content = this.$t(\"m.map.out_china\");\n        this.show = true;\n        return;\n      }\n\n      locations[arry.length] = locations[0];\n      this.initPolygon(arry);\n      this.areaCoord = locations;\n      httpClient.post('/api/v1/lot/isRepeated', {\n        parkingName: this.parkingName,\n        address: this.address,\n        areaCoordinate: locations,\n        id: this.$route.params.id,\n        lotType: 1\n      }).then(function (response) {\n        if (response.data.data != null) {\n          _this3.isMapChanged = true;\n\n          _this3.showTip(response.data.data);\n        } else {\n          _this3.checkInput();\n\n          _this3.isMapChanged = true;\n        }\n      });\n    },\n    hideTip: function hideTip() {\n      if (this.curOperation) {\n        this.$router.push('/inventory/lots/list');\n      }\n\n      this.show = false;\n      this.disable = true;\n    },\n    initialize: function initialize() {\n      this.mapObj = new AMap.Map('map-canvas', {\n        zoom: 15\n      });\n      this.roadLayer = new AMap.TileLayer.RoadNet({});\n      this.safeLayer = new AMap.TileLayer.Satellite({});\n      this.mapObj.add(this.roadLayer);\n      this.mapObj.add(this.safeLayer);\n      this.safeLayer.hide();\n      this.roadLayer.hide();\n    },\n    getLocate: function getLocate() {\n      var _this4 = this;\n\n      this.checkInput();\n\n      if (this.address) {\n        this.mapObj.remove(this.markers);\n        this.geocoders = new AMap.Geocoder();\n        this.geocoders.getLocation(this.address, function (status, result) {\n          if (status === 'complete' && result.geocodes.length) {\n            _this4.markers = new AMap.Marker({\n              position: result.geocodes[0].location,\n              icon: new AMap.Icon({\n                image: \"https://cdn2.shopify.com/s/files/1/0703/1149/files/Location_03580bd1-f466-4803-a69e-720a098b08a5.svg?828688\",\n                size: new AMap.Size(60, 60),\n                imageSize: new AMap.Size(20, 30)\n              })\n            });\n\n            _this4.mapObj.add(_this4.markers);\n\n            _this4.mapObj.setFitView(_this4.markers);\n          }\n        });\n      }\n    },\n    showTip: function showTip(data) {\n      this.show = true;\n      this.content = this.$t('m.map.warn_repeat', {\n        data: data\n      });\n    },\n    trim: function trim(str) {\n      return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    },\n    checkInput: function checkInput() {\n      if (!this.parkingName || !this.user || !this.phone || !this.areaCoord || this.areaCoord.length == 0 || !this.address || !this.country || !this.state || !this.city) {\n        this.disable = true;\n        return;\n      }\n\n      this.disable = false;\n    },\n    submitData: function submitData() {\n      var _this5 = this;\n\n      this.checkInput();\n      var link = '';\n\n      if (!this.data) {\n        link = '/api/v1/lot/insert';\n      } else {\n        link = '/api/v1/lot/update';\n      }\n\n      if (!this.isMapChanged && this.areaCoord) {\n        var data = this.areaCoord.map(function (item) {\n          return {\n            lng: item.split(\",\")[0],\n            lat: item.split(\",\")[1]\n          };\n        });\n        this.areaCoord = data;\n      }\n\n      httpClient.post(link, {\n        parkingName: this.parkingName,\n        address: this.address,\n        areaCoordinate: this.areaCoord,\n        id: this.$route.params.id,\n        parkingAddressDesc: this.parkingDes,\n        parkingContactName: this.user,\n        parkingContactPhone: this.phone,\n        parkingCountryCode: this.list[this.country - 1].countryId,\n        parkingStateCode: this.list[this.country - 1]['proviceList'][this.state - 1].provicesId,\n        parkingCityCode: this.list[this.country - 1]['proviceList'][this.state - 1]['cityList'][this.city - 1].cityId,\n        parkingAreaCode: this.GLOBAL.APP_ENV == 'cn' ? this.list[this.country - 1]['proviceList'][this.state - 1]['cityList'][this.city - 1]['areaDTOList'][this.area - 1].areaId : ''\n      }).then(function (response) {\n        if (response.data.code == 200) {\n          _this5.curOperation = true;\n\n          if (!_this5.data) {\n            _this5.content = _this5.$t('m.tip.save_succ');\n          } else {\n            _this5.content = _this5.$t('m.tip.edit_succ');\n          }\n\n          _this5.show = true;\n        } else {\n          _this5.show = true;\n          _this5.content = \"Lot Name: \".concat(response.data.data, \" Existed.\");\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["drawAmap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"draw-map\">\n        <b-row>\n            <b-col sm=\"6\">\n                <b-form-group>\n                    <label>{{ $t('m.lots.name') }}</label>\n                    <b-form-input type=\"text\" v-model=\"parkingName\" @change=\"checkInput\"></b-form-input>\n                </b-form-group>\n                <b-form-group>\n                    <b-row>\n                        <b-col :sm=\"GLOBAL.APP_ENV == 'cn' ? 3 : 4\" class=\"padding0\">\n                            <label>{{ $t('m.add_shop.country') }}</label>\n                            <select class=\"form-control\" v-model=\"country\" @change=\"checkInput\">\n                                <option value=\"\" disabled selected>{{ $t('m.add_shop.please_select') }}</option>\n                                <option v-for=\"(item, key) in list\" :key=\"key\" :value=\"key + 1\">{{ item.countryCName }}</option>\n                            </select>\n                        </b-col>\n                        <b-col :sm=\"GLOBAL.APP_ENV == 'cn' ? 3 : 4\" class=\"padding0\">\n                            <label>{{ $t('m.add_shop.state') }}</label>\n                            <select class=\"form-control\" v-model=\"state\" @change=\"checkInput\">\n                                <option value=\"\" disabled selected>{{ $t('m.add_shop.please_select') }}</option>\n                                <option v-for=\"(item, key) in (country ? list[country - 1]['proviceList'] : [])\" :value=\"key + 1\" :key=\"key\">{{ item.proviceCName}}</option>\n                            </select>\n                        </b-col>\n                        <b-col :sm=\"GLOBAL.APP_ENV == 'cn' ? 3 : 4\" class=\"padding0\">\n                            <label>{{ $t('m.add_shop.city') }}</label>\n                            <select class=\"form-control\" v-model=\"city\" @change=\"checkInput\">\n                                <option value=\"\" disabled selected>{{ $t('m.add_shop.please_select') }}</option>\n                                <option v-for=\"(item, key) in (country && state ? list[country - 1]['proviceList'][state - 1]['cityList'] : [] )\" :value=\"key + 1\" :key=\"key\">{{ item.cityCName }}</option>\n                            </select>\n                        </b-col>\n                        <b-col sm=\"3\" v-if=\"GLOBAL.APP_ENV == 'cn'\">\n                            <label>{{ $t('m.add_shop.area') }}</label>\n                            <select class=\"form-control\" v-model=\"area\" @change=\"checkInput\">\n                                <option value=\"\" disabled selected>{{ $t('m.add_shop.please_select') }}</option>\n                                <option v-for=\"(item, key) in (country && state && city ? list[country - 1]['proviceList'][state - 1]['cityList'][city -1]['areaDTOList'] : [])\" :value=\"key + 1\" :key=\"key\">{{ item.areaCName }}</option>\n                            </select>\n                        </b-col>\n                    </b-row>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.common.contact_person') }}</label>\n                    <b-form-input type=\"text\" @change=\"checkInput()\" v-model=\"user\" maxlength=\"30\"></b-form-input>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.common.contact_phone') }}</label>\n                    <b-form-input type=\"number\" v-model=\"phone\" maxlength=\"15\" @change=\"checkInput\"></b-form-input>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.lots.address') }}</label>\n                    <b-input-group>\n                        <b-form-input type=\"text\" v-model=\"address\" maxlength=\"100\" @change=\"checkInput\"></b-form-input>\n                        <b-input-group-append>\n                            <b-button variant=\"secondary\" id=\"locate\" @click=\"getLocate()\" @change=\"checkInput\">{{ $t('m.lots.b_locate') }}</b-button>\n                        </b-input-group-append>\n                    </b-input-group>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.common.address_des') }}</label>\n                    <b-form-input type=\"text\" v-model=\"parkingDes\" maxlength=\"200\"></b-form-input>\n                </b-form-group>\n            </b-col>\n        </b-row>\n        <p class=\"draw-tip\">{{ $t('m.lots.add_lot_p') }}</p>\n        <div class=\"draw-tip\">{{ $t('m.map.double_tip') }}</div>\n        <div class=\"drawbutton left-button\" @click=\"drawPolygon()\">\n            &nbsp;{{ drawButton }}&nbsp;\n        </div>\n        <div class=\"map-btn-group\">\n            <ul>\n                <li @click=\"changeMapType('default')\">{{ $t('m.map.map') }} |</li>\n                <li @click=\"changeMapType('sate')\">&nbsp;{{ $t('m.map.satellite') }}</li>\n            </ul>\n        </div>\n        <div id=\"map-canvas\" class=\"map-modal-custom\">\n        </div>\n\n        <model\n                :show=\"show\"\n                :title=\"$t('m.tip.warn')\"\n                :content=\"content\"\n                :buttonText=\"btnGroup\"\n                @closeRemindBox=\"hideTip\"\n        ></model>\n\n        <b-row class=\"text-center\">\n            <b-col sm=\"12\" class=\"text-center\">\n                <b-button class=\"btn btn-primary submit btn-syl\" @click=\"submitData()\" :disabled=\"disable\">{{ $t('m.common.b_save') }}</b-button>\n            </b-col>\n        </b-row>\n    </div>\n</template>\n\n<script>\n    import httpClient from \"@/utils/httpclient\";\n    import { wgs84ToGcjo2, gcj02towgs84 } from \"@/utils/coordtransform\";\n    import AMap from 'AMap';\n    import model from \"./model\";\n    import { findIndex } from \"@/utils/db\";\n    export default {\n        name: 'drawMap',\n        props: ['data'],\n        components: {\n            model,\n        },\n        watch: {\n            data(newV){\n                this.parkingName = newV.parkingName;\n                this.address = newV.address;\n                this.areaCoord = newV.areaCoordinate;\n                this.centerCoordinate = newV.centerCoordinate;\n                this.user = newV.parkingContactName;\n                this.phone = newV.parkingContactPhone;\n                this.parkingDes = newV.parkingAddressDesc;\n                this.getCityList(newV);\n                this.initEdit()\n            },\n            parkingName(newV) {\n                this.parkingName = this.trim(newV);\n                this.checkInput();\n            },\n            address(newV) {\n                this.address = this.trim(newV);\n                this.checkInput();\n            }\n        },\n        mounted() {\n            if (!this.$route.params.id) {\n                this.getCityList();\n                this.initialize()\n            }\n            // this.initEdit()\n        },\n        data() {\n            return {\n                list: [],\n                country: '',\n                state: '',\n                city: '',\n                area: '',\n                user: '',\n                parkingDes: \"\",\n                phone: '',\n                disable: true,\n                mapObj: null,\n                infoWindow: null,\n                geocoders: null,\n                drawManager: null,\n                polygonCompete: [],\n                locations: [],\n                parkingName: '',\n                centerCoordinate: null,\n                address: '',\n                show: false,\n                content: \"\",\n                btnGroup: {\n                    btnSecond: this.$t('m.tip.b_ok')\n                },\n                areaCoord: null,\n                bermudaTriangle: null,\n                isMapChanged:false,\n                drawButton: this.$t('m.map.start_draw'),\n                markers: [],\n                roadLayer: null,\n                curOperation: false,\n                safeLayer: null,\n                showMap: false\n            }\n        },\n        methods: {\n            showMapTip () {\n                this.showMap = true\n            },\n            getCityList(newV) {\n                httpClient.get(\"/api/v1/getprovicescitynew\").then((res) => {\n                    if (res.data.code == 200) {\n                        process.env.VUE_APP_ENV == 'cn' ?\n                            this.list = res.data.data.countryList.filter((item) => {\n                                return item.countryId == '248'\n                            })\n                            :\n                            this.list = res.data.data.countryList;\n                        if (this.$route.params.id && newV.parkingCountryCode && newV.parkingStateCode && newV.parkingCityCode) {\n                            let temp = findIndex(res.data.data.countryList, newV.parkingCountryCode, \"country\");\n                            this.country = temp.index + 1;\n                            temp = findIndex(temp.item.proviceList, newV.parkingStateCode, \"provice\");\n                            this.state = temp.index + 1;\n                            temp = findIndex(temp.item.cityList, newV.parkingCityCode, \"city\");\n                            this.city = temp.index + 1;\n                            if (this.GLOBAL.APP_ENV == 'cn') {\n                                temp = findIndex(temp.item.areaDTOList, newV.parkingAreaCode, \"area\");\n                                this.area = temp.index + 1;\n                            }\n                        }\n                    }\n                });\n            },\n            changeMapType(type) {\n                if (type == 'default') {\n                    this.roadLayer.hide();\n                    this.safeLayer.hide();\n                } else {\n                    this.roadLayer.show();\n                    this.safeLayer.show();\n                }\n            },\n            initEdit() {\n                this.drawButton = this.$t('m.map.redraw');\n                let temp = this.centerCoordinate.split(\" \");\n                let lnglat = wgs84ToGcjo2(temp[0], temp[1]);\n                this.mapObj = new AMap.Map('map-canvas', {\n                    center: lnglat,\n                    zoom: 17\n                });\n                this.safeLayer = new AMap.TileLayer.Satellite({\n                });\n                this.roadLayer = new AMap.TileLayer.RoadNet({\n                });\n                this.mapObj.add(this.roadLayer);\n                this.mapObj.add(this.safeLayer);\n                // this.mapObj.add(this.roadLayer);\n                this.safeLayer.hide();\n                this.roadLayer.hide();\n                let area2 = [];\n                this.areaCoord.map(function (item) {\n                    let temp = item.split(\",\");\n                    area2.push(wgs84ToGcjo2(Number(temp[0]), Number(temp[1]) ))\n                });\n                this.initPolygon(area2);\n\n            },\n            initPolygon(area2) {\n                this.polygonCompete = new AMap.Polygon({\n                    path: area2,\n                    strokeColor: '#FF0000',\n                    strokeOpacity: 0.8,\n                    strokeWeight: 2,\n                    fillColor: '#FF0000',\n                    fillOpacity: 0.35\n                });\n                this.mapObj.add(this.polygonCompete);\n            },\n            drawPolygon() {\n                this.checkInput();\n                if (window.mouseTool) {\n                    this.mapObj.remove(this.polygonCompete);\n                    this.polygonCompete = [];\n                    window.mouseTool.close(true);\n                }\n                window.mouseTool = new AMap.MouseTool(this.mapObj);\n                window.mouseTool.polygon({\n                    strokeColor: \"#FF0000\",\n                    strokeOpacity: 0.8,\n                    strokeWeight: 2,\n                    fillColor: \"#FF0000\",\n                    fillOpacity: 0.35,\n                    editable: true,\n                });\n                window.mouseTool.on('draw', (event) => {\n                    // this.polygonCompete.push(event.obj);\n                    this.drawButton = this.$t('m.map.redraw');\n\n                    let array = event.obj.getPath();\n                    this.showLonLat(array);\n                    window.mouseTool.close(true);\n                })\n            },\n            showLonLat(arry) {\n                let locations = [];\n                let outChina = false;\n                arry.map(item => {\n                    if (gcj02towgs84(item.lng, item.lat).lng) {\n                        locations.push(gcj02towgs84(item.lng, item.lat));\n                    } else {\n                        outChina = true;\n                    }\n                });\n                if (outChina) {\n                    this.content = this.$t(\"m.map.out_china\");\n                    this.show = true;\n                    return\n                }\n                locations[arry.length] = locations[0];\n                this.initPolygon(arry);\n                this.areaCoord = locations;\n                httpClient.post('/api/v1/lot/isRepeated', {\n                    parkingName: this.parkingName,\n                    address: this.address,\n                    areaCoordinate: locations,\n                    id: this.$route.params.id,\n                    lotType: 1\n                }).then(response => {\n                    if (response.data.data != null) {\n                        this.isMapChanged = true;\n                        this.showTip(response.data.data)\n                    } else {\n                        this.checkInput();\n                        this.isMapChanged = true;\n                    }\n                })\n            },\n            hideTip() {\n                if (this.curOperation) {\n                    this.$router.push('/inventory/lots/list')\n                }\n                this.show = false;\n                this.disable = true;\n            },\n            initialize() {\n                this.mapObj = new AMap.Map('map-canvas', {\n                    zoom: 15\n                });\n                this.roadLayer = new AMap.TileLayer.RoadNet({\n                });\n                this.safeLayer = new AMap.TileLayer.Satellite({\n                });\n                this.mapObj.add(this.roadLayer);\n                this.mapObj.add(this.safeLayer);\n                this.safeLayer.hide();\n                this.roadLayer.hide();\n            },\n            getLocate() {\n                this.checkInput();\n                if (this.address) {\n                    this.mapObj.remove(this.markers)\n                    this.geocoders = new AMap.Geocoder();\n                    this.geocoders.getLocation(this.address, (status, result) => {\n                        if (status === 'complete' && result.geocodes.length) {\n                            this.markers = new AMap.Marker({\n                                position: result.geocodes[0].location,\n                                icon: new AMap.Icon({\n                                    image: \"https://cdn2.shopify.com/s/files/1/0703/1149/files/Location_03580bd1-f466-4803-a69e-720a098b08a5.svg?828688\",\n                                    size: new AMap.Size(60, 60),\n                                    imageSize: new AMap.Size(20,30),\n                                })\n                            });\n                            this.mapObj.add(this.markers);\n                            this.mapObj.setFitView(this.markers);\n                        }\n                    })\n                }\n            },\n            showTip(data) {\n                this.show = true;\n                this.content = this.$t('m.map.warn_repeat', {data: data});\n            },\n            trim(str){\n                return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n            },\n            checkInput() {\n                if (!this.parkingName || !this.user || !this.phone || !this.areaCoord || this.areaCoord.length == 0 || !this.address || !this.country || !this.state || !this.city) {\n                    this.disable = true;\n                    return;\n                }\n                this.disable = false;\n            },\n            submitData() {\n                this.checkInput();\n                let link='';\n                if(!this.data){\n                    link = '/api/v1/lot/insert'\n                }else{\n                    link = '/api/v1/lot/update'\n                }\n                if (!this.isMapChanged && this.areaCoord) {\n                    let data = this.areaCoord.map(item => {\n                        return {\n                            lng: item.split(\",\")[0],\n                            lat: item.split(\",\")[1]\n                        }\n                    });\n                    this.areaCoord = data;\n                }\n                httpClient.post(link, {\n                    parkingName: this.parkingName,\n                    address: this.address,\n                    areaCoordinate: this.areaCoord,\n                    id: this.$route.params.id,\n                    parkingAddressDesc: this.parkingDes,\n                    parkingContactName: this.user,\n                    parkingContactPhone: this.phone,\n                    parkingCountryCode: this.list[this.country - 1].countryId,\n                    parkingStateCode: this.list[this.country - 1]['proviceList'][this.state - 1].provicesId,\n                    parkingCityCode: this.list[this.country - 1]['proviceList'][this.state - 1]['cityList'][this.city - 1].cityId,\n                    parkingAreaCode: this.GLOBAL.APP_ENV == 'cn' ? this.list[this.country - 1]['proviceList'][this.state - 1]['cityList'][this.city - 1]['areaDTOList'][this.area - 1].areaId : ''\n                }).then(response => {\n                    if (response.data.code == 200) {\n                        this.curOperation = true;\n                        if (!this.data) {\n                            this.content = this.$t('m.tip.save_succ');\n                        } else {\n                            this.content = this.$t('m.tip.edit_succ');\n                        }\n                        this.show = true;\n                    } else {\n                        this.show = true;\n                        this.content = `Lot Name: ${response.data.data} Existed.`;\n                    }\n                })\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .draw-map {\n        .draw-tip {\n            margin-bottom: 2px;\n            color:#f86c6b;\n        }\n        .map-btn-group {\n            position: absolute;\n            margin-top: 10px;\n            z-index: 1;\n            margin-left: 20px;\n            ul {\n                color: black;\n                padding: 0 20px;\n                height: 40px;\n                line-height: 40px;\n                background: #ffffff;\n                font-size: 18px;\n                li {\n                    cursor: pointer;\n                    display: inline-block;\n                }\n            }\n        }\n        #map-canvas {\n            height: 40vh;\n        }\n        .submit {\n            background-color: #20a8d8!important;\n            border-color: #20a8d8!important;\n        }\n        .drawbutton {\n            height: 40px;\n            background: #ffffff;\n            color: black;\n            text-align: center;\n            line-height: 40px;\n            position: absolute;\n            z-index: 1;\n\n            margin-top: 10px;\n            cursor: pointer;\n        }\n        .left-button {\n            left: 45%;\n        }\n        .btn-syl {\n            margin-top: 12px;\n            color: #ffffff;\n        }\n    }\n    .map-modal-custom {\n        position: relative;\n        .show-map .modal-dialog {\n            height: 600px;\n            max-width: 80%;\n        }\n        .gaode-fullscreen{\n            background: #ffffff; width: 30px;height: 30px;text-align: center;line-height: 30px;\n            position: absolute;\n            z-index: 1;\n            right: 6px;\n            top: 6px;\n        }\n        .gm-style .gm-style-iw-d {\n            max-width: 280px!important;\n            img {\n                width: 100%;\n            }\n        }\n    }\n</style>\n"],"sourceRoot":"src/components"}]}