{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js!/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/mainI.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/mainI.vue","mtime":1560770592000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport _getIterator from \"/Users/nonda/nonda/nonda-saas-web/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport _Promise from \"/Users/nonda/nonda/nonda-saas-web/node_modules/@babel/runtime-corejs2/core-js/promise\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport httpclient from '@/utils/httpclient';\nimport echarts from 'echarts';\nimport { getDateString, getYMDFormart } from \"@/utils/date\";\nexport default {\n  name: \"mainI\",\n  data: function data() {\n    return {\n      weekly: \"week\",\n      daily: \"daily\",\n      dailyDate: \"\",\n      salePersonDate: \"\",\n      card: {\n        \"inventory\": {\n          img: require('@assets/pages-img/inven-icon.svg'),\n          type: \"inventory\",\n          class: \"bg-primary\",\n          num: \"\",\n          filters: null,\n          key: '',\n          value: ''\n        },\n        \"offLots\": {\n          img: require('@assets/pages-img/off-lot.svg'),\n          type: \"off lot\",\n          class: \"bg-info\",\n          num: \"\",\n          filters: null,\n          key: '',\n          value: ''\n        },\n        \"extremelyLowPower\": {\n          img: require('@assets/pages-img/low-bat.svg'),\n          type: \"low battery\",\n          class: \"bg-warning\",\n          num: \"\",\n          filters: null,\n          key: '',\n          value: ''\n        },\n        \"offLine\": {\n          img: require('@assets/pages-img/off-line.svg'),\n          type: \"offline\",\n          class: \"bg-danger\",\n          num: \"\",\n          filters: null,\n          key: '',\n          value: ''\n        }\n      },\n      option1: {\n        legend: {\n          y: \"20px\",\n          textStyle: {\n            color: [\"#fff\"]\n          },\n          data: ['11.7V or lower', '11.7V - 12.1V', 'Above 12.1V']\n        },\n        series: [{\n          type: 'pie',\n          label: {\n            show: false\n          },\n          labelLine: {\n            show: false\n          },\n          radius: '55%',\n          center: ['50%', '60%'],\n          data: [{\n            value: 0,\n            name: '11.7V or lower'\n          }, {\n            value: 0,\n            name: '11.7V - 12.1V'\n          }, {\n            value: 0,\n            name: 'Above 12.1V'\n          }],\n          color: ['rgb(255,99,132)', 'rgb(255, 205, 86)', 'rgb(54, 162, 235)']\n        }]\n      },\n      option2: {\n        legend: {\n          y: \"20px\",\n          textStyle: {\n            color: [\"#fff\"]\n          },\n          data: ['On Lot', 'Off Lot']\n        },\n        series: [{\n          label: {\n            show: false\n          },\n          labelLine: {\n            show: false\n          },\n          type: 'pie',\n          radius: '55%',\n          center: ['50%', '60%'],\n          data: [{\n            value: 0,\n            name: 'On Lot'\n          }, {\n            value: 0,\n            name: 'Off Lot'\n          }],\n          color: ['rgb(54, 162, 235)', 'rgb(255,99,132)']\n        }]\n      },\n      showLog: false,\n      lastDate: null,\n      color: ['99,194,222,0.8', '248,108,107,0.8', '255,193,5,0.8', '32,168,216,0.8', '77,189,116,0.8'],\n      deaLoction: {\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: [],\n          textStyle: {\n            color: [\"#fff\"]\n          }\n        },\n        grid: {\n          left: '1%',\n          right: '1%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: \"black\"\n            }\n          },\n          data: [],\n          axisLine: {\n            lineStyle: {\n              color: \"#73818f\"\n            }\n          }\n        },\n        yAxis: {\n          type: 'value',\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: \"black\"\n            }\n          },\n          axisLine: {\n            lineStyle: {\n              color: \"#73818f\"\n            }\n          }\n        },\n        series: []\n      },\n      saleOption: {\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: [{\n            name: \"Average Time(min)\",\n            icon: \"roundRect\"\n          }, {\n            name: \"Average Number\",\n            icon: \"roundRect\"\n          }],\n          textStyle: {\n            color: [\"#fff\"]\n          }\n        },\n        grid: {\n          left: '1%',\n          right: '1%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: \"black\"\n            }\n          },\n          data: [],\n          axisLine: {\n            lineStyle: {\n              color: \"#73818f\"\n            }\n          }\n        },\n        yAxis: {\n          type: 'value',\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: \"black\"\n            }\n          },\n          axisLine: {\n            lineStyle: {\n              color: \"#73818f\"\n            }\n          }\n        },\n        series: [{\n          name: 'Average Time(min)',\n          type: 'line',\n          stack: '总量',\n          smooth: true,\n          data: [],\n          color: 'rgba(99,194,222, 0.8)',\n          backgroundColor: \"#73818f\"\n        }, {\n          name: 'Average Number',\n          type: 'line',\n          stack: '总量',\n          smooth: true,\n          data: [],\n          color: 'rgba(248,108,107, 0.8)'\n        }]\n      },\n      tableFields: {\n        user: {\n          label: \"User\",\n          class: \"text-left\"\n        },\n        action: {\n          label: \"Action\",\n          class: \"text-left\"\n        },\n        vehicle: {\n          label: \"Vehicle\",\n          class: \"text-left\"\n        },\n        time: {\n          label: \"TimeStamp\",\n          class: \"text-left\"\n        }\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.initData();\n  },\n  methods: {\n    initData: function initData() {\n      var _this = this;\n\n      new _Promise(function (resolve, reject) {\n        httpclient.get(\"/api/v1/index\", {}).then(function (response) {\n          resolve(response.data.data);\n        }).catch(function (err) {\n          reject(err);\n          alert(err);\n        });\n      }).then(function (data) {\n        httpclient.get(\"/api/v1/vehicle/availableLogList\", {}).then(function (res) {\n          _this.filterData(data, res.data.data);\n        }).catch(function (err) {\n          alert(err);\n        });\n      }).then(function () {\n        _this.getSales(2);\n      }).then(function () {\n        _this.getDealData(1);\n      });\n    },\n    chooseDealDate: function chooseDealDate(type) {\n      this.daily = type;\n      var num = type == 'daily' ? 1 : type == 'week' ? 2 : 3;\n      this.getDealData(num);\n    },\n    getDealData: function getDealData(num) {\n      var _this2 = this;\n\n      httpclient.post(\"/api/v1/index/averageparkinglotdata\", {\n        timeType: num\n      }).then(function (res) {\n        _this2.filterDealData(res.data.data);\n      }).catch(function (err) {\n        alert(err);\n      });\n    },\n    filterDealData: function filterDealData(data) {\n      var _this3 = this;\n\n      this.deaLoction.series = [];\n      this.deaLoction.xAxis.data = [];\n      this.deaLoction.legend.data = [];\n      var firstTime = getYMDFormart(data[0].averageDrivingTime2[data[0].averageDrivingTime2.length - 1].data);\n      var lastTime = getYMDFormart(data[0].averageDrivingTime2[0].data);\n      this.dailyDate = \"\".concat(firstTime, \" - \").concat(lastTime);\n      data.map(function (item, key) {\n        _this3.deaLoction.legend.data.push({\n          name: item.parkingName,\n          icon: \"roundRect\"\n        });\n\n        var seData = [];\n        item.averageDrivingTime.reverse().map(function (it, k) {\n          seData.push(it.value);\n          key == 0 ? _this3.deaLoction.xAxis.data.push(it.data) : null;\n        });\n\n        _this3.deaLoction.series.push({\n          name: item.parkingName,\n          type: 'line',\n          smooth: true,\n          data: seData,\n          color: \"rgba(\".concat(_this3.color[key], \")\"),\n          backgroundColor: \"#73818f\"\n        });\n      });\n      echarts.init(document.getElementById(\"deaLocation\")).setOption(this.deaLoction);\n    },\n    filterSalesData: function filterSalesData(data) {\n      this.saleOption.xAxis.data = [];\n      this.saleOption.series[0].data = [];\n      this.saleOption.series[1].data = [];\n      var firstTime = getYMDFormart(data[data.length - 1].standardStartDate);\n      var lastTime = getYMDFormart(data[0].standardStartDate);\n      this.salePersonDate = \"\".concat(firstTime, \" - \").concat(lastTime);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(data.reverse()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          this.saleOption.xAxis.data.push(item.startDate);\n          this.saleOption.series[0].data.push(item.averageDrivingTime);\n          this.saleOption.series[1].data.push(item.averageDrivingNumber);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      echarts.init(document.getElementById(\"sale\")).setOption(this.saleOption);\n    },\n    getSales: function getSales(num) {\n      var _this4 = this;\n\n      httpclient.post(\"/api/v1/index/averagesalesdata\", {\n        timeType: num\n      }).then(function (res) {\n        _this4.filterSalesData(res.data.data);\n      }).catch(function (err) {\n        alert(err);\n      });\n    },\n    chooseSaleDate: function chooseSaleDate(type) {\n      this.weekly = type;\n      var num = type == 'month' ? 3 : 2;\n      this.getSales(num);\n    },\n    formatTime: function formatTime(val) {\n      //格式化时间（06/17/2019 19:08）\n      var mon = val.getMonth() + 1 > 9 ? val.getMonth() + 1 : '0' + (val.getMonth() + 1);\n      var data = val.getDate() > 9 ? val.getDate() : '0' + val.getDate();\n      var hour = val.getHours() > 9 ? val.getHours() : '0' + val.getHours();\n      var minute = val.getMinutes() > 9 ? val.getMinutes() : '0' + val.getMinutes();\n      return mon + '/' + data + '/' + val.getFullYear() + '  ' + hour + ':' + minute;\n    },\n    filterData: function filterData(data, loglist) {\n      this.showLog = loglist.map(function (item) {\n        return {\n          user: item.firstName + \" \" + item.lastName,\n          action: item.available == '1' ? 'has just checked in' : 'has just checked out',\n          vehicle: \"\".concat(item.year ? item.year : 'N/A', \" \").concat(item.make ? item.make : 'N/A', \" \").concat(item.model ? item.model : 'N/A'),\n          time: getDateString(Number(item.createTime)),\n          vehicleId: item.vehicleId,\n          userId: item.checkUserId\n        };\n      });\n      this.lastDate = this.formatTime(new Date());\n      var batHealth = [\"extremelyLowPower\", \"lowPower\", \"commonPower\"];\n      var inventory = [\"inLots\", \"offLots\"];\n\n      for (var item in this.card) {\n        this.card[item][\"num\"] = data[item] ? data[item][\"num\"] : \"\";\n        this.card[item][\"filters\"] = data[item] ? data[item][\"filters\"] : \"\";\n        this.card[item][\"key\"] = data[item][\"filters\"] ? data[item][\"filters\"][0].key : \"\";\n        this.card[item][\"value\"] = data[item][\"filters\"] ? data[item][\"filters\"][0].value[0] : \"\";\n      }\n\n      for (var i in batHealth) {\n        this.option1.series[0].data[i].value = data[batHealth[i]][\"num\"];\n      }\n\n      for (var _i in inventory) {\n        this.option2.series[0].data[_i].value = data[inventory[_i]][\"num\"];\n        console.log(data[inventory[_i]][\"num\"]);\n      }\n\n      echarts.init(document.getElementById(\"battery-health\")).setOption(this.option1);\n      echarts.init(document.getElementById(\"inventory-location\")).setOption(this.option2);\n    }\n  }\n};",null]}