{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js!/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/src/utils/coordtransform.js","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/utils/coordtransform.js","mtime":1565693971000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _getIterator from \"/Users/nonda/nonda/nonda-saas-web/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nvar PI = 3.1415926535897932384626;\nvar ee = 0.00669342162296594323;\nvar a = 6378245.0;\n\nvar transformlat = function transformlat(lng, lat) {\n  lat = +lat;\n  lng = +lng;\n  var ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.sqrt(Math.abs(lng));\n  ret += (20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0 / 3.0;\n  ret += (20.0 * Math.sin(lat * PI) + 40.0 * Math.sin(lat / 3.0 * PI)) * 2.0 / 3.0;\n  ret += (160.0 * Math.sin(lat / 12.0 * PI) + 320 * Math.sin(lat * PI / 30.0)) * 2.0 / 3.0;\n  return ret;\n};\n\nvar out_of_china = function out_of_china(lng, lat) {\n  lat = +lat;\n  lng = +lng; // 纬度3.86~53.55,经度73.66~135.05\n\n  return !(lng > 73.66 && lng < 135.05 && lat > 3.86 && lat < 53.55);\n};\n\nvar transformlng = function transformlng(lng, lat) {\n  lat = +lat;\n  lng = +lng;\n  var ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.sqrt(Math.abs(lng));\n  ret += (20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0 / 3.0;\n  ret += (20.0 * Math.sin(lng * PI) + 40.0 * Math.sin(lng / 3.0 * PI)) * 2.0 / 3.0;\n  ret += (150.0 * Math.sin(lng / 12.0 * PI) + 300.0 * Math.sin(lng / 30.0 * PI)) * 2.0 / 3.0;\n  return ret;\n}; // 地球坐标转全球坐标\n\n\nexport function wgs84ToGcjo2(lng, lat) {\n  lat = +lat;\n  lng = +lng;\n\n  if (out_of_china(lng, lat)) {\n    return [lng, lat];\n  } else {\n    var dlat = transformlat(lng - 105.0, lat - 35.0);\n    var dlng = transformlng(lng - 105.0, lat - 35.0);\n    var radlat = lat / 180.0 * PI;\n    var magic = Math.sin(radlat);\n    magic = 1 - ee * magic * magic;\n    var sqrtmagic = Math.sqrt(magic);\n    dlat = dlat * 180.0 / (a * (1 - ee) / (magic * sqrtmagic) * PI);\n    dlng = dlng * 180.0 / (a / sqrtmagic * Math.cos(radlat) * PI);\n    var mglat = lat + dlat;\n    var mglng = lng + dlng;\n    return [mglng, mglat];\n  }\n} // 火星坐标转地球坐标\n\nexport function gcj02towgs84(lng, lat) {\n  lat = +lat;\n  lng = +lng;\n\n  if (out_of_china(lng, lat)) {\n    return {};\n  } else {\n    var dlat = transformlat(lng - 105.0, lat - 35.0);\n    var dlng = transformlng(lng - 105.0, lat - 35.0);\n    var radlat = lat / 180.0 * PI;\n    var magic = Math.sin(radlat);\n    magic = 1 - ee * magic * magic;\n    var sqrtmagic = Math.sqrt(magic);\n    dlat = dlat * 180.0 / (a * (1 - ee) / (magic * sqrtmagic) * PI);\n    dlng = dlng * 180.0 / (a / sqrtmagic * Math.cos(radlat) * PI);\n    var mglat = lat + dlat;\n    var mglng = lng + dlng;\n    return {\n      \"lng\": lng * 2 - mglng,\n      \"lat\": lat * 2 - mglat\n    };\n  }\n} // 计算多点中心坐标点\n\nexport function calCenter(lnglatarr) {\n  var total = lnglatarr.length;\n  var X = 0,\n      Y = 0,\n      Z = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(lnglatarr), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var lnglat = _step.value;\n      var lng = lnglat.lng * Math.PI / 180;\n      var lat = lnglat.lat * Math.PI / 180;\n      var x, y, z;\n      x = Math.cos(lat) * Math.cos(lng);\n      y = Math.cos(lat) * Math.sin(lng);\n      z = Math.sin(lat);\n      X += x;\n      Y += y;\n      Z += z;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  X = X / total;\n  Y = Y / total;\n  Z = Z / total;\n  var Lng = Math.atan2(Y, X);\n  var Hyp = Math.sqrt(X * X + Y * Y);\n  var Lat = Math.atan2(Z, Hyp);\n  return [Lng, Lat];\n}",null]}