{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/testDrive/testReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/testDrive/testReport.vue","mtime":1571899859000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport echarts from 'echarts';\nimport httpClient from \"@/utils/httpclient\";\nimport polygonMap from \"@/components/tripMap\";\nimport { calAge as _calAge, calDriveAge as _calDriveAge, getDateString2 as _getDateString2, timeInspect as _timeInspect, getDateString3, getDateString as _getDateString } from \"@/utils/date\";\nexport default {\n  name: \"testReport\",\n  inject: ['reload'],\n  components: {\n    polygonMap: polygonMap\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      userDetail: {},\n      driveAge: \"\",\n      driveInfo: {},\n      area: null,\n      surveyList: [{\n        id: \"1\",\n        name: \"1. 您觉得外观设计如何？\",\n        result: ''\n      }, {\n        id: \"2\",\n        name: \"2. 您觉得内饰设计如何？\",\n        result: ''\n      }, {\n        id: \"3\",\n        name: \"3. 您觉得安全性能如何？\",\n        result: ''\n      }, {\n        id: \"4\",\n        name: \"4. 您觉得动力性能如何？\",\n        result: ''\n      }, {\n        id: \"5\",\n        name: \"5. 您觉得加速表现如何？\",\n        result: ''\n      }, {\n        id: \"6\",\n        name: \"6. 您觉得操控性能如何？\",\n        result: ''\n      }, {\n        id: \"7\",\n        name: \"7. 您觉得制动表现如何？\",\n        result: ''\n      }, {\n        id: \"8\",\n        name: \"8. 您觉得舒适性如何？\",\n        result: ''\n      }, {\n        id: \"9\",\n        name: \"9. 您觉得本次试驾流程安排如何？\",\n        result: ''\n      }, {\n        id: \"10\",\n        name: \"10. 您近期的购车计划如何？\",\n        result: ''\n      }, {\n        id: \"11\",\n        name: \"11. 您通过什么方式了解本次活动？\",\n        result: ''\n      }, {\n        id: \"12\",\n        name: \"12. 通过此次试驾，您准备？\",\n        result: ''\n      }, {\n        id: \"13\",\n        name: \"13. 您还有其他问题或建议吗？（选填）\",\n        result: ''\n      }],\n      baseData: null,\n      emotionStatus: {\n        \"0\": \"--\",\n        \"10\": this.$t('m.report.emotion10'),\n        \"20\": this.$t('m.report.emotion20'),\n        \"30\": this.$t('m.report.emotion30')\n      },\n      emotion: {\n        title: {\n          show: false,\n          textStyle: {\n            color: 'grey'\n          }\n        },\n        dataZoom: [{\n          orient: \"horizontal\",\n          show: true,\n          start: 0,\n          end: 100\n        }],\n        tooltip: {\n          trigger: 'axis',\n          formatter: function formatter(data) {\n            return data[0].axisValue + \"<br />\" + _this.emotionStatus[\"0\"];\n          }\n        },\n        xAxis: {\n          show: true,\n          data: []\n        },\n        yAxis: [{\n          type: 'value',\n          show: true,\n          name: '',\n          min: 10,\n          max: 30,\n          interval: 10\n        }, {\n          axisTick: {\n            show: false\n          }\n        }],\n        series: {\n          yAxisIndex: 0,\n          type: \"line\",\n          smooth: true,\n          lineStyle: {\n            width: 0,\n            color: 'rgba(0, 0, 0, 0)'\n          },\n          itemStyle: {\n            normal: {\n              opacity: 0,\n              label: {\n                show: false\n              }\n            }\n          },\n          data: [],\n          animation: true,\n          symbol: \"none\",\n          markArea: {\n            data: []\n          },\n          markLine: {\n            symbol: 'none',\n            data: []\n          },\n          markPoint: {\n            symbol: 'circle',\n            symbolSize: 14,\n            itemStyle: {\n              normal: {\n                color: 'red',\n                opacity: 0.8,\n                label: {\n                  show: false\n                }\n              }\n            },\n            data: []\n          }\n        },\n        grid: {\n          x: 24,\n          y: 40,\n          x2: 20,\n          y2: 80\n        }\n      },\n      emotionData: {},\n      emotionTime: {},\n      speed: {\n        title: {\n          show: false,\n          textStyle: {\n            color: 'grey'\n          }\n        },\n        dataZoom: [{\n          orient: \"horizontal\",\n          show: true,\n          start: 0,\n          end: 100\n        }],\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          show: true,\n          data: []\n        },\n        yAxis: {\n          type: 'value',\n          show: true,\n          name: '',\n          min: 0,\n          max: 100,\n          interval: 50\n        },\n        series: {\n          yAxisIndex: 0,\n          type: \"line\",\n          smooth: true,\n          itemStyle: {\n            normal: {\n              opacity: 0,\n              color: \"#3b5998\",\n              label: {\n                show: false\n              }\n            }\n          },\n          data: [],\n          animation: true,\n          symbol: \"none\",\n          name: this.$t('m.report.speed'),\n          markArea: {\n            data: []\n          },\n          markLine: {\n            symbol: 'none',\n            data: []\n          }\n        },\n        grid: {\n          x: 30,\n          y: 40,\n          x2: 20,\n          y2: 80\n        }\n      },\n      speedTime: {\n        high: {},\n        low: {}\n      },\n      accele: {\n        title: {\n          show: false,\n          textStyle: {\n            color: 'grey'\n          }\n        },\n        dataZoom: [{\n          orient: \"horizontal\",\n          show: true,\n          start: 0,\n          end: 100\n        }],\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          show: true,\n          data: []\n        },\n        yAxis: {\n          type: 'value',\n          show: true,\n          name: '',\n          min: -10,\n          max: 10,\n          interval: 10\n        },\n        series: {\n          yAxisIndex: 0,\n          type: \"line\",\n          smooth: true,\n          itemStyle: {\n            normal: {\n              opacity: 0,\n              color: \"#3b5998\",\n              label: {\n                show: false\n              }\n            }\n          },\n          data: [],\n          animation: true,\n          symbol: \"none\",\n          name: this.$t('m.report.accele'),\n          markArea: {\n            data: []\n          },\n          markLine: {\n            symbol: 'none',\n            data: []\n          }\n        },\n        grid: {\n          x: 30,\n          y: 40,\n          x2: 20,\n          y2: 80\n        }\n      },\n      accleTime: {\n        high: {},\n        low: {}\n      },\n      turns: {\n        title: {\n          show: false,\n          textStyle: {\n            color: 'grey'\n          }\n        },\n        dataZoom: [{\n          orient: \"horizontal\",\n          show: true,\n          start: 0,\n          end: 100\n        }],\n        tooltip: {\n          trigger: 'axis',\n          formatter: function formatter(data) {\n            return data[0].axisValue + \"<br />\" + \"\".concat(data[0].data > 0 ? _this.$t('m.report.leftStatus') : _this.$t('m.report.rightStatus'));\n          }\n        },\n        xAxis: {\n          show: true,\n          data: []\n        },\n        yAxis: {\n          type: 'value',\n          show: true,\n          name: '',\n          min: -2,\n          max: 2,\n          interval: 2\n        },\n        series: {\n          yAxisIndex: 0,\n          type: \"line\",\n          smooth: true,\n          itemStyle: {\n            normal: {\n              opacity: 0,\n              color: \"#3b5998\",\n              lineStyle: {\n                width: 1\n              },\n              label: {\n                show: false\n              }\n            }\n          },\n          data: [],\n          animation: true,\n          symbol: \"none\",\n          name: this.$t('m.report.turnCard'),\n          markArea: {\n            data: []\n          },\n          markLine: {\n            symbol: 'none',\n            data: []\n          }\n        },\n        grid: {\n          x: 30,\n          y: 40,\n          x2: 20,\n          y2: 80\n        }\n      },\n      turnTime: {},\n      bumpTime: {},\n      pong: {\n        title: {\n          show: false,\n          textStyle: {\n            color: 'grey'\n          }\n        },\n        dataZoom: [{\n          orient: \"horizontal\",\n          show: true,\n          start: 0,\n          end: 100\n        }],\n        tooltip: {\n          trigger: 'axis',\n          formatter: function formatter(data) {\n            return data[0].axisValue + \"<br />\" + _this.emotionStatus[\"0\"];\n          }\n        },\n        xAxis: {\n          show: true,\n          data: []\n        },\n        yAxis: [{\n          type: 'value',\n          show: true,\n          name: '',\n          min: 10,\n          max: 30,\n          interval: 10\n        }, {\n          axisTick: {\n            show: false\n          }\n        }],\n        series: {\n          yAxisIndex: 0,\n          type: \"line\",\n          smooth: true,\n          lineStyle: {\n            width: 0,\n            color: 'rgba(0, 0, 0, 0)'\n          },\n          itemStyle: {\n            normal: {\n              opacity: 0,\n              color: \"#ccc\",\n              label: {\n                show: false\n              }\n            }\n          },\n          data: [],\n          animation: true,\n          symbol: \"none\",\n          name: this.$t('m.report.break'),\n          markArea: {\n            data: []\n          },\n          markLine: {\n            symbol: 'none',\n            data: []\n          },\n          markPoint: {\n            symbol: 'circle',\n            symbolSize: 14,\n            itemStyle: {\n              normal: {\n                color: 'red',\n                opacity: 0.8,\n                label: {\n                  show: false\n                }\n              }\n            },\n            data: []\n          }\n        },\n        grid: {\n          x: 24,\n          y: 40,\n          x2: 20,\n          y2: 80\n        }\n      },\n      wholeEmotion: {},\n      finishTime: null,\n      emotionEvent: {\n        \"0\": this.$t('m.report.laDoor'),\n        \"1\": this.$t('m.report.raDoor'),\n        \"2\": this.$t('m.report.lbDoor'),\n        \"3\": this.$t('m.report.rbDoor'),\n        \"6\": this.$t('m.report.trunk')\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    // coordinatetype 1,WGS84全球坐标系  2,GCJ02火星坐标系  3,BD09百度坐标系\n    httpClient.get('/api/v1/clouddrive/report/detail?coordinatetype=1&orderid=' + this.$route.params.id).then(function (response) {\n      if (response.data.code == 200) {\n        _this2.userDetail = response.data.data.userDetailDTO ? response.data.data.userDetailDTO : {};\n        _this2.driveInfo = response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO;\n        _this2.area = {\n          area: response.data.data.cloudDriveReportDTO.tracesDataDTOList,\n          center: response.data.data.cloudDriveReportDTO.tracesDataDTOList[0]\n        };\n        var time = response.data.data.userDetailDTO ? _this2.calDriveAge(response.data.data.userDetailDTO.driveLicenseInitDate) : 0;\n        _this2.driveAge = time.year + _this2.$t('m.report.year') + time.month + _this2.$t('m.report.month');\n\n        _this2.getEmotion(response.data.data.cloudDriveReportDTO.emotionList, response.data.data.cloudDriveReportDTO.accelerationDataList, response.data.data.cloudDriveReportDTO.alarmPushDTOList ? response.data.data.cloudDriveReportDTO.alarmPushDTOList.events : []);\n\n        _this2.baseData = response.data.data.cloudDriveReportDTO.accelerationDataList;\n        _this2.emotionData = response.data.data.cloudDriveReportDTO.alarmPushDTOList;\n        _this2.emotionTime = response.data.data.cloudDriveReportDTO.startUp;\n        _this2.speedTime = {\n          \"high\": response.data.data.cloudDriveReportDTO.highSpeed,\n          \"low\": response.data.data.cloudDriveReportDTO.lowSpeed\n        };\n        _this2.accleTime = {\n          \"high\": response.data.data.cloudDriveReportDTO.accelerate,\n          \"low\": response.data.data.cloudDriveReportDTO.brake\n        };\n        _this2.turnTime = response.data.data.cloudDriveReportDTO.swerve;\n        _this2.bumpTime = response.data.data.cloudDriveReportDTO.bumpy;\n        _this2.wholeEmotion = response.data.data.cloudDriveReportDTO.wholeEmotionDTO;\n        _this2.finishTime = response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO.reportFinishTime;\n\n        _this2.getSpeed(response.data.data.cloudDriveReportDTO.emotionList, response.data.data.cloudDriveReportDTO.speedList);\n\n        _this2.getAcceleration(response.data.data.cloudDriveReportDTO.emotionList, response.data.data.cloudDriveReportDTO.accelerationDataList, response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO.maxAcceleration);\n\n        _this2.getTurn(response.data.data.cloudDriveReportDTO.emotionList, response.data.data.cloudDriveReportDTO.turnDataDTOS); //碰撞点为0， 则不现实整个模块\n\n\n        response.data.data.cloudDriveReportDTO.bumpy && response.data.data.cloudDriveReportDTO.bumpy.durationTime && response.data.data.cloudDriveReportDTO.bumpy.durationTime != 0 ? _this2.getPong(response.data.data.cloudDriveReportDTO.emotionList, response.data.data.cloudDriveReportDTO.accelerationDataList, response.data.data.cloudDriveReportDTO.alarmPushDTOList ? response.data.data.cloudDriveReportDTO.alarmPushDTOList.bumpyEvents : []) : '';\n        response.data.data.surveyFeedbackDTO ? _this2.filterSurvey(response.data.data.surveyFeedbackDTO) : null;\n      }\n    });\n  },\n  methods: {\n    initBaseData: function initBaseData(driveData) {\n      var driveDatas = [];\n      var driveEmotion = [];\n      driveData.map(function (item) {\n        driveDatas.push(getDateString3(item.driveTime));\n        driveEmotion.push(0);\n      });\n      return {\n        driveDatas: driveDatas,\n        driveEmotion: driveEmotion\n      };\n    },\n    getDateString: function getDateString(time) {\n      return _getDateString(time);\n    },\n    getPong: function getPong(data, driveData, eventData) {\n      var eventList = [];\n      eventData.map(function (item) {\n        eventList.push({\n          xAxis: getDateString3(item.time),\n          tooltip: {\n            trigger: 'item'\n          },\n          yAxis: 20\n        });\n      });\n\n      var _this$initEmotion = this.initEmotion(data),\n          emotionList = _this$initEmotion.emotionList,\n          area = _this$initEmotion.area,\n          line = _this$initEmotion.line;\n\n      this.pong.series.markArea.data = area;\n\n      var _this$initBaseData = this.initBaseData(driveData),\n          driveDatas = _this$initBaseData.driveDatas,\n          driveEmotion = _this$initBaseData.driveEmotion;\n\n      this.pong.xAxis.data = driveDatas;\n      this.pong.series.data = emotionList;\n      this.pong.series.markLine.data = line;\n      this.pong.series.markPoint.data = eventList;\n      echarts.init(document.getElementById('pong')).setOption(this.pong);\n    },\n    getTurn: function getTurn(data, accData) {\n      var accList = [];\n      var yList = [];\n\n      var _this$defaultEmotion = this.defaultEmotion(data),\n          area = _this$defaultEmotion.area,\n          line = _this$defaultEmotion.line;\n\n      accData.map(function (item) {\n        accList.push(getDateString3(item.driveTime));\n        yList.push(item.turn);\n      });\n      this.turns.series.markArea.data = area;\n      this.turns.series.markLine.data = line;\n      this.turns.xAxis.data = accList;\n      this.turns.series.data = yList;\n      echarts.init(document.getElementById('turn')).setOption(this.turns);\n    },\n    filterTime: function filterTime(mis) {\n      return Math.ceil(mis % (1000 * 60 * 60) / (1000 * 60));\n    },\n    filterSurvey: function filterSurvey(data) {\n      this.surveyList.map(function (item) {\n        data.map(function (it) {\n          if (it.subjectId == item.id) {\n            item['result'] = it.questionnaireContent;\n          }\n        });\n      });\n    },\n    initEmotion: function initEmotion(data, type) {\n      var _this3 = this;\n\n      var emotionList = [];\n      var area = [];\n      var line = [];\n      data.map(function (item) {\n        emotionList.push(item.emotion);\n\n        if (item.emotion == 10 || item.emotion == 0) {\n          line.push([{\n            xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n            yAxis: type == 'speed' ? 50 : 20,\n            itemStyle: {\n              color: \"#fbdc7f\",\n              width: 2\n            },\n            tooltip: {\n              trigger: 'item',\n              formatter: function formatter(data) {\n                return (data.xAxis ? data.xAxis : data.data.xAxis) + \"<br />\" + _this3.emotionStatus[\"10\"];\n              }\n            }\n          }, {\n            yAxis: type == 'speed' ? 50 : 20,\n            xAxis: item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n          }]);\n        } else {\n          area.push([{\n            value: item.emotion,\n            xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n            temp: item.emotion,\n            yAxis: type == 'speed' ? item.emotion == 20 ? 50 : 0 : item.emotion == 20 ? 20 : 0,\n            itemStyle: {\n              color: item.emotion == 20 ? \"#a2dab6\" : item.emotion == 30 ? \"#f8b2b1\" : \"#fbdc7f\"\n            },\n            tooltip: {\n              trigger: 'item',\n              formatter: function formatter(data) {\n                return getDateString3(item.emotionStartTime) + \"<br />\" + _this3.emotionStatus[data.value];\n              }\n            }\n          }, {\n            tooltip: {\n              trigger: 'item',\n              formatter: function formatter(data) {\n                return data.value;\n              }\n            },\n            value: item.emotion,\n            yAxis: type == 'speed' ? item.emotion == 20 ? 100 : 50 : item.emotion == 20 ? 30 : 20,\n            xAxis: item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n          }]);\n        }\n      });\n      return {\n        emotionList: emotionList,\n        area: area,\n        line: line\n      };\n    },\n    defaultEmotion: function defaultEmotion(data, max) {\n      var emotionList = [];\n      var area = [];\n      var line = [];\n      data.map(function (item) {\n        emotionList.push(item.emotion);\n\n        if (item.emotion == 10 || item.emotion == 0) {\n          line.push([{\n            xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n            yAxis: 0,\n            itemStyle: {\n              color: \"#fbdc7f\",\n              width: 2\n            }\n          }, {\n            yAxis: 0,\n            xAxis: item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n          }]);\n        } else {\n          area.push([{\n            xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n            temp: item.emotion,\n            yAxis: max ? item.emotion == 20 ? 0 : Number('-' + max) : item.emotion == 20 ? 0 : -10,\n            itemStyle: {\n              color: item.emotion == 20 ? \"#a2dab6\" : item.emotion == 30 ? \"#f8b2b1\" : \"#fbdc7f\"\n            }\n          }, {\n            yAxis: max ? item.emotion == 20 ? max : 0 : item.emotion == 20 ? 10 : 0,\n            xAxis: item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n          }]);\n        }\n      });\n      return {\n        emotionList: emotionList,\n        area: area,\n        line: line\n      };\n    },\n    getAcceleration: function getAcceleration(data, accData, maxAcc) {\n      var _this$defaultEmotion2 = this.defaultEmotion(data, Math.ceil(maxAcc)),\n          area = _this$defaultEmotion2.area,\n          line = _this$defaultEmotion2.line;\n\n      var accList = [];\n      var yList = [];\n      accData.map(function (item) {\n        accList.push(getDateString3(item.driveTime));\n        yList.push(item.acceleration);\n      });\n      this.accele.yAxis.min = \"-\" + Math.ceil(Number(maxAcc));\n      this.accele.yAxis.max = Math.ceil(Number(maxAcc));\n      this.accele.yAxis.interval = Math.ceil(Number(maxAcc));\n      this.accele.series.markArea.data = area;\n      this.accele.series.markLine.data = line;\n      this.accele.xAxis.data = accList;\n      this.accele.series.data = yList;\n      echarts.init(document.getElementById('acceleration')).setOption(this.accele);\n    },\n    getSpeed: function getSpeed(data, speedData) {\n      var _this$initEmotion2 = this.initEmotion(data, 'speed'),\n          area = _this$initEmotion2.area,\n          line = _this$initEmotion2.line;\n\n      var speedList = [];\n      var yList = [];\n      speedData.map(function (item) {\n        speedList.push(getDateString3(item.driveTime));\n        yList.push(item.speed);\n      });\n      this.speed.series.markArea.data = area;\n      this.speed.series.markLine.data = line;\n      this.speed.xAxis.data = speedList;\n      this.speed.series.data = yList;\n      echarts.init(document.getElementById('speed')).setOption(this.speed);\n    },\n    getEmotion: function getEmotion(data, driveData, eventData) {\n      var _this4 = this;\n\n      var eventList = [];\n      eventData.map(function (item) {\n        eventList.push({\n          xAxis: getDateString3(item.time),\n          name: _this4.emotionEvent[String(item.content)],\n          yAxis: 20,\n          tooltip: {\n            trigger: 'item',\n            formatter: function formatter(data) {\n              return data.data.xAxis + \"<br />\" + data.name;\n            }\n          }\n        });\n      });\n\n      var _this$initEmotion3 = this.initEmotion(data),\n          emotionList = _this$initEmotion3.emotionList,\n          area = _this$initEmotion3.area,\n          line = _this$initEmotion3.line;\n\n      this.emotion.series.markArea.data = area;\n\n      var _this$initBaseData2 = this.initBaseData(driveData),\n          driveDatas = _this$initBaseData2.driveDatas,\n          driveEmotion = _this$initBaseData2.driveEmotion;\n\n      this.emotion.xAxis.data = driveDatas;\n      this.emotion.series.data = driveEmotion;\n      this.emotion.series.markLine.data = line;\n      this.emotion.series.markPoint.data = eventList;\n      echarts.init(document.getElementById('emotion')).setOption(this.emotion);\n    },\n    calAge: function calAge(bir) {\n      return _calAge(bir);\n    },\n    calDriveAge: function calDriveAge(time) {\n      return _calDriveAge(time);\n    },\n    getDateString2: function getDateString2(time) {\n      return _getDateString2(time);\n    },\n    timeInspect: function timeInspect(time1, time2) {\n      return _timeInspect(time1, time2);\n    }\n  }\n};",{"version":3,"sources":["testReport.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyZA,OAAA,OAAA,MAAA,SAAA;AACA,OAAA,UAAA,MAAA,oBAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AACA,SAAA,MAAA,IAAA,OAAA,EAAA,WAAA,IAAA,YAAA,EAAA,cAAA,IAAA,eAAA,EAAA,WAAA,IAAA,YAAA,EAAA,cAAA,EAAA,aAAA,IAAA,cAAA,QAAA,cAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,MAAA,EAAA,CAAA,QAAA,CAFA;AAGA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA;AADA,GAHA;AAMA,EAAA,IANA,kBAMA;AAAA;;AACA,WAAA;AACA,MAAA,UAAA,EAAA,EADA;AAEA,MAAA,QAAA,EAAA,EAFA;AAGA,MAAA,SAAA,EAAA,EAHA;AAIA,MAAA,IAAA,EAAA,IAJA;AAKA,MAAA,UAAA,EAAA,CACA;AACA,QAAA,EAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA,eAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OADA,EAMA;AACA,QAAA,EAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA,eAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OANA,EAWA;AACA,QAAA,EAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA,eAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OAXA,EAgBA;AACA,QAAA,EAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA,eAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OAhBA,EAqBA;AACA,QAAA,EAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA,eAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OArBA,EA0BA;AACA,QAAA,EAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA,eAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OA1BA,EA+BA;AACA,QAAA,EAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA,eAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OA/BA,EAoCA;AACA,QAAA,EAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA,cAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OApCA,EAyCA;AACA,QAAA,EAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA,mBAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OAzCA,EA8CA;AACA,QAAA,EAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA,iBAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OA9CA,EAmDA;AACA,QAAA,EAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA,oBAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OAnDA,EAwDA;AACA,QAAA,EAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA,iBAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OAxDA,EA6DA;AACA,QAAA,EAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA,sBAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OA7DA,CALA;AAwEA,MAAA,QAAA,EAAA,IAxEA;AAyEA,MAAA,aAAA,EAAA;AACA,aAAA,IADA;AAEA,cAAA,KAAA,EAAA,CAAA,oBAAA,CAFA;AAGA,cAAA,KAAA,EAAA,CAAA,oBAAA,CAHA;AAIA,cAAA,KAAA,EAAA,CAAA,oBAAA;AAJA,OAzEA;AA+EA,MAAA,OAAA,EAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,KADA;AAEA,UAAA,SAAA,EAAA;AACA,YAAA,KAAA,EAAA;AADA;AAFA,SADA;AAOA,QAAA,QAAA,EAAA,CAAA;AACA,UAAA,MAAA,EAAA,YADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,KAAA,EAAA,CAHA;AAIA,UAAA,GAAA,EAAA;AAJA,SAAA,CAPA;AAaA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA,MADA;AAEA,UAAA,SAAA,EAAA,mBAAA,IAAA,EAAA;AACA,mBAAA,IAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAA,QAAA,GAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA;AACA;AAJA,SAbA;AAmBA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAnBA;AAuBA,QAAA,KAAA,EAAA,CACA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,IAAA,EAAA,EAHA;AAIA,UAAA,GAAA,EAAA,EAJA;AAKA,UAAA,GAAA,EAAA,EALA;AAMA,UAAA,QAAA,EAAA;AANA,SADA,EASA;AACA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA;AADA;AADA,SATA,CAvBA;AAsCA,QAAA,MAAA,EAAA;AACA,UAAA,UAAA,EAAA,CADA;AAEA,UAAA,IAAA,EAAA,MAFA;AAGA,UAAA,MAAA,EAAA,IAHA;AAIA,UAAA,SAAA,EAAA;AACA,YAAA,KAAA,EAAA,CADA;AAEA,YAAA,KAAA,EAAA;AAFA,WAJA;AAQA,UAAA,SAAA,EAAA;AACA,YAAA,MAAA,EAAA;AACA,cAAA,OAAA,EAAA,CADA;AAEA,cAAA,KAAA,EAAA;AACA,gBAAA,IAAA,EAAA;AADA;AAFA;AADA,WARA;AAgBA,UAAA,IAAA,EAAA,EAhBA;AAiBA,UAAA,SAAA,EAAA,IAjBA;AAkBA,UAAA,MAAA,EAAA,MAlBA;AAmBA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA;AADA,WAnBA;AAuBA,UAAA,QAAA,EAAA;AACA,YAAA,MAAA,EAAA,MADA;AAEA,YAAA,IAAA,EAAA;AAFA,WAvBA;AA4BA,UAAA,SAAA,EAAA;AACA,YAAA,MAAA,EAAA,QADA;AAEA,YAAA,UAAA,EAAA,EAFA;AAGA,YAAA,SAAA,EAAA;AACA,cAAA,MAAA,EAAA;AACA,gBAAA,KAAA,EAAA,KADA;AAEA,gBAAA,OAAA,EAAA,GAFA;AAGA,gBAAA,KAAA,EAAA;AACA,kBAAA,IAAA,EAAA;AADA;AAHA;AADA,aAHA;AAYA,YAAA,IAAA,EAAA;AAZA;AA5BA,SAtCA;AAmFA,QAAA,IAAA,EAAA;AACA,UAAA,CAAA,EAAA,EADA;AAEA,UAAA,CAAA,EAAA,EAFA;AAGA,UAAA,EAAA,EAAA,EAHA;AAIA,UAAA,EAAA,EAAA;AAJA;AAnFA,OA/EA;AAyKA,MAAA,WAAA,EAAA,EAzKA;AA0KA,MAAA,WAAA,EAAA,EA1KA;AA2KA,MAAA,KAAA,EAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,KADA;AAEA,UAAA,SAAA,EAAA;AACA,YAAA,KAAA,EAAA;AADA;AAFA,SADA;AAOA,QAAA,QAAA,EAAA,CAAA;AACA,UAAA,MAAA,EAAA,YADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,KAAA,EAAA,CAHA;AAIA,UAAA,GAAA,EAAA;AAJA,SAAA,CAPA;AAaA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA;AADA,SAbA;AAgBA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAhBA;AAoBA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,IAAA,EAAA,EAHA;AAIA,UAAA,GAAA,EAAA,CAJA;AAKA,UAAA,GAAA,EAAA,GALA;AAMA,UAAA,QAAA,EAAA;AANA,SApBA;AA4BA,QAAA,MAAA,EAAA;AACA,UAAA,UAAA,EAAA,CADA;AAEA,UAAA,IAAA,EAAA,MAFA;AAGA,UAAA,MAAA,EAAA,IAHA;AAIA,UAAA,SAAA,EAAA;AACA,YAAA,MAAA,EAAA;AACA,cAAA,OAAA,EAAA,CADA;AAEA,cAAA,KAAA,EAAA,SAFA;AAGA,cAAA,KAAA,EAAA;AACA,gBAAA,IAAA,EAAA;AADA;AAHA;AADA,WAJA;AAaA,UAAA,IAAA,EAAA,EAbA;AAcA,UAAA,SAAA,EAAA,IAdA;AAeA,UAAA,MAAA,EAAA,MAfA;AAgBA,UAAA,IAAA,EAAA,KAAA,EAAA,CAAA,gBAAA,CAhBA;AAiBA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA;AADA,WAjBA;AAqBA,UAAA,QAAA,EAAA;AACA,YAAA,MAAA,EAAA,MADA;AAEA,YAAA,IAAA,EAAA;AAFA;AArBA,SA5BA;AAuDA,QAAA,IAAA,EAAA;AACA,UAAA,CAAA,EAAA,EADA;AAEA,UAAA,CAAA,EAAA,EAFA;AAGA,UAAA,EAAA,EAAA,EAHA;AAIA,UAAA,EAAA,EAAA;AAJA;AAvDA,OA3KA;AAyOA,MAAA,SAAA,EAAA;AACA,QAAA,IAAA,EAAA,EADA;AAEA,QAAA,GAAA,EAAA;AAFA,OAzOA;AA6OA,MAAA,MAAA,EAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,KADA;AAEA,UAAA,SAAA,EAAA;AACA,YAAA,KAAA,EAAA;AADA;AAFA,SADA;AAOA,QAAA,QAAA,EAAA,CAAA;AACA,UAAA,MAAA,EAAA,YADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,KAAA,EAAA,CAHA;AAIA,UAAA,GAAA,EAAA;AAJA,SAAA,CAPA;AAaA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA;AADA,SAbA;AAgBA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAhBA;AAoBA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,IAAA,EAAA,EAHA;AAIA,UAAA,GAAA,EAAA,CAAA,EAJA;AAKA,UAAA,GAAA,EAAA,EALA;AAMA,UAAA,QAAA,EAAA;AANA,SApBA;AA4BA,QAAA,MAAA,EAAA;AACA,UAAA,UAAA,EAAA,CADA;AAEA,UAAA,IAAA,EAAA,MAFA;AAGA,UAAA,MAAA,EAAA,IAHA;AAIA,UAAA,SAAA,EAAA;AACA,YAAA,MAAA,EAAA;AACA,cAAA,OAAA,EAAA,CADA;AAEA,cAAA,KAAA,EAAA,SAFA;AAGA,cAAA,KAAA,EAAA;AACA,gBAAA,IAAA,EAAA;AADA;AAHA;AADA,WAJA;AAaA,UAAA,IAAA,EAAA,EAbA;AAcA,UAAA,SAAA,EAAA,IAdA;AAeA,UAAA,MAAA,EAAA,MAfA;AAgBA,UAAA,IAAA,EAAA,KAAA,EAAA,CAAA,iBAAA,CAhBA;AAiBA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA;AADA,WAjBA;AAqBA,UAAA,QAAA,EAAA;AACA,YAAA,MAAA,EAAA,MADA;AAEA,YAAA,IAAA,EAAA;AAFA;AArBA,SA5BA;AAuDA,QAAA,IAAA,EAAA;AACA,UAAA,CAAA,EAAA,EADA;AAEA,UAAA,CAAA,EAAA,EAFA;AAGA,UAAA,EAAA,EAAA,EAHA;AAIA,UAAA,EAAA,EAAA;AAJA;AAvDA,OA7OA;AA2SA,MAAA,SAAA,EAAA;AACA,QAAA,IAAA,EAAA,EADA;AAEA,QAAA,GAAA,EAAA;AAFA,OA3SA;AA+SA,MAAA,KAAA,EAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,KADA;AAEA,UAAA,SAAA,EAAA;AACA,YAAA,KAAA,EAAA;AADA;AAFA,SADA;AAOA,QAAA,QAAA,EAAA,CAAA;AACA,UAAA,MAAA,EAAA,YADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,KAAA,EAAA,CAHA;AAIA,UAAA,GAAA,EAAA;AAJA,SAAA,CAPA;AAaA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA,MADA;AAEA,UAAA,SAAA,EAAA,mBAAA,IAAA,EAAA;AACA,mBAAA,IAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAA,QAAA,aAAA,IAAA,CAAA,CAAA,CAAA,CAAA,IAAA,GAAA,CAAA,GAAA,KAAA,CAAA,EAAA,CAAA,qBAAA,CAAA,GAAA,KAAA,CAAA,EAAA,CAAA,sBAAA,CAAA,CAAA;AACA;AAJA,SAbA;AAmBA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAnBA;AAuBA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,IAAA,EAAA,EAHA;AAIA,UAAA,GAAA,EAAA,CAAA,CAJA;AAKA,UAAA,GAAA,EAAA,CALA;AAMA,UAAA,QAAA,EAAA;AANA,SAvBA;AA+BA,QAAA,MAAA,EAAA;AACA,UAAA,UAAA,EAAA,CADA;AAEA,UAAA,IAAA,EAAA,MAFA;AAGA,UAAA,MAAA,EAAA,IAHA;AAIA,UAAA,SAAA,EAAA;AACA,YAAA,MAAA,EAAA;AACA,cAAA,OAAA,EAAA,CADA;AAEA,cAAA,KAAA,EAAA,SAFA;AAGA,cAAA,SAAA,EAAA;AACA,gBAAA,KAAA,EAAA;AADA,eAHA;AAMA,cAAA,KAAA,EAAA;AACA,gBAAA,IAAA,EAAA;AADA;AANA;AADA,WAJA;AAgBA,UAAA,IAAA,EAAA,EAhBA;AAiBA,UAAA,SAAA,EAAA,IAjBA;AAkBA,UAAA,MAAA,EAAA,MAlBA;AAmBA,UAAA,IAAA,EAAA,KAAA,EAAA,CAAA,mBAAA,CAnBA;AAoBA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA;AADA,WApBA;AAwBA,UAAA,QAAA,EAAA;AACA,YAAA,MAAA,EAAA,MADA;AAEA,YAAA,IAAA,EAAA;AAFA;AAxBA,SA/BA;AA6DA,QAAA,IAAA,EAAA;AACA,UAAA,CAAA,EAAA,EADA;AAEA,UAAA,CAAA,EAAA,EAFA;AAGA,UAAA,EAAA,EAAA,EAHA;AAIA,UAAA,EAAA,EAAA;AAJA;AA7DA,OA/SA;AAmXA,MAAA,QAAA,EAAA,EAnXA;AAoXA,MAAA,QAAA,EAAA,EApXA;AAqXA,MAAA,IAAA,EAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,KADA;AAEA,UAAA,SAAA,EAAA;AACA,YAAA,KAAA,EAAA;AADA;AAFA,SADA;AAOA,QAAA,QAAA,EAAA,CAAA;AACA,UAAA,MAAA,EAAA,YADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,KAAA,EAAA,CAHA;AAIA,UAAA,GAAA,EAAA;AAJA,SAAA,CAPA;AAaA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA,MADA;AAEA,UAAA,SAAA,EAAA,mBAAA,IAAA,EAAA;AACA,mBAAA,IAAA,CAAA,CAAA,CAAA,CAAA,SAAA,GAAA,QAAA,GAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA;AACA;AAJA,SAbA;AAmBA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAnBA;AAuBA,QAAA,KAAA,EAAA,CACA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,IAAA,EAAA,EAHA;AAIA,UAAA,GAAA,EAAA,EAJA;AAKA,UAAA,GAAA,EAAA,EALA;AAMA,UAAA,QAAA,EAAA;AANA,SADA,EASA;AACA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA;AADA;AADA,SATA,CAvBA;AAsCA,QAAA,MAAA,EAAA;AACA,UAAA,UAAA,EAAA,CADA;AAEA,UAAA,IAAA,EAAA,MAFA;AAGA,UAAA,MAAA,EAAA,IAHA;AAIA,UAAA,SAAA,EAAA;AACA,YAAA,KAAA,EAAA,CADA;AAEA,YAAA,KAAA,EAAA;AAFA,WAJA;AAQA,UAAA,SAAA,EAAA;AACA,YAAA,MAAA,EAAA;AACA,cAAA,OAAA,EAAA,CADA;AAEA,cAAA,KAAA,EAAA,MAFA;AAGA,cAAA,KAAA,EAAA;AACA,gBAAA,IAAA,EAAA;AADA;AAHA;AADA,WARA;AAiBA,UAAA,IAAA,EAAA,EAjBA;AAkBA,UAAA,SAAA,EAAA,IAlBA;AAmBA,UAAA,MAAA,EAAA,MAnBA;AAoBA,UAAA,IAAA,EAAA,KAAA,EAAA,CAAA,gBAAA,CApBA;AAqBA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,EAAA;AADA,WArBA;AAyBA,UAAA,QAAA,EAAA;AACA,YAAA,MAAA,EAAA,MADA;AAEA,YAAA,IAAA,EAAA;AAFA,WAzBA;AA8BA,UAAA,SAAA,EAAA;AACA,YAAA,MAAA,EAAA,QADA;AAEA,YAAA,UAAA,EAAA,EAFA;AAGA,YAAA,SAAA,EAAA;AACA,cAAA,MAAA,EAAA;AACA,gBAAA,KAAA,EAAA,KADA;AAEA,gBAAA,OAAA,EAAA,GAFA;AAGA,gBAAA,KAAA,EAAA;AACA,kBAAA,IAAA,EAAA;AADA;AAHA;AADA,aAHA;AAYA,YAAA,IAAA,EAAA;AAZA;AA9BA,SAtCA;AAqFA,QAAA,IAAA,EAAA;AACA,UAAA,CAAA,EAAA,EADA;AAEA,UAAA,CAAA,EAAA,EAFA;AAGA,UAAA,EAAA,EAAA,EAHA;AAIA,UAAA,EAAA,EAAA;AAJA;AArFA,OArXA;AAidA,MAAA,YAAA,EAAA,EAjdA;AAkdA,MAAA,UAAA,EAAA,IAldA;AAmdA,MAAA,YAAA,EAAA;AACA,aAAA,KAAA,EAAA,CAAA,iBAAA,CADA;AAEA,aAAA,KAAA,EAAA,CAAA,iBAAA,CAFA;AAGA,aAAA,KAAA,EAAA,CAAA,iBAAA,CAHA;AAIA,aAAA,KAAA,EAAA,CAAA,iBAAA,CAJA;AAKA,aAAA,KAAA,EAAA,CAAA,gBAAA;AALA;AAndA,KAAA;AA2dA,GAleA;AAmeA,EAAA,OAneA,qBAmeA;AAAA;;AACA;AACA,IAAA,UAAA,CAAA,GAAA,CAAA,+DAAA,KAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,UAAA,QAAA,CAAA,IAAA,CAAA,IAAA,IAAA,GAAA,EAAA;AACA,QAAA,MAAA,CAAA,UAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,aAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,aAAA,GAAA,EAAA;AACA,QAAA,MAAA,CAAA,SAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,qBAAA;AACA,QAAA,MAAA,CAAA,IAAA,GAAA;AACA,UAAA,IAAA,EAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,iBADA;AAEA,UAAA,MAAA,EAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,iBAAA,CAAA,CAAA;AAFA,SAAA;AAIA,YAAA,IAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,aAAA,GAAA,MAAA,CAAA,WAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,aAAA,CAAA,oBAAA,CAAA,GAAA,CAAA;AACA,QAAA,MAAA,CAAA,QAAA,GAAA,IAAA,CAAA,IAAA,GAAA,MAAA,CAAA,EAAA,CAAA,eAAA,CAAA,GAAA,IAAA,CAAA,KAAA,GAAA,MAAA,CAAA,EAAA,CAAA,gBAAA,CAAA;;AACA,QAAA,MAAA,CAAA,UAAA,CACA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,WADA,EAEA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,oBAFA,EAGA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,gBAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,MAAA,GAAA,EAHA;;AAIA,QAAA,MAAA,CAAA,QAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,oBAAA;AACA,QAAA,MAAA,CAAA,WAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,gBAAA;AACA,QAAA,MAAA,CAAA,WAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,OAAA;AACA,QAAA,MAAA,CAAA,SAAA,GAAA;AACA,kBAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,SADA;AAEA,iBAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA;AAFA,SAAA;AAIA,QAAA,MAAA,CAAA,SAAA,GAAA;AACA,kBAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,UADA;AAEA,iBAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA;AAFA,SAAA;AAIA,QAAA,MAAA,CAAA,QAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,MAAA;AACA,QAAA,MAAA,CAAA,QAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,KAAA;AACA,QAAA,MAAA,CAAA,YAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,eAAA;AACA,QAAA,MAAA,CAAA,UAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,gBAAA;;AACA,QAAA,MAAA,CAAA,QAAA,CACA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,WADA,EAEA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,SAFA;;AAIA,QAAA,MAAA,CAAA,eAAA,CACA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,WADA,EAEA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,oBAFA,EAGA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,eAHA;;AAKA,QAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,WAAA,EACA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,YADA,EArCA,CAwCA;;;AACA,QAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,KAAA,IAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,YAAA,IACA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,YAAA,IAAA,CADA,GAEA,MAAA,CAAA,OAAA,CACA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,WADA,EAEA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,oBAFA,EAGA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,gBAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,WAAA,GAAA,EAHA,CAFA,GAQA,EARA;AAUA,QAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,iBAAA,GACA,MAAA,CAAA,YAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,iBAAA,CADA,GAGA,IAHA;AAIA;AACA,KAzDA;AA0DA,GA/hBA;AAgiBA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,wBACA,SADA,EACA;AACA,UAAA,UAAA,GAAA,EAAA;AACA,UAAA,YAAA,GAAA,EAAA;AACA,MAAA,SAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,UAAA,CAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,SAAA,CAAA;AACA,QAAA,YAAA,CAAA,IAAA,CAAA,CAAA;AACA,OAHA;AAIA,aAAA;AACA,QAAA,UAAA,EAAA,UADA;AAEA,QAAA,YAAA,EAAA;AAFA,OAAA;AAIA,KAZA;AAaA,IAAA,aAbA,yBAaA,IAbA,EAaA;AACA,aAAA,cAAA,CAAA,IAAA,CAAA;AACA,KAfA;AAgBA,IAAA,OAhBA,mBAgBA,IAhBA,EAgBA,SAhBA,EAgBA,SAhBA,EAgBA;AACA,UAAA,SAAA,GAAA,EAAA;AACA,MAAA,SAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,SAAA,CAAA,IAAA,CAAA;AACA,UAAA,KAAA,EAAA,cAAA,CAAA,IAAA,CAAA,IAAA,CADA;AAEA,UAAA,OAAA,EAAA;AACA,YAAA,OAAA,EAAA;AADA,WAFA;AAKA,UAAA,KAAA,EAAA;AALA,SAAA;AAOA,OARA;;AAFA,8BAWA,KAAA,WAAA,CAAA,IAAA,CAXA;AAAA,UAWA,WAXA,qBAWA,WAXA;AAAA,UAWA,IAXA,qBAWA,IAXA;AAAA,UAWA,IAXA,qBAWA,IAXA;;AAYA,WAAA,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;;AAZA,+BAaA,KAAA,YAAA,CAAA,SAAA,CAbA;AAAA,UAaA,UAbA,sBAaA,UAbA;AAAA,UAaA,YAbA,sBAaA,YAbA;;AAcA,WAAA,IAAA,CAAA,KAAA,CAAA,IAAA,GAAA,UAAA;AACA,WAAA,IAAA,CAAA,MAAA,CAAA,IAAA,GAAA,WAAA;AACA,WAAA,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,IAAA,CAAA,MAAA,CAAA,SAAA,CAAA,IAAA,GAAA,SAAA;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,QAAA,CAAA,cAAA,CAAA,MAAA,CAAA,EAAA,SAAA,CAAA,KAAA,IAAA;AACA,KAnCA;AAoCA,IAAA,OApCA,mBAoCA,IApCA,EAoCA,OApCA,EAoCA;AACA,UAAA,OAAA,GAAA,EAAA;AACA,UAAA,KAAA,GAAA,EAAA;;AAFA,iCAGA,KAAA,cAAA,CAAA,IAAA,CAHA;AAAA,UAGA,IAHA,wBAGA,IAHA;AAAA,UAGA,IAHA,wBAGA,IAHA;;AAIA,MAAA,OAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,SAAA,CAAA;AACA,QAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA;AACA,OAHA;AAIA,WAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,IAAA,GAAA,OAAA;AACA,WAAA,KAAA,CAAA,MAAA,CAAA,IAAA,GAAA,KAAA;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,QAAA,CAAA,cAAA,CAAA,MAAA,CAAA,EAAA,SAAA,CAAA,KAAA,KAAA;AACA,KAjDA;AAkDA,IAAA,UAlDA,sBAkDA,GAlDA,EAkDA;AACA,aAAA,IAAA,CAAA,IAAA,CAAA,GAAA,IAAA,OAAA,EAAA,GAAA,EAAA,CAAA,IAAA,OAAA,EAAA,CAAA,CAAA;AACA,KApDA;AAqDA,IAAA,YArDA,wBAqDA,IArDA,EAqDA;AACA,WAAA,UAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,IAAA,CAAA,GAAA,CAAA,UAAA,EAAA,EAAA;AACA,cAAA,EAAA,CAAA,SAAA,IAAA,IAAA,CAAA,EAAA,EAAA;AACA,YAAA,IAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,oBAAA;AACA;AACA,SAJA;AAKA,OANA;AAOA,KA7DA;AA8DA,IAAA,WA9DA,uBA8DA,IA9DA,EA8DA,IA9DA,EA8DA;AAAA;;AACA,UAAA,WAAA,GAAA,EAAA;AACA,UAAA,IAAA,GAAA,EAAA;AACA,UAAA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA;;AACA,YAAA,IAAA,CAAA,OAAA,IAAA,EAAA,IAAA,IAAA,CAAA,OAAA,IAAA,CAAA,EAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,CACA;AACA,YAAA,KAAA,EAAA,IAAA,CAAA,gBAAA,GAAA,cAAA,CAAA,IAAA,CAAA,gBAAA,CAAA,GAAA,CADA;AAEA,YAAA,KAAA,EAAA,IAAA,IAAA,OAAA,GAAA,EAAA,GAAA,EAFA;AAGA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA,SADA;AAEA,cAAA,KAAA,EAAA;AAFA,aAHA;AAOA,YAAA,OAAA,EAAA;AACA,cAAA,OAAA,EAAA,MADA;AAEA,cAAA,SAAA,EAAA,mBAAA,IAAA,EAAA;AACA,uBAAA,CAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,IAAA,CAAA,KAAA,IAAA,QAAA,GAAA,MAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AACA;AAJA;AAPA,WADA,EAeA;AACA,YAAA,KAAA,EAAA,IAAA,IAAA,OAAA,GAAA,EAAA,GAAA,EADA;AAEA,YAAA,KAAA,EAAA,IAAA,CAAA,cAAA,GAAA,cAAA,CAAA,IAAA,CAAA,cAAA,CAAA,GAAA;AAFA,WAfA,CAAA;AAoBA,SArBA,MAqBA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA,YAAA,KAAA,EAAA,IAAA,CAAA,OADA;AAEA,YAAA,KAAA,EAAA,IAAA,CAAA,gBAAA,GAAA,cAAA,CAAA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAFA;AAGA,YAAA,IAAA,EAAA,IAAA,CAAA,OAHA;AAIA,YAAA,KAAA,EAAA,IAAA,IAAA,OAAA,GAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,CAAA,GAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,CAJA;AAKA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,SAAA,GAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,SAAA,GAAA;AADA,aALA;AAQA,YAAA,OAAA,EAAA;AACA,cAAA,OAAA,EAAA,MADA;AAEA,cAAA,SAAA,EAAA,mBAAA,IAAA,EAAA;AACA,uBAAA,cAAA,CAAA,IAAA,CAAA,gBAAA,CAAA,GAAA,QAAA,GAAA,MAAA,CAAA,aAAA,CAAA,IAAA,CAAA,KAAA,CAAA;AACA;AAJA;AARA,WAAA,EAcA;AACA,YAAA,OAAA,EAAA;AACA,cAAA,OAAA,EAAA,MADA;AAEA,cAAA,SAAA,EAAA,mBAAA,IAAA,EAAA;AACA,uBAAA,IAAA,CAAA,KAAA;AACA;AAJA,aADA;AAOA,YAAA,KAAA,EAAA,IAAA,CAAA,OAPA;AAQA,YAAA,KAAA,EAAA,IAAA,IAAA,OAAA,GAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EARA;AASA,YAAA,KAAA,EAAA,IAAA,CAAA,cAAA,GAAA,cAAA,CAAA,IAAA,CAAA,cAAA,CAAA,GAAA;AATA,WAdA,CAAA;AA0BA;AACA,OAnDA;AAoDA,aAAA;AACA,QAAA,WAAA,EAAA,WADA;AAEA,QAAA,IAAA,EAAA,IAFA;AAGA,QAAA,IAAA,EAAA;AAHA,OAAA;AAKA,KA3HA;AA4HA,IAAA,cA5HA,0BA4HA,IA5HA,EA4HA,GA5HA,EA4HA;AACA,UAAA,WAAA,GAAA,EAAA;AACA,UAAA,IAAA,GAAA,EAAA;AACA,UAAA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA;;AACA,YAAA,IAAA,CAAA,OAAA,IAAA,EAAA,IAAA,IAAA,CAAA,OAAA,IAAA,CAAA,EAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,CACA;AACA,YAAA,KAAA,EAAA,IAAA,CAAA,gBAAA,GAAA,cAAA,CAAA,IAAA,CAAA,gBAAA,CAAA,GAAA,CADA;AAEA,YAAA,KAAA,EAAA,CAFA;AAGA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA,SADA;AAEA,cAAA,KAAA,EAAA;AAFA;AAHA,WADA,EASA;AACA,YAAA,KAAA,EAAA,CADA;AAEA,YAAA,KAAA,EAAA,IAAA,CAAA,cAAA,GAAA,cAAA,CAAA,IAAA,CAAA,cAAA,CAAA,GAAA;AAFA,WATA,CAAA;AAcA,SAfA,MAeA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA,YAAA,KAAA,EAAA,IAAA,CAAA,gBAAA,GAAA,cAAA,CAAA,IAAA,CAAA,gBAAA,CAAA,GAAA,CADA;AAEA,YAAA,IAAA,EAAA,IAAA,CAAA,OAFA;AAGA,YAAA,KAAA,EAAA,GAAA,GAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,CAAA,GAAA,MAAA,CAAA,MAAA,GAAA,CAAA,GAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,CAAA,GAAA,CAAA,EAHA;AAIA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,SAAA,GAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,SAAA,GAAA;AADA;AAJA,WAAA,EAOA;AACA,YAAA,KAAA,EAAA,GAAA,GAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,GAAA,GAAA,CAAA,GAAA,IAAA,CAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,CADA;AAEA,YAAA,KAAA,EAAA,IAAA,CAAA,cAAA,GAAA,cAAA,CAAA,IAAA,CAAA,cAAA,CAAA,GAAA;AAFA,WAPA,CAAA;AAYA;AACA,OA/BA;AAgCA,aAAA;AACA,QAAA,WAAA,EAAA,WADA;AAEA,QAAA,IAAA,EAAA,IAFA;AAGA,QAAA,IAAA,EAAA;AAHA,OAAA;AAKA,KArKA;AAsKA,IAAA,eAtKA,2BAsKA,IAtKA,EAsKA,OAtKA,EAsKA,MAtKA,EAsKA;AAAA,kCACA,KAAA,cAAA,CAAA,IAAA,EAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CADA;AAAA,UACA,IADA,yBACA,IADA;AAAA,UACA,IADA,yBACA,IADA;;AAEA,UAAA,OAAA,GAAA,EAAA;AACA,UAAA,KAAA,GAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,SAAA,CAAA;AACA,QAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,YAAA;AACA,OAHA;AAIA,WAAA,MAAA,CAAA,KAAA,CAAA,GAAA,GAAA,MAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA;AACA,WAAA,MAAA,CAAA,KAAA,CAAA,GAAA,GAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA;AACA,WAAA,MAAA,CAAA,KAAA,CAAA,QAAA,GAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,MAAA,CAAA,KAAA,CAAA,IAAA,GAAA,OAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,IAAA,GAAA,KAAA;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,QAAA,CAAA,cAAA,CAAA,cAAA,CAAA,EAAA,SAAA,CAAA,KAAA,MAAA;AACA,KAtLA;AAuLA,IAAA,QAvLA,oBAuLA,IAvLA,EAuLA,SAvLA,EAuLA;AAAA,+BACA,KAAA,WAAA,CAAA,IAAA,EAAA,OAAA,CADA;AAAA,UACA,IADA,sBACA,IADA;AAAA,UACA,IADA,sBACA,IADA;;AAEA,UAAA,SAAA,GAAA,EAAA;AACA,UAAA,KAAA,GAAA,EAAA;AACA,MAAA,SAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,SAAA,CAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,SAAA,CAAA;AACA,QAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA;AACA,OAHA;AAIA,WAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,IAAA,GAAA,SAAA;AACA,WAAA,KAAA,CAAA,MAAA,CAAA,IAAA,GAAA,KAAA;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,QAAA,CAAA,cAAA,CAAA,OAAA,CAAA,EAAA,SAAA,CAAA,KAAA,KAAA;AACA,KApMA;AAqMA,IAAA,UArMA,sBAqMA,IArMA,EAqMA,SArMA,EAqMA,SArMA,EAqMA;AAAA;;AACA,UAAA,SAAA,GAAA,EAAA;AACA,MAAA,SAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,SAAA,CAAA,IAAA,CAAA;AACA,UAAA,KAAA,EAAA,cAAA,CAAA,IAAA,CAAA,IAAA,CADA;AAEA,UAAA,IAAA,EAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAFA;AAGA,UAAA,KAAA,EAAA,EAHA;AAIA,UAAA,OAAA,EAAA;AACA,YAAA,OAAA,EAAA,MADA;AAEA,YAAA,SAAA,EAAA,mBAAA,IAAA,EAAA;AACA,qBAAA,IAAA,CAAA,IAAA,CAAA,KAAA,GAAA,QAAA,GAAA,IAAA,CAAA,IAAA;AACA;AAJA;AAJA,SAAA;AAWA,OAZA;;AAFA,+BAeA,KAAA,WAAA,CAAA,IAAA,CAfA;AAAA,UAeA,WAfA,sBAeA,WAfA;AAAA,UAeA,IAfA,sBAeA,IAfA;AAAA,UAeA,IAfA,sBAeA,IAfA;;AAgBA,WAAA,OAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;;AAhBA,gCAiBA,KAAA,YAAA,CAAA,SAAA,CAjBA;AAAA,UAiBA,UAjBA,uBAiBA,UAjBA;AAAA,UAiBA,YAjBA,uBAiBA,YAjBA;;AAkBA,WAAA,OAAA,CAAA,KAAA,CAAA,IAAA,GAAA,UAAA;AACA,WAAA,OAAA,CAAA,MAAA,CAAA,IAAA,GAAA,YAAA;AACA,WAAA,OAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,OAAA,CAAA,MAAA,CAAA,SAAA,CAAA,IAAA,GAAA,SAAA;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,QAAA,CAAA,cAAA,CAAA,SAAA,CAAA,EAAA,SAAA,CAAA,KAAA,OAAA;AAEA,KA7NA;AA8NA,IAAA,MA9NA,kBA8NA,GA9NA,EA8NA;AACA,aAAA,OAAA,CAAA,GAAA,CAAA;AACA,KAhOA;AAiOA,IAAA,WAjOA,uBAiOA,IAjOA,EAiOA;AACA,aAAA,YAAA,CAAA,IAAA,CAAA;AACA,KAnOA;AAoOA,IAAA,cApOA,0BAoOA,IApOA,EAoOA;AACA,aAAA,eAAA,CAAA,IAAA,CAAA;AACA,KAtOA;AAuOA,IAAA,WAvOA,uBAuOA,KAvOA,EAuOA,KAvOA,EAuOA;AACA,aAAA,YAAA,CAAA,KAAA,EAAA,KAAA,CAAA;AACA;AAzOA;AAhiBA,CAAA","sourcesContent":["<template>\n    <div>\n        <b-card>\n            <div slot=\"header\">\n                {{ $t('m.report.title') }}\n            </div>\n            <div class=\"content\">\n                <b-row>\n                    <b-col sm=\"6\">\n                        <b-card>\n                            <div slot=\"header\">\n                                {{ $t('m.report.user_title') }}\n                            </div>\n                            <div class=\"content\">\n                                <b-row style=\"position: relative\">\n                                    <b-col sm=\"8\">\n                                        <p>{{ $t('m.admin.name') }}:{{ userDetail.driveLicenseName }}</p>\n                                        <p>{{ $t('m.cloud.gender') }}:{{ userDetail.driveLicenseGender == 1 ? $t('m.common.boy') : $t('m.common.girl') }}</p>\n                                        <p>{{ $t('m.report.age') }}:{{ userDetail.driveLicenseBirthDate ? calAge(userDetail.driveLicenseBirthDate) : 0 }}</p>\n                                        <p>{{ $t('m.report.driveAge') }}:{{ driveAge  }}</p>\n                                        <p>{{ $t('m.report.address') }}:{{ userDetail.driveLicenseAddress }}</p>\n                                    </b-col>\n                                    <b-col sm=\"4\">\n                                        <img :src=\"userDetail.faceRecognitionUrl\" width=\"100%\" style=\"margin-top:10px;-webkit-transform: rotate(90deg);-moz-transform: rotate(90deg);-ms-transform: rotate(90deg);-o-transform: rotate(90deg);transform: rotate(90deg);\">\n                                    </b-col>\n                                </b-row>\n                                <p>{{ $t('m.report.userId') }}<span class=\"hot-link\" @click=\"$router.push('/test-drive/test-user/detail/' + userDetail.userId)\">{{ userDetail.userId }}</span></p>\n                            </div>\n                        </b-card>\n                    </b-col>\n                    <b-col sm=\"6\">\n                        <b-card>\n                            <div slot=\"header\">\n                                {{ $t('m.report.vehicle_title') }}\n                            </div>\n                            <div class=\"content\">\n                                <b-row>\n                                    <b-col sm=\"6\">\n                                        <p>{{ $t('m.common.year') }}:{{ userDetail.year }}</p>\n                                        <p>{{ $t('m.report.make') }}:{{ userDetail.make }}</p>\n                                        <p>{{ $t('m.report.model') }}:{{ userDetail.model }}</p>\n                                        <p>{{ $t('m.common.color') }}:{{ userDetail.color }}</p>\n                                        <p>{{ $t('m.report.plat') }}:{{ userDetail.plat }}</p>\n                                    </b-col>\n                                    <b-col sm=\"6\">\n                                        <img :src=\"userDetail.vehiclePhotoPath\" width=\"100%\">\n                                    </b-col>\n                                </b-row>\n                                <p>{{ $t('m.report.vehicleId') }}<span class=\"hot-link\" @click=\"$router.push('/test-drive/test-vehicle/detail/' + userDetail.vehicleId)\">{{ userDetail.vehicleId }}</span></p>\n                            </div>\n                        </b-card>\n                    </b-col>\n                </b-row>\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.powerTitle') }}\n                        <div style=\"float: right\">\n                            {{ $t('m.report.orderId') }}: {{ userDetail.orderServiceNum ? userDetail.orderServiceNum : '' }}\n                        </div>\n                    </div>\n                    <div class=\"content\">\n                        <b-row>\n                            <b-col sm=\"3\">\n                                <p>{{ $t('m.report.days') }}:{{ driveInfo.cloudDriveStartTime ? getDateString2(driveInfo.cloudDriveStartTime) : '' }}</p>\n                                <p>{{ $t('m.report.time') }}:{{ driveInfo.cloudDriveStartTime ? timeInspect(driveInfo.cloudDriveStartTime, driveInfo.cloudDriveEndTime) : ''  }}</p>\n                                <p>{{ $t('m.report.totalmilege') }}: {{ driveInfo.totalTrip ? driveInfo.totalTrip + 'KM' : '0' }}</p>\n                                <p>{{ $t('m.report.totalOil') }}: {{ driveInfo.totalOilConsumption ? driveInfo.totalOilConsumption.toFixed(1) + 'L' : '0' }}</p>\n                                <p>{{ $t('m.report.aOil') }}: {{ driveInfo.averageOilConsumption ? driveInfo.averageOilConsumption.toFixed(1) + 'L/KM' : '0' }}</p>\n                            </b-col>\n                            <b-col sm=\"3\">\n                                <p>{{ $t('m.report.aSpeed') }}:{{ driveInfo.averageSpeed ? driveInfo.averageSpeed.toFixed(0) + 'KM/H' : 0 }}</p>\n                                <p>{{ $t('m.report.maxSpeed') }}:{{ driveInfo.maxSpeed ? driveInfo.maxSpeed.toFixed(0) + 'KM/H' : 0 }}</p>\n                                <p>{{ $t('m.report.acceSpeed') }}:{{ driveInfo.maxAcceleration ? driveInfo.maxAcceleration.toFixed(0) + 'KM/H/S' : 0 }}</p>\n                                <p>{{ $t('m.report.isPong') }}:{{ driveInfo.collisionStatus == 0 ? $t('m.report.col0') : $t('m.report.col1') }}</p>\n                            </b-col>\n                            <b-col sm=\"6\">\n                                <polygon-map :map=\"area\">\n                                </polygon-map>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n<!--                情绪曲线-->\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.spaceTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <div id=\"emotion\">\n                        </div>\n                        <b-row>\n                            <b-col sm=\"3\" style=\"padding-right: 0\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/font-door.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionData.lfDoor }}</div>\n                                            <div class=\"text-uppercase text-muted small\">左前车门开启</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionData.rfDoor }}</div>\n                                            <div class=\"text-uppercase text-muted small\">右前车门开启</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                            <b-col sm=\"4\" style=\"padding-right: 0\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/back-door.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionData.raDoor }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.lbDoor') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionData.laDoor }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.rbDoor') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionData.trunk }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.trunk') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                            <b-col sm=\"4\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/engine-start.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionTime.duration ? filterTime(emotionTime.duration) + $t('m.report.min') : '' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.timeLong') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionTime.positiveEmotion ? (emotionTime.positiveEmotion * 100).toFixed(0) + '%' : '' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ emotionTime.negativeEmotion ? (emotionTime.negativeEmotion * 100).toFixed(0) + '%' : '' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n<!--                速度曲线-->\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.speedTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <div id=\"speed\">\n                        </div>\n                        <b-row>\n                            <b-col sm=\"4\" style=\"padding-right: 0\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/high-speed.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.high && speedTime['high'].durationTime ? Math.ceil(speedTime['high'].durationTime / 60) + $t('m.report.min') : '0' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.highSpeed') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.high && speedTime['high'].positiveEmotionTime ? (speedTime['high'].positiveEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.high && speedTime['high'].negativeEmotionTime ? (speedTime['high'].negativeEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                            <b-col sm=\"4\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/normal-speed.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.low && speedTime['low'].durationTime ? (speedTime['low'].durationTime / 60).toFixed(0) + $t('m.report.min') : '0' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.lowSpeed') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.low && speedTime['low'].positiveEmotionTime ? (speedTime['low'].positiveEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ speedTime.low && speedTime['low'].negativeEmotionTime ? (speedTime['low'].negativeEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n<!--                加速度-->\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.acceTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <div id=\"acceleration\">\n                        </div>\n                        <b-row>\n                            <b-col sm=\"4\" style=\"padding-right: 0\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/speed-up.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.high && accleTime['high'].durationTime ? (accleTime['high'].durationTime / 60).toFixed(0) + $t('m.report.min') : '0' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.acceleration') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.high && accleTime['high'].positiveEmotionTime ? (accleTime['high'].positiveEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.high && accleTime['high'].negativeEmotionTime ? (accleTime['high'].negativeEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                            <b-col sm=\"4\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/break.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.low && accleTime['low'].durationTime ? (accleTime['low'].durationTime / 60).toFixed(0) + $t('m.report.min') : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.brake') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.low && accleTime['low'].positiveEmotionTime ? (accleTime['low'].positiveEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ accleTime.low && accleTime['low'].negativeEmotionTime ? (accleTime['low'].negativeEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n<!--                转弯曲线-->\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.turnTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <div id=\"turn\">\n                        </div>\n                        <b-row>\n                            <b-col sm=\"4\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/turn.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ turnTime.durationTime ? Math.ceil(turnTime.durationTime / 60) + $t('m.report.min') : '0' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.turnCard') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ turnTime.positiveEmotionTime ? (turnTime.positiveEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ turnTime.negativeEmotionTime ? (turnTime.negativeEmotionTime * 100).toFixed(0) + '%' : '0%' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n                <!--        颠簸点 -->\n                <b-card v-if=\"bumpTime.durationTime && bumpTime.durationTime != 0\">\n                    <div slot=\"header\">\n                        {{ $t('m.report.pongTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <div id=\"pong\">\n                        </div>\n                        {{ bumpTime.durationTime }}\n                        <b-row>\n                            <b-col sm=\"3\" style=\"padding-right: 0\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/zag.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ bumpTime.durationTime ? bumpTime.durationTime : '0' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.pongContent') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ bumpTime.positiveEmotionTime ?  (bumpTime.positiveEmotionTime * 100) + '%'  : 0 }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ bumpTime.negativeEmotionTime ? (bumpTime.negativeEmotionTime * 100) + '%' : 0 }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n                <!--      整体满意度分析  -->\n                <b-card>\n                    <div slot=\"header\">\n                        {{ $t('m.report.wholeTitle') }}\n                    </div>\n                    <div class=\"content\">\n                        <b-row>\n                            <b-col sm=\"4\">\n                                <div class=\"brand-card\">\n                                    <div class=\"brand-card-header bg-primary\">\n                                        <img src=\"https://pic.zus.ai/saas/report.svg\" width=\"50px\">\n                                    </div>\n                                    <div class=\"brand-card-body\">\n                                        <div>\n                                            <div class=\"text-value\">{{ wholeEmotion.positiveEmotion ? (wholeEmotion.positiveEmotion * 100).toFixed(0) + '%' : '' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.posEmotion') }}</div>\n                                        </div>\n                                        <div>\n                                            <div class=\"text-value\">{{ wholeEmotion.negativeEmotion ? (wholeEmotion.negativeEmotion * 100).toFixed(0) + '%' : '' }}</div>\n                                            <div class=\"text-uppercase text-muted small\">{{ $t('m.report.negEmotion') }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </b-col>\n                        </b-row>\n                    </div>\n                </b-card>\n            </div>\n        </b-card>\n\n<!--        问卷调查-->\n        <b-card>\n            <div slot=\"header\">\n                {{ $t('m.report.surveyTitle') }}\n                <div style=\"float: right\">\n                    {{ $t('m.report.createTime') + \":\" }} {{ getDateString(finishTime) }}\n                </div>\n            </div>\n            <div class=\"content\">\n                <b-list-group>\n                    <div v-for=\"item in surveyList\" class=\"row list-group-item d-flex justify-content-between align-items-center\" :key=\"item.id\">\n                        <div class=\"col-sm-6\">\n                            {{ item.name}}\n                        </div>\n                        <div class=\"col-sm-6 text-right\">\n                            <template v-if=\"item.result == $t('m.report.good') \">\n                                <span class=\"badge badge-success\">{{ item.result }}</span>\n                            </template>\n                            <template v-else-if=\"item.result == $t('m.report.normal') \">\n                                <span class=\"badge badge-warning\">{{ item.result }}</span>\n                            </template>\n                            <template v-else-if=\"item.result == $t('m.report.noGood') \">\n                                <span class=\"badge badge-danger\">{{ item.result }}</span>\n                            </template>\n                            <template v-else-if=\"item.result == $t('m.report.veryGood')\">\n                                <span class=\"badge badge-primary\">{{ item.result }}</span>\n                            </template>\n                            <template v-else>\n                                <span>{{ item.result }}</span>\n                            </template>\n\n                        </div>\n                    </div>\n                </b-list-group>\n            </div>\n        </b-card>\n    </div>\n</template>\n\n<style lang=\"scss\" scoped>\n    #acceleration, #emotion , #speed, #turn, #pong{\n        height: 400px;\n    }\n    .hot-link {\n        color: rgb(99, 194, 222);\n        cursor: pointer;\n    }\n\n</style>\n\n<script>\n    import echarts from 'echarts';\n    import httpClient from \"@/utils/httpclient\";\n    import polygonMap from \"@/components/tripMap\";\n    import { calAge, calDriveAge, getDateString2, timeInspect, getDateString3, getDateString } from \"@/utils/date\";\n\n    export default {\n        name: \"testReport\",\n        inject: ['reload'],\n        components: {\n            polygonMap\n        },\n        data() {\n            return {\n                userDetail: {},\n                driveAge: \"\",\n                driveInfo: {},\n                area: null,\n                surveyList: [\n                    {\n                        id: \"1\",\n                        name: \"1. 您觉得外观设计如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"2\",\n                        name: \"2. 您觉得内饰设计如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"3\",\n                        name: \"3. 您觉得安全性能如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"4\",\n                        name: \"4. 您觉得动力性能如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"5\",\n                        name: \"5. 您觉得加速表现如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"6\",\n                        name: \"6. 您觉得操控性能如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"7\",\n                        name: \"7. 您觉得制动表现如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"8\",\n                        name: \"8. 您觉得舒适性如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"9\",\n                        name: \"9. 您觉得本次试驾流程安排如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"10\",\n                        name: \"10. 您近期的购车计划如何？\",\n                        result: ''\n                    },\n                    {\n                        id: \"11\",\n                        name: \"11. 您通过什么方式了解本次活动？\",\n                        result: ''\n                    },\n                    {\n                        id: \"12\",\n                        name: \"12. 通过此次试驾，您准备？\",\n                        result: ''\n                    },\n                    {\n                        id: \"13\",\n                        name: \"13. 您还有其他问题或建议吗？（选填）\",\n                        result: ''\n                    }\n                ],\n                baseData: null,\n                emotionStatus: {\n                    \"0\": \"--\",\n                    \"10\": this.$t('m.report.emotion10'),\n                    \"20\": this.$t('m.report.emotion20'),\n                    \"30\": this.$t('m.report.emotion30')\n                },\n                emotion: {\n                    title: {\n                        show: false,\n                        textStyle: {\n                            color: 'grey'\n                        }\n                    },\n                    dataZoom: [{\n                        orient:\"horizontal\",\n                        show: true,\n                        start: 0,\n                        end: 100\n                    }],\n                    tooltip: {\n                        trigger: 'axis',\n                        formatter: (data) => {\n                            return data[0].axisValue + \"<br />\" + this.emotionStatus[\"0\"]\n                        }\n                    },\n                    xAxis: {\n                        show: true,\n                        data: []\n                    },\n                    yAxis: [\n                        {\n                            type: 'value',\n                            show: true,\n                            name: '',\n                            min: 10,\n                            max: 30,\n                            interval: 10,\n                        },\n                        {\n                            axisTick: {\n                                show: false\n                            }\n                        }\n                    ],\n                    series: {\n                        yAxisIndex: 0,\n                        type: \"line\",\n                        smooth: true,\n                        lineStyle: {\n                            width: 0,\n                            color: 'rgba(0, 0, 0, 0)'\n                        },\n                        itemStyle: {\n                            normal: {\n                                opacity: 0,\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [],\n                        animation: true,\n                        symbol: \"none\",\n                        markArea: {\n                            data: [\n                            ]\n                        },\n                        markLine: {\n                            symbol: 'none',\n                            data: [\n                            ]\n                        },\n                        markPoint: {\n                            symbol: 'circle',\n                            symbolSize: 14,\n                            itemStyle: {\n                                normal: {\n                                    color: 'red',\n                                    opacity: 0.8,\n                                    label: {\n                                        show: false\n                                    }\n                                }\n                            },\n                            data: [\n                            ]\n\n                        }\n                    },\n                    grid: {\n                        x: 24,\n                        y: 40,\n                        x2: 20,\n                        y2: 80\n                    }\n                },\n                emotionData: {},\n                emotionTime: {},\n                speed: {\n                    title: {\n                        show: false,\n                        textStyle: {\n                            color: 'grey'\n                        }\n                    },\n                    dataZoom: [{\n                        orient:\"horizontal\",\n                        show: true,\n                        start: 0,\n                        end: 100\n                    }],\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    xAxis: {\n                        show: true,\n                        data: []\n                    },\n                    yAxis: {\n                        type: 'value',\n                        show: true,\n                        name: '',\n                        min: 0,\n                        max: 100,\n                        interval: 50,\n                    },\n                    series: {\n                        yAxisIndex: 0,\n                        type: \"line\",\n                        smooth: true,\n                        itemStyle: {\n                            normal: {\n                                opacity: 0,\n                                color: \"#3b5998\",\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [],\n                        animation: true,\n                        symbol: \"none\",\n                        name: this.$t('m.report.speed'),\n                        markArea: {\n                            data: [\n                            ]\n                        },\n                        markLine: {\n                            symbol: 'none',\n                            data: [\n                            ]\n                        }\n                    },\n                    grid: {\n                        x: 30,\n                        y: 40,\n                        x2: 20,\n                        y2: 80\n                    }\n                },\n                speedTime: {\n                    high: {},\n                    low: {}\n                },\n                accele: {\n                    title: {\n                        show: false,\n                        textStyle: {\n                            color: 'grey'\n                        }\n                    },\n                    dataZoom: [{\n                        orient:\"horizontal\",\n                        show: true,\n                        start: 0,\n                        end: 100\n                    }],\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    xAxis: {\n                        show: true,\n                        data: []\n                    },\n                    yAxis: {\n                        type: 'value',\n                        show: true,\n                        name: '',\n                        min: -10,\n                        max: 10,\n                        interval: 10,\n                    },\n                    series: {\n                        yAxisIndex: 0,\n                        type: \"line\",\n                        smooth: true,\n                        itemStyle: {\n                            normal: {\n                                opacity: 0,\n                                color: \"#3b5998\",\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [],\n                        animation: true,\n                        symbol: \"none\",\n                        name: this.$t('m.report.accele'),\n                        markArea: {\n                            data: [\n                            ]\n                        },\n                        markLine: {\n                            symbol: 'none',\n                            data: [\n                            ]\n                        }\n                    },\n                    grid: {\n                        x: 30,\n                        y: 40,\n                        x2: 20,\n                        y2: 80\n                    }\n                },\n                accleTime: {\n                    high: {},\n                    low: {}\n                },\n                turns: {\n                    title: {\n                        show: false,\n                        textStyle: {\n                            color: 'grey'\n                        }\n                    },\n                    dataZoom: [{\n                        orient:\"horizontal\",\n                        show: true,\n                        start: 0,\n                        end: 100\n                    }],\n                    tooltip: {\n                        trigger: 'axis',\n                        formatter: (data) => {\n                            return data[0].axisValue + \"<br />\" + `${data[0].data > 0 ? this.$t('m.report.leftStatus') : this.$t('m.report.rightStatus')}`\n                        }\n                    },\n                    xAxis: {\n                        show: true,\n                        data: []\n                    },\n                    yAxis: {\n                        type: 'value',\n                        show: true,\n                        name: '',\n                        min: -2,\n                        max: 2,\n                        interval: 2,\n                    },\n                    series: {\n                        yAxisIndex: 0,\n                        type: \"line\",\n                        smooth: true,\n                        itemStyle: {\n                            normal: {\n                                opacity: 0,\n                                color: \"#3b5998\",\n                                lineStyle: {\n                                    width: 1\n                                },\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [],\n                        animation: true,\n                        symbol: \"none\",\n                        name: this.$t('m.report.turnCard'),\n                        markArea: {\n                            data: [\n                            ]\n                        },\n                        markLine: {\n                            symbol: 'none',\n                            data: [\n                            ]\n                        }\n                    },\n                    grid: {\n                        x: 30,\n                        y: 40,\n                        x2: 20,\n                        y2: 80\n                    }\n                },\n                turnTime: {},\n                bumpTime: {},\n                pong: {\n                    title: {\n                        show: false,\n                        textStyle: {\n                            color: 'grey'\n                        }\n                    },\n                    dataZoom: [{\n                        orient:\"horizontal\",\n                        show: true,\n                        start: 0,\n                        end: 100\n                    }],\n                    tooltip: {\n                        trigger: 'axis',\n                        formatter: (data) => {\n                            return data[0].axisValue + \"<br />\" + this.emotionStatus[\"0\"]\n                        }\n                    },\n                    xAxis: {\n                        show: true,\n                        data: []\n                    },\n                    yAxis: [\n                        {\n                            type: 'value',\n                            show: true,\n                            name: '',\n                            min: 10,\n                            max: 30,\n                            interval: 10,\n                        },\n                        {\n                            axisTick: {\n                                show: false\n                            }\n                        }\n                    ],\n                    series: {\n                        yAxisIndex: 0,\n                        type: \"line\",\n                        smooth: true,\n                        lineStyle: {\n                            width: 0,\n                            color: 'rgba(0, 0, 0, 0)'\n                        },\n                        itemStyle: {\n                            normal: {\n                                opacity: 0,\n                                color: \"#ccc\",\n                                label: {\n                                    show: false\n                                }\n                            }\n                        },\n                        data: [],\n                        animation: true,\n                        symbol: \"none\",\n                        name: this.$t('m.report.break'),\n                        markArea: {\n                            data: [\n                            ]\n                        },\n                        markLine: {\n                            symbol: 'none',\n                            data: [\n                            ]\n                        },\n                        markPoint: {\n                            symbol: 'circle',\n                            symbolSize: 14,\n                            itemStyle: {\n                                normal: {\n                                    color: 'red',\n                                    opacity: 0.8,\n                                    label: {\n                                        show: false\n                                    }\n                                }\n                            },\n                            data: [\n                            ]\n\n                        }\n                    },\n                    grid: {\n                        x: 24,\n                        y: 40,\n                        x2: 20,\n                        y2: 80\n                    }\n                },\n                wholeEmotion: {},\n                finishTime: null,\n                emotionEvent: {\n                    \"0\": this.$t('m.report.laDoor'),\n                    \"1\": this.$t('m.report.raDoor'),\n                    \"2\": this.$t('m.report.lbDoor'),\n                    \"3\": this.$t('m.report.rbDoor'),\n                    \"6\": this.$t('m.report.trunk')\n                }\n            }\n        },\n        mounted() {\n            // coordinatetype 1,WGS84全球坐标系  2,GCJ02火星坐标系  3,BD09百度坐标系\n            httpClient.get('/api/v1/clouddrive/report/detail?coordinatetype=1&orderid=' + this.$route.params.id).then(response => {\n                if (response.data.code == 200) {\n                    this.userDetail = response.data.data.userDetailDTO ?  response.data.data.userDetailDTO : {};\n                    this.driveInfo = response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO;\n                    this.area = {\n                        area: response.data.data.cloudDriveReportDTO.tracesDataDTOList,\n                        center: response.data.data.cloudDriveReportDTO.tracesDataDTOList[0]\n                    };\n                    let time = response.data.data.userDetailDTO ? this.calDriveAge(response.data.data.userDetailDTO.driveLicenseInitDate) : 0;\n                    this.driveAge = time.year + this.$t('m.report.year') + time.month + this.$t('m.report.month');\n                    this.getEmotion(\n                        response.data.data.cloudDriveReportDTO.emotionList,\n                        response.data.data.cloudDriveReportDTO.accelerationDataList,\n                        response.data.data.cloudDriveReportDTO.alarmPushDTOList ? response.data.data.cloudDriveReportDTO.alarmPushDTOList.events : []);\n                    this.baseData = response.data.data.cloudDriveReportDTO.accelerationDataList;\n                    this.emotionData = response.data.data.cloudDriveReportDTO.alarmPushDTOList;\n                    this.emotionTime = response.data.data.cloudDriveReportDTO.startUp;\n                    this.speedTime = {\n                        \"high\": response.data.data.cloudDriveReportDTO.highSpeed,\n                        \"low\": response.data.data.cloudDriveReportDTO.lowSpeed\n                    };\n                    this.accleTime = {\n                        \"high\": response.data.data.cloudDriveReportDTO.accelerate,\n                        \"low\": response.data.data.cloudDriveReportDTO.brake\n                    };\n                    this.turnTime = response.data.data.cloudDriveReportDTO.swerve;\n                    this.bumpTime = response.data.data.cloudDriveReportDTO.bumpy;\n                    this.wholeEmotion = response.data.data.cloudDriveReportDTO.wholeEmotionDTO;\n                    this.finishTime = response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO.reportFinishTime;\n                    this.getSpeed(\n                        response.data.data.cloudDriveReportDTO.emotionList,\n                        response.data.data.cloudDriveReportDTO.speedList,\n                    );\n                    this.getAcceleration(\n                        response.data.data.cloudDriveReportDTO.emotionList,\n                        response.data.data.cloudDriveReportDTO.accelerationDataList,\n                        response.data.data.cloudDriveReportDTO.clouddriveTripDataDTO.maxAcceleration\n                    );\n                    this.getTurn(response.data.data.cloudDriveReportDTO.emotionList,\n                        response.data.data.cloudDriveReportDTO.turnDataDTOS);\n\n                    //碰撞点为0， 则不现实整个模块\n                    response.data.data.cloudDriveReportDTO.bumpy && response.data.data.cloudDriveReportDTO.bumpy.durationTime &&\n                    response.data.data.cloudDriveReportDTO.bumpy.durationTime != 0 ?\n                        this.getPong(\n                            response.data.data.cloudDriveReportDTO.emotionList,\n                            response.data.data.cloudDriveReportDTO.accelerationDataList,\n                            response.data.data.cloudDriveReportDTO.alarmPushDTOList ? response.data.data.cloudDriveReportDTO.alarmPushDTOList.bumpyEvents : []\n                        )\n                        :\n                        '';\n\n                    response.data.data.surveyFeedbackDTO ?\n                        this.filterSurvey(response.data.data.surveyFeedbackDTO)\n                        :\n                        null;\n                }\n            });\n        },\n        methods: {\n            initBaseData(driveData) {\n                let driveDatas = [];\n                let driveEmotion = [];\n                driveData.map(item => {\n                    driveDatas.push(getDateString3(item.driveTime));\n                    driveEmotion.push(0)\n                });\n                return {\n                    driveDatas,\n                    driveEmotion\n                };\n            },\n            getDateString(time) {\n                return getDateString(time)\n            },\n            getPong(data, driveData, eventData) {\n                let eventList = [];\n                eventData.map(item => {\n                    eventList.push({\n                        xAxis: getDateString3(item.time),\n                        tooltip: {\n                            trigger: 'item'\n                        },\n                        yAxis: 20\n                    })\n                });\n                let {emotionList, area, line } = this.initEmotion(data);\n                this.pong.series.markArea.data = area;\n                let {driveDatas, driveEmotion} = this.initBaseData(driveData);\n                this.pong.xAxis.data = driveDatas;\n                this.pong.series.data = emotionList;\n                this.pong.series.markLine.data = line;\n                this.pong.series.markPoint.data = eventList;\n                echarts.init(document.getElementById('pong')).setOption(this.pong)\n            },\n            getTurn(data,accData) {\n                let accList = [];\n                let yList = [];\n                let { area, line } = this.defaultEmotion(data);\n                accData.map(item => {\n                    accList.push(getDateString3(item.driveTime));\n                    yList.push(item.turn)\n                });\n                this.turns.series.markArea.data = area;\n                this.turns.series.markLine.data = line;\n                this.turns.xAxis.data = accList;\n                this.turns.series.data = yList;\n                echarts.init(document.getElementById('turn')).setOption(this.turns)\n            },\n            filterTime(mis) {\n                return Math.ceil((mis % (1000 * 60 * 60)) / (1000 * 60));\n            },\n            filterSurvey(data) {\n                this.surveyList.map(item => {\n                    data.map(it => {\n                       if (it.subjectId == item.id) {\n                           item['result'] = it.questionnaireContent;\n                       }\n                    });\n                });\n            },\n            initEmotion(data, type) {\n                let emotionList =[];\n                let area = [];\n                let line = [];\n                data.map(item => {\n                    emotionList.push(item.emotion);\n                    if (item.emotion == 10 || item.emotion == 0) {\n                        line.push([\n                            {\n                                xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                                yAxis: type == 'speed' ? 50 : 20,\n                                itemStyle: {\n                                    color: \"#fbdc7f\",\n                                    width: 2\n                                },\n                                tooltip: {\n                                    trigger: 'item',\n                                    formatter: (data) => {\n                                        return (data.xAxis ? data.xAxis : data.data.xAxis ) + \"<br />\" + this.emotionStatus[\"10\"]\n                                    }\n                                }\n                            },\n                            {\n                                yAxis: type == 'speed' ? 50 : 20,\n                                xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n                            }\n                        ])\n                    } else {\n                        area.push([{\n                            value: item.emotion,\n                            xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                            temp: item.emotion,\n                            yAxis: type == 'speed' ? (item.emotion == 20 ? 50 : 0) : (item.emotion == 20 ? 20 : 0),\n                            itemStyle: {\n                                color: item.emotion == 20  ? \"#a2dab6\" : (item.emotion == 30 ? \"#f8b2b1\" : \"#fbdc7f\")\n                            },\n                            tooltip: {\n                                trigger: 'item',\n                                formatter: (data) => {\n                                    return getDateString3(item.emotionStartTime) + \"<br />\" + this.emotionStatus[data.value]\n                                }\n                            }\n                        }, {\n                            tooltip: {\n                                trigger: 'item',\n                                formatter: function (data) {\n                                    return data.value\n                                }\n                            },\n                            value: item.emotion,\n                            yAxis: type == 'speed' ? (item.emotion == 20 ? 100 : 50) : (item.emotion == 20  ? 30 : 20),\n                            xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n\n                        }])\n                    }\n                });\n                return {\n                    emotionList,\n                    area,\n                    line\n                }\n            },\n            defaultEmotion(data, max) {\n                let emotionList =[];\n                let area = [];\n                let line = [];\n                data.map(item => {\n                    emotionList.push(item.emotion);\n                    if (item.emotion == 10 || item.emotion == 0) {\n                        line.push([\n                            {\n                                xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                                yAxis: 0,\n                                itemStyle: {\n                                    color: \"#fbdc7f\",\n                                    width: 2\n                                },\n                            },\n                            {\n                                yAxis: 0,\n                                xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n                            }\n                        ])\n                    } else {\n                        area.push([{\n                            xAxis: item.emotionStartTime ? getDateString3(item.emotionStartTime) : 0,\n                            temp: item.emotion,\n                            yAxis: max ? (item.emotion == 20 ? 0 : Number('-' + max)) : (item.emotion == 20 ? 0 : -10),\n                            itemStyle: {\n                                color: item.emotion == 20  ? \"#a2dab6\" : (item.emotion == 30 ? \"#f8b2b1\" : \"#fbdc7f\")\n                            },\n                        }, {\n                            yAxis: max ? (item.emotion == 20 ? max : 0) : (item.emotion == 20 ? 10 : 0),\n                            xAxis:item.emotionEndTIme ? getDateString3(item.emotionEndTIme) : 0\n\n                        }])\n                    }\n                });\n                return {\n                    emotionList,\n                    area,\n                    line\n                }\n            },\n            getAcceleration(data, accData, maxAcc) {\n                let { area, line } = this.defaultEmotion(data, Math.ceil(maxAcc));\n                let accList = [];\n                let yList = [];\n                accData.map(item => {\n                    accList.push(getDateString3(item.driveTime));\n                    yList.push(item.acceleration)\n                });\n                this.accele.yAxis.min = \"-\" + Math.ceil(Number(maxAcc));\n                this.accele.yAxis.max = Math.ceil(Number(maxAcc));\n                this.accele.yAxis.interval = Math.ceil(Number(maxAcc));\n                this.accele.series.markArea.data = area;\n                this.accele.series.markLine.data = line;\n                this.accele.xAxis.data = accList;\n                this.accele.series.data = yList;\n                echarts.init(document.getElementById('acceleration')).setOption(this.accele)\n            },\n            getSpeed(data, speedData) {\n                let { area, line } = this.initEmotion(data, 'speed');\n                let speedList = [];\n                let yList = [];\n                speedData.map(item => {\n                    speedList.push(getDateString3(item.driveTime));\n                    yList.push(item.speed)\n                });\n                this.speed.series.markArea.data = area;\n                this.speed.series.markLine.data = line;\n                this.speed.xAxis.data = speedList;\n                this.speed.series.data = yList;\n                echarts.init(document.getElementById('speed')).setOption(this.speed)\n            },\n            getEmotion(data, driveData, eventData) {\n                let eventList = [];\n                eventData.map(item => {\n                    eventList.push({\n                        xAxis: getDateString3(item.time),\n                        name: this.emotionEvent[String(item.content)],\n                        yAxis: 20,\n                        tooltip: {\n                            trigger: 'item',\n                            formatter: function (data) {\n                                return data.data.xAxis + \"<br />\" + data.name\n                            }\n                        }\n                    })\n                });\n                let {emotionList, area, line } = this.initEmotion(data);\n                this.emotion.series.markArea.data = area;\n                let {driveDatas, driveEmotion} = this.initBaseData(driveData);\n                this.emotion.xAxis.data = driveDatas;\n                this.emotion.series.data = driveEmotion;\n                this.emotion.series.markLine.data = line;\n                this.emotion.series.markPoint.data = eventList;\n                echarts.init(document.getElementById('emotion')).setOption(this.emotion)\n\n            },\n            calAge(bir) {\n                return calAge(bir);\n            },\n            calDriveAge(time) {\n                return calDriveAge(time)\n            },\n            getDateString2(time) {\n                return getDateString2(time)\n            },\n            timeInspect(time1, time2){\n                return timeInspect(time1, time2)\n            }\n        }\n    }\n</script>\n"],"sourceRoot":"src/views/dashboard/testDrive"}]}