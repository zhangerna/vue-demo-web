{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js!/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/component/testPointGMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/component/testPointGMap.vue","mtime":1569392859000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _getIterator from \"/Users/nonda/nonda/nonda-saas-web/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport httpClient from \"@/utils/httpclient\";\nimport google from \"google\";\nimport model from \"@/components/model\";\nexport default {\n  name: 'drawMap',\n  props: ['data'],\n  components: {\n    model: model\n  },\n  watch: {\n    data: function data(newV) {\n      this.parkingName = newV.parkingName;\n      this.address = newV.address;\n      this.areaCoord = newV.areaCoordinate;\n      this.centerCoordinate = newV.centerCoordinate;\n      this.user = newV.parkingContactName;\n      this.phone = newV.parkingContactPhone;\n      this.parkingDes = newV.parkingAddressDesc;\n      this.initEdit();\n    },\n    parkingName: function parkingName(newV) {\n      this.parkingName = this.trim(newV);\n      this.checkInput();\n    },\n    address: function address(newV) {\n      this.address = this.trim(newV);\n      this.checkInput();\n    }\n  },\n  data: function data() {\n    return {\n      user: '',\n      parkingDes: \"\",\n      disable: true,\n      mapObj: null,\n      infoWindow: null,\n      geocoders: null,\n      drawManager: null,\n      polygonCompete: null,\n      phone: '',\n      locations: [],\n      parkingName: '',\n      centerCoordinate: null,\n      address: '',\n      show: false,\n      content: \"\",\n      btnGroup: {\n        btnSecond: this.$t('m.tip.b_ok')\n      },\n      areaCoord: null,\n      bermudaTriangle: null,\n      isMapChanged: false\n    };\n  },\n  mounted: function mounted() {\n    if (!this.$route.params.id) {\n      this.initialize();\n    }\n  },\n  methods: {\n    initEdit: function initEdit() {\n      this.disable = false;\n      var latlng = this.centerCoordinate.split(\" \");\n      this.mapObj = new google.maps.Map(document.getElementById('map-canvas'), {\n        zoom: 15,\n        center: {\n          lat: Number(latlng[1]),\n          lng: Number(latlng[0])\n        }\n      });\n      var centerControDiv = document.createElement('div');\n      this.centerControl(centerControDiv);\n      centerControDiv.index = 1;\n      this.mapObj.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControDiv);\n      this.geocoders = new google.maps.Geocoder();\n      var triangleCoords = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(this.areaCoord), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          triangleCoords.push({\n            lat: Number(item.split(\",\")[1]),\n            lng: Number(item.split(\",\")[0])\n          });\n        } // Construct the polygon.\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.bermudaTriangle = new google.maps.Polygon({\n        paths: triangleCoords,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35\n      });\n      this.bermudaTriangle.setMap(this.mapObj);\n      this.initDrawManager();\n    },\n    hideTip: function hideTip() {\n      this.show = false;\n      this.disable = true;\n    },\n    changeStatus: function changeStatus() {\n      this.checkInput();\n    },\n    centerControl: function centerControl(controlDiv) {\n      var _this = this;\n\n      // Set CSS for the control border.\n      var controlUI = document.createElement('div');\n      controlUI.style.backgroundColor = '#fff';\n      controlUI.style.border = '2px solid #fff';\n      controlUI.style.borderRadius = '2px';\n      controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';\n      controlUI.style.cursor = 'pointer';\n      controlUI.style.marginTop = '10px';\n      controlUI.style.marginBottom = '22px';\n      controlUI.style.textAlign = 'center';\n      controlUI.title = 'Click to draw a geo fence';\n      controlDiv.appendChild(controlUI); // Set CSS for the control interior.\n\n      var controlText = document.createElement('div');\n      controlText.style.color = 'rgb(25,25,25)';\n      controlText.style.fontFamily = 'Roboto,Arial,sans-serif';\n      controlText.style.fontSize = '16px';\n      controlText.style.lineHeight = '38px';\n      controlText.style.paddingLeft = '5px';\n      controlText.style.paddingRight = '5px';\n      controlText.innerHTML = this.$t('m.map.start_draw');\n      controlUI.appendChild(controlText);\n      var controlUI1 = document.createElement('div');\n      controlUI1.style.display = 'none';\n      controlUI1.style.backgroundColor = '#fff';\n      controlUI1.style.border = '2px solid #fff';\n      controlUI1.style.borderRadius = '2px';\n      controlUI1.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';\n      controlUI1.style.cursor = 'pointer';\n      controlUI1.style.marginTop = '10px';\n      controlUI1.style.marginBottom = '22px';\n      controlUI1.style.textAlign = 'center';\n      controlUI1.title = 'Click to redraw the geo fence';\n      controlDiv.appendChild(controlUI1); // Set CSS for the control interior.\n\n      var controlText1 = document.createElement('div');\n      controlText1.style.color = 'rgb(25,25,25)';\n      controlText1.style.fontFamily = 'Roboto,Arial,sans-serif';\n      controlText1.style.fontSize = '16px';\n      controlText1.style.lineHeight = '38px';\n      controlText1.style.paddingLeft = '5px';\n      controlText1.style.paddingRight = '5px';\n      controlText1.innerHTML = this.$t('m.map.redraw');\n      controlUI1.appendChild(controlText1); // Setup the click event listeners: simply set the map to Chicago.\n\n      var flightPath = new google.maps.Polyline({\n        strokeColor: \"#0000FF\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2\n      });\n      flightPath.setMap(this.mapObj);\n      controlUI.addEventListener('click', function () {\n        controlUI.style.display = 'none';\n        controlUI1.style.display = 'block';\n\n        _this.drawManager.setOptions({\n          drawingMode: 'polygon',\n          fillColor: '#fff'\n        });\n\n        _this.$route.params.id ? _this.bermudaTriangle.setMap(null) : '';\n      });\n      controlUI1.addEventListener('click', function () {\n        _this.polygonCompete.setMap(null);\n\n        _this.drawManager.setOptions({\n          drawingMode: 'polygon',\n          fillColor: '#fff'\n        });\n      });\n    },\n    initDrawManager: function initDrawManager() {\n      var _this2 = this;\n\n      this.drawManager = new google.maps.drawing.DrawingManager({\n        drawingMode: '',\n        drawingControl: false,\n        //设置图形显示样式\n        circleOptions: {\n          fillColor: '#ffff00',\n          fillOpacity: 1,\n          strokeWeight: 5,\n          clickable: false,\n          editable: true,\n          zIndex: 1\n        },\n        polygonOptions: {\n          strokeColor: \"#FF0000\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: \"#FF0000\",\n          fillOpacity: 0.35,\n          editable: true\n        }\n      });\n      this.drawManager.setMap(this.mapObj);\n      google.maps.event.addListener(this.drawManager, 'polygoncomplete', function (polygon) {\n        _this2.polygonCompete = polygon;\n\n        _this2.drawManager.setOptions({\n          drawingMode: ''\n        });\n      });\n      google.maps.event.addListener(this.drawManager, 'polygoncomplete', function (polygon) {\n        var array = polygon.getPath().getArray();\n\n        _this2.showLonLat(array);\n      });\n    },\n    initialize: function initialize() {\n      var _this3 = this;\n\n      var mapOptions = {\n        zoom: 15\n      };\n      this.mapObj = new google.maps.Map(document.getElementById(\"map-canvas\"), mapOptions);\n      this.infoWindow = new google.maps.InfoWindow();\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          var pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n\n          _this3.infoWindow.setPosition(pos);\n\n          _this3.infoWindow.setContent('Current Location');\n\n          _this3.mapObj.setCenter(pos);\n\n          var centerControDiv = document.createElement('div');\n\n          _this3.centerControl(centerControDiv);\n\n          centerControDiv.index = 1;\n          _this3.geocoders = new google.maps.Geocoder();\n\n          _this3.mapObj.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControDiv);\n        }, function () {\n          this.handleError(true);\n        });\n      } else {\n        this.handleError(false);\n      }\n\n      this.initDrawManager();\n    },\n    handleError: function handleError(status) {\n      this.infoWindow.setPosition(this.mapObj.getCenter());\n      this.infoWindow.setContent(status ? 'Error: The Geolocation service failed.' : 'Error: Your browser doesn\\'t support geolocation.');\n      this.infoWindow.open(this.mapObj);\n    },\n    showTip: function showTip(data) {\n      this.show = true;\n      this.content = this.$t('m.map.warn_repeat', {\n        data: data\n      });\n    },\n    getLocate: function getLocate() {\n      var _this4 = this;\n\n      this.checkInput();\n\n      if (this.address) {\n        this.geocoders.geocode({\n          'address': this.address\n        }, function (results, status) {\n          if (status == \"OK\") {\n            _this4.mapObj.setCenter(results[0].geometry.location);\n\n            new google.maps.Marker({\n              map: _this4.mapObj,\n              position: results[0].geometry.location,\n              icon: {\n                url: \"https://cdn.shopify.com/s/files/1/0703/1149/files/Location.png?807016\",\n                scaledSize: new google.maps.Size(30, 30)\n              }\n            });\n          } else {\n            console.log('Geocode was not successful for the following reason: ' + status);\n          }\n        });\n      }\n    },\n    trim: function trim(str) {\n      return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    },\n    checkInput: function checkInput() {\n      if (!this.parkingName) {\n        this.disable = true;\n        return;\n      }\n\n      if (!this.user) {\n        this.disable = true;\n        return;\n      }\n\n      if (!this.phone) {\n        this.disable = true;\n        return;\n      }\n\n      if (!this.address) {\n        this.disable = true;\n        return;\n      }\n\n      this.disable = false;\n    },\n    showLonLat: function showLonLat(arry) {\n      var _this5 = this;\n\n      var locations = [];\n      arry.map(function (item) {\n        locations.push(item);\n      });\n      this.areaCoord = locations;\n      locations[arry.length] = arry[0];\n      httpClient.post('/api/v1/lot/isRepeated', {\n        parkingName: this.parkingName,\n        address: this.address,\n        areaCoordinate: locations,\n        id: this.$route.params.id,\n        lotType: 2\n      }).then(function (response) {\n        if (response.data.data != null) {\n          _this5.isMapChanged = true;\n\n          _this5.showTip(response.data.data);\n        } else {\n          _this5.checkInput();\n\n          _this5.isMapChanged = true;\n        }\n      });\n    },\n    submitData: function submitData() {\n      var _this6 = this;\n\n      this.checkInput();\n      var link = '';\n\n      if (!this.data) {\n        link = '/api/v1/clouddrive/parkinglot/insert';\n      } else {\n        link = '/api/v1/clouddrive/parkinglot/update';\n      }\n\n      if (!this.isMapChanged && this.areaCoord) {\n        var data = this.areaCoord.map(function (item) {\n          return {\n            lng: item.split(\",\")[0],\n            lat: item.split(\",\")[1]\n          };\n        });\n        this.areaCoord = data;\n      }\n\n      httpClient.post(link, {\n        parkingName: this.parkingName,\n        address: this.address,\n        areaCoordinate: this.areaCoord,\n        id: this.$route.params.id,\n        parkingAddressDesc: this.parkingDes,\n        parkingContactName: this.user,\n        parkingContactPhone: this.phone\n      }).then(function (response) {\n        if (response.data.code == 200) {\n          _this6.$router.push('/test-drive/test-point');\n        } else {\n          _this6.show = true;\n          _this6.content = \"Lot Name: \".concat(response.data.data, \" Existed.\");\n        }\n      });\n    }\n  }\n};",null]}