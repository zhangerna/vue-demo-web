{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js!/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/drawAmap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/drawAmap.vue","mtime":1569469511000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport httpClient from \"@/utils/httpclient\";\nimport { wgs84ToGcjo2, gcj02towgs84 } from \"@/utils/coordtransform\";\nimport AMap from 'AMap';\nimport model from \"./model\";\nexport default {\n  name: 'drawMap',\n  props: ['data'],\n  components: {\n    model: model\n  },\n  watch: {\n    data: function data(newV) {\n      this.parkingName = newV.parkingName;\n      this.address = newV.address;\n      this.areaCoord = newV.areaCoordinate;\n      this.centerCoordinate = newV.centerCoordinate;\n      this.user = newV.parkingContactName;\n      this.phone = newV.parkingContactPhone;\n      this.parkingDes = newV.parkingAddressDesc;\n      this.initEdit();\n    },\n    parkingName: function parkingName(newV) {\n      this.parkingName = this.trim(newV);\n      this.checkInput();\n    },\n    address: function address(newV) {\n      this.address = this.trim(newV);\n      this.checkInput();\n    }\n  },\n  mounted: function mounted() {\n    if (!this.$route.params.id) {\n      this.initialize();\n    }\n  },\n  data: function data() {\n    return {\n      user: '',\n      parkingDes: \"\",\n      phone: '',\n      disable: true,\n      mapObj: null,\n      infoWindow: null,\n      geocoders: null,\n      drawManager: null,\n      polygonCompete: [],\n      locations: [],\n      parkingName: '',\n      centerCoordinate: null,\n      address: '',\n      show: false,\n      content: \"\",\n      btnGroup: {\n        btnSecond: this.$t('m.tip.b_ok')\n      },\n      areaCoord: null,\n      bermudaTriangle: null,\n      isMapChanged: false,\n      drawButton: this.$t('m.map.start_draw'),\n      markers: [],\n      roadLayer: null\n    };\n  },\n  methods: {\n    changeMapType: function changeMapType(type) {\n      if (type == 'default') {\n        this.roadLayer.hide();\n      } else {\n        this.roadLayer.show();\n      }\n    },\n    initEdit: function initEdit() {\n      this.drawButton = this.$t('m.map.redraw');\n      var temp = this.centerCoordinate.split(\" \");\n      var lnglat = wgs84ToGcjo2(temp[0], temp[1]);\n      this.mapObj = new AMap.Map('map-canvas', {\n        center: lnglat,\n        zoom: 17\n      });\n      this.roadLayer = new AMap.TileLayer.RoadNet({});\n      this.mapObj.add(this.roadLayer);\n      var area2 = [];\n      this.areaCoord.map(function (item) {\n        var temp = item.split(\",\");\n        area2.push(wgs84ToGcjo2(Number(temp[0]), Number(temp[1])));\n      });\n      this.initPolygon(area2);\n    },\n    changeStatus: function changeStatus() {\n      this.checkInput();\n    },\n    initPolygon: function initPolygon(area2) {\n      this.polygonCompete = new AMap.Polygon({\n        path: area2,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35\n      });\n      this.mapObj.add(this.polygonCompete);\n    },\n    drawPolygon: function drawPolygon() {\n      var _this = this;\n\n      if (window.mouseTool) {\n        this.mapObj.remove(this.polygonCompete);\n        this.polygonCompete = [];\n        window.mouseTool.close(true);\n      }\n\n      window.mouseTool = new AMap.MouseTool(this.mapObj);\n      window.mouseTool.polygon({\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#FF0000\",\n        fillOpacity: 0.35,\n        editable: true\n      });\n      window.mouseTool.on('draw', function (event) {\n        // this.polygonCompete.push(event.obj);\n        _this.drawButton = _this.$t('m.map.redraw');\n        var array = event.obj.getPath();\n\n        _this.showLonLat(array);\n\n        window.mouseTool.close(true);\n      });\n    },\n    showLonLat: function showLonLat(arry) {\n      var _this2 = this;\n\n      console.log(arry);\n      var locations = [];\n      var outChina = false;\n      arry.map(function (item) {\n        if (gcj02towgs84(item.lng, item.lat).lng) {\n          locations.push(gcj02towgs84(item.lng, item.lat));\n        } else {\n          outChina = true;\n        }\n      });\n\n      if (outChina) {\n        this.content = this.$t(\"m.map.out_china\");\n        this.show = true;\n        return;\n      }\n\n      locations[arry.length] = locations[0];\n      this.initPolygon(arry);\n      this.areaCoord = locations;\n      httpClient.post('/api/v1/lot/isRepeated', {\n        parkingName: this.parkingName,\n        address: this.address,\n        areaCoordinate: locations,\n        id: this.$route.params.id,\n        lotType: 1\n      }).then(function (response) {\n        if (response.data.data != null) {\n          _this2.isMapChanged = true;\n\n          _this2.showTip(response.data.data);\n        } else {\n          _this2.checkInput();\n\n          _this2.isMapChanged = true;\n        }\n      });\n    },\n    hideTip: function hideTip() {\n      this.show = false;\n      this.disable = true;\n    },\n    initialize: function initialize() {\n      this.mapObj = new AMap.Map('map-canvas', {\n        zoom: 15\n      });\n      this.roadLayer = new AMap.TileLayer.RoadNet({});\n      this.mapObj.add(this.roadLayer);\n    },\n    getLocate: function getLocate() {\n      var _this3 = this;\n\n      this.checkInput();\n\n      if (this.address) {\n        this.mapObj.remove(this.markers);\n        this.geocoders = new AMap.Geocoder();\n        this.geocoders.getLocation(this.address, function (status, result) {\n          if (status === 'complete' && result.geocodes.length) {\n            _this3.markers = new AMap.Marker({\n              position: result.geocodes[0].location,\n              icon: new AMap.Icon({\n                image: \"https://cdn2.shopify.com/s/files/1/0703/1149/files/Location_03580bd1-f466-4803-a69e-720a098b08a5.svg?828688\",\n                size: new AMap.Size(60, 60),\n                imageSize: new AMap.Size(20, 30)\n              })\n            });\n\n            _this3.mapObj.add(_this3.markers);\n\n            _this3.mapObj.setFitView(_this3.markers);\n          }\n        });\n      }\n    },\n    showTip: function showTip(data) {\n      this.show = true;\n      this.content = this.$t('m.map.warn_repeat', {\n        data: data\n      });\n    },\n    trim: function trim(str) {\n      return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    },\n    checkInput: function checkInput() {\n      if (!this.parkingName) {\n        this.disable = true;\n        return;\n      }\n\n      if (!this.user) {\n        this.disable = true;\n        return;\n      }\n\n      if (!this.phone) {\n        this.disable = true;\n        return;\n      }\n\n      if (!this.areaCoord || this.areaCoord.length == 0) {\n        this.disable = true;\n        return;\n      }\n\n      if (!this.address) {\n        this.disable = true;\n        return;\n      }\n\n      this.disable = false;\n    },\n    submitData: function submitData() {\n      var _this4 = this;\n\n      this.checkInput();\n      var link = '';\n\n      if (!this.data) {\n        link = '/api/v1/lot/insert';\n      } else {\n        link = '/api/v1/lot/update';\n      }\n\n      if (!this.isMapChanged && this.areaCoord) {\n        var data = this.areaCoord.map(function (item) {\n          return {\n            lng: item.split(\",\")[0],\n            lat: item.split(\",\")[1]\n          };\n        });\n        this.areaCoord = data;\n      }\n\n      httpClient.post(link, {\n        parkingName: this.parkingName,\n        address: this.address,\n        areaCoordinate: this.areaCoord,\n        id: this.$route.params.id,\n        parkingAddressDesc: this.parkingDes,\n        parkingContactName: this.user,\n        parkingContactPhone: this.phone\n      }).then(function (response) {\n        if (response.data.code == 200) {\n          _this4.$router.push('/inventory/lots');\n        } else {\n          _this4.show = true;\n          _this4.content = \"Lot Name: \".concat(response.data.data, \" Existed.\");\n        }\n      });\n    }\n  }\n};",null]}