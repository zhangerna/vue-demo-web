{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js!/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/socket.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/socket.vue","mtime":1561104782000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport httpClient from \"@/utils/httpclient\";\nimport { getDateString } from \"@/utils/date\";\nimport SockJs from 'sockjs-client';\nexport default {\n  name: \"socketWarn\",\n  data: function data() {\n    return {\n      topics: ['queue.saas.alertPushMsgTopic', 'queue.saas.checkInRecordTopic'],\n      socketUrl: process.env.VUE_APP_SOCKET_URL,\n      maxConnect: 10,\n      connect: 0,\n      data: null,\n      alertData: [],\n      sockObj: null,\n      timeOut: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    httpClient.post('/api/v1/socketToken', {\n      topics: this.topics\n    }).then(function (response) {\n      if (response.data.data && response.data.code == 200) {\n        _this.$store.dispatch('save_socket_data', response.data.data);\n\n        _this.initSocket(response.data.data);\n      }\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.sockObj.close();\n    clearTimeout(this.timeOut);\n  },\n  methods: {\n    hide: function hide(key) {\n      this.alertData.splice(key, 1);\n    },\n    alertMessage: function alertMessage(message) {\n      var _this2 = this;\n\n      var year = message.year ? message.year : 'N/A';\n      var make = message.make ? message.make : 'N/A';\n      var model = message.model ? message.model : 'N/A';\n      var vehicleInfo = !message.year && !message.make && !message.model ? 'N/A' : \"\".concat(year, \" \").concat(make, \" \").concat(model);\n      var stockNum = message.stockNum ? message.stockNum : 'N/A';\n      var createTime = message.createTime ? getDateString(message.createTime) : 'N/A';\n      this.alertData.push({\n        title: message.alertTypeName,\n        id: message.alertId,\n        desc: \"\".concat(stockNum, \" | \").concat(vehicleInfo, \" \").concat(message.alertDescription, \" \").concat(createTime)\n      });\n      setTimeout(function () {\n        _this2.hide(_this2.alertData.length - 1);\n      }, 100000);\n    },\n    filterMessage: function filterMessage(data) {\n      console.log(\"-----------\");\n      console.log(data);\n      var tempData = [{\n        user: data.firstName + \" \" + data.lastName,\n        action: data.available == '1' ? 'has just checked in' : 'has just checked out',\n        vehicle: \"\".concat(data.year ? data.year : 'N/A', \" \").concat(data.make ? data.make : 'N/A', \" \").concat(data.model ? data.model : 'N/A'),\n        time: getDateString(Number(data.createTime)),\n        vehicleId: data.vehicleId,\n        userId: data.checkUserId\n      }];\n      this.$store.dispatch('save_log_list', tempData);\n    },\n    initSocket: function initSocket(respData) {\n      var self = this;\n      this.sockObj = new SockJs(this.socketUrl + '/echo/?token=' + encodeURIComponent(respData.token));\n\n      this.sockObj.onopen = function () {\n        self.connect += 1;\n      };\n\n      this.sockObj.onmessage = function (e) {\n        var message = JSON.parse(e.data);\n\n        switch (message.topic) {\n          case self.topics[0] + respData.storeId + respData.tenantId:\n            self.alertMessage(JSON.parse(message.message));\n            break;\n\n          case self.topics[1]:\n            console.log(\"hehe----------\");\n            self.filterMessage(JSON.parse(message.message));\n\n          default:\n            break;\n        }\n      };\n\n      this.sockObj.onclose = function () {\n        if (self.connect < self.maxConnect) {\n          self.timeOut = setTimeout(function () {\n            self.initSocket(self.$store.getters.socketData);\n          }, self.connect * 20000);\n        }\n      };\n    }\n  }\n};",null]}