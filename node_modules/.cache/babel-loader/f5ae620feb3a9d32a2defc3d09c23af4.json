{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js!/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/vehicle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/views/dashboard/dashboardMain/vehicle.vue","mtime":1569469066000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.search\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport httpclient from '@/utils/httpclient';\nimport myMap from '@components/map';\nimport searchMap from '@components/searchMap';\nexport default {\n  name: \"vehicle\",\n  components: {\n    myMap: myMap,\n    searchMap: searchMap\n  },\n  inject: [\"reload\"],\n  data: function data() {\n    return {\n      selected_parking: null,\n      selected_battery: null,\n      selected_offline: null,\n      selected_drive: null,\n      parking_list: {\n        label: '',\n        type: '',\n        key: '',\n        list: []\n      },\n      battery_list: {\n        label: '',\n        type: '',\n        key: '',\n        list: []\n      },\n      offline_list: {\n        label: '',\n        type: '',\n        key: '',\n        list: []\n      },\n      drive_list: {\n        label: '',\n        type: '',\n        key: '',\n        list: []\n      },\n      vehicleInsertId: null,\n      vehicleColor: null,\n      vehicleType: 0,\n      insertTip: false,\n      insertStatus: '',\n      insertTipContent: '',\n      vehicleTypeList: [{\n        c: this.$t('m.common.c_new'),\n        y: \"1\"\n      }, {\n        c: this.$t('m.common.c_used'),\n        y: \"3\"\n      }, {\n        c: this.$t('m.common.c_demo'),\n        y: \"2\"\n      }, {\n        c: this.$t('m.common.test_drive'),\n        y: \"4\"\n      }],\n      showList: 'true',\n      searchGoogleMap: {},\n      searchGaodeMap: {},\n      tableFields: {\n        photoUrl: {\n          label: this.$t('m.vehicle.photo'),\n          class: 'text-center'\n        },\n        vehicle: {\n          label: this.$t('m.vehicle.vehicle'),\n          class: 'text-center'\n        },\n        battery: {\n          label: this.$t('m.common.voltage'),\n          class: 'text-center'\n        },\n        online: {\n          label: this.$t('m.common.line_status'),\n          class: 'text-center'\n        },\n        use: {\n          label: this.$t('m.common.use_status'),\n          class: 'text-center'\n        },\n        park: {\n          label: this.$t('m.common.lot'),\n          class: 'text-center'\n        },\n        price: {\n          label: this.$t('m.common.price') + this.$t('m.common.mon_type'),\n          class: 'text-center'\n        },\n        mileage: {\n          label: this.$t('m.vehicle.mileage') + this.$t('m.common.m_type'),\n          class: 'text-center'\n        },\n        inventory: {\n          label: this.$t('m.vehicle.inv_age'),\n          class: 'text-center'\n        },\n        daysIdle: {\n          label: this.$t('m.vehicle.day_idle'),\n          class: 'text-center'\n        },\n        action: {\n          label: this.$t('m.common.action'),\n          class: 'text-center'\n        }\n      },\n      countList: [20, 50, 100, 200],\n      countSize: 20,\n      data: null,\n      table: null,\n      showMap: false,\n      map: {},\n      rows: 0,\n      currentPage: 1,\n      total: 0,\n      perPage: 10,\n      showDelMap: false,\n      delId: '',\n      showEtip: false,\n      pageCount: 0,\n      gFData: [],\n      search: '',\n      queryData: {},\n      changedLanguage: false,\n      showChainTip: false,\n      colorList: [{\n        c: this.$t('m.colors.black'),\n        y: \"Black\"\n      }, {\n        c: this.$t('m.colors.white'),\n        y: 'White'\n      }, {\n        c: this.$t('m.colors.silver'),\n        y: 'Silver'\n      }, {\n        c: this.$t('m.colors.blue'),\n        y: 'Blue'\n      }, {\n        c: this.$t('m.colors.red'),\n        y: 'Red'\n      }, {\n        c: this.$t('m.colors.brown'),\n        y: 'Brown'\n      }, {\n        c: this.$t('m.colors.gold'),\n        y: 'Gold'\n      }, {\n        c: this.$t('m.colors.orange'),\n        y: 'Orange'\n      }, {\n        c: this.$t('m.colors.yellow'),\n        y: 'Yellow'\n      }, {\n        c: this.$t('m.colors.purple'),\n        y: 'Purple'\n      }, {\n        c: this.$t('m.colors.green'),\n        y: 'Green'\n      }, {\n        c: this.$t('m.colors.pink'),\n        y: 'Pink'\n      }, {\n        c: this.$t('m.colors.others'),\n        y: 'Others'\n      }]\n    };\n  },\n  mounted: function mounted() {\n    var self = this;\n    this.axiosApi(self, 1, this.$route.query.filters ? JSON.parse(this.$route.query.filters) : []);\n    this.getFilter();\n\n    if (this.$i18n.locale === 'en-US') {\n      this.changedLanguage = \"English\";\n    } else {\n      this.changedLanguage = 'Chinese';\n    }\n  },\n  methods: {\n    openChainTip: function openChainTip() {\n      this.showChainTip = true;\n    },\n    insertVehicleData: function insertVehicleData() {\n      var _this = this;\n\n      console.log(this.vehicleInsertId, this.vehicleColor, this.vehicleType);\n\n      if (this.vehicleInsertId && this.vehicleColor && this.vehicleType && this.vehicleType != 0) {\n        httpclient.post('/api/v1/clouddrive/vehicle/insert', {\n          carchainVehicleId: this.vehicleInsertId,\n          color: this.vehicleColor,\n          vehicleType: this.vehicleType\n        }).then(function (res) {\n          if (res.data.code == 200 && res.data.data.result) {\n            _this.insertStatus = _this.$t('m.cloud.insert_succ_title');\n            _this.insertTipContent = _this.$t('m.cloud.insert_succ_content');\n            _this.insertTip = true;\n          } else {\n            alert(res.data.data.content);\n          }\n        });\n      } else {\n        alert(\"请检查输入参数\");\n      }\n    },\n    letChildGetMap: function letChildGetMap() {\n      var _this2 = this;\n\n      //让子组件请求接口展示多点地图\n      var _search = [];\n\n      if (this.selected_parking) {\n        _search.push({\n          key: \"parking\",\n          value: [this.selected_parking]\n        });\n      }\n\n      if (this.selected_battery) {\n        _search.push({\n          key: \"battery\",\n          value: [this.selected_battery]\n        });\n      }\n\n      if (this.selected_offline) {\n        _search.push({\n          key: \"online\",\n          value: [this.selected_offline]\n        });\n      }\n\n      if (this.selected_drive) {\n        _search.push({\n          key: \"inUse\",\n          value: [this.selected_drive]\n        });\n      }\n\n      var link = '/api/v1/vehiclesearch/searchnewmap?searchText=' + this.search + '&source=&pageNo=1&pageSize=' + this.countSize;\n      httpclient.post(link, {\n        filters: _search\n      }).then(function (res) {\n        _this2.searchGaodeMap = res.data.data;\n        _this2.searchGoogleMap = res.data.data;\n      });\n    },\n    toggleMapList: function toggleMapList(shows) {\n      this.letChildGetMap();\n      this.showList = shows; // if (!shows) {\n      //     this.letChildGetMap();\n      // }\n    },\n    getFilter: function getFilter() {\n      var _this3 = this;\n\n      httpclient.post('/api/v1/vehiclesearch/filter').then(function (response) {\n        _this3.gFData = response.data.data;\n        var _data = response.data.data;\n        var parking_arr = [];\n\n        _data[0].filters.map(function (item) {\n          parking_arr.push({\n            text: item.key,\n            value: item.value\n          });\n        });\n\n        _this3.parking_list = {\n          label: _data[0].label,\n          type: _data[0].type,\n          key: _data[0].key,\n          list: parking_arr\n        };\n        var battery_arr = [];\n\n        _data[1].filters.map(function (item) {\n          battery_arr.push({\n            text: item.key,\n            value: item.value\n          });\n        });\n\n        _this3.battery_list = {\n          label: _data[1].label,\n          type: _data[1].type,\n          key: _data[1].key,\n          list: battery_arr\n        };\n        var offline_arr = [];\n\n        _data[2].filters.map(function (item) {\n          offline_arr.push({\n            text: item.key,\n            value: item.value\n          });\n        });\n\n        _this3.offline_list = {\n          label: _data[2].label,\n          type: _data[2].type,\n          key: _data[2].key,\n          list: offline_arr\n        };\n        var drive_arr = [];\n\n        _data[3].filters.map(function (item) {\n          drive_arr.push({\n            text: item.key,\n            value: item.value\n          });\n        });\n\n        _this3.drive_list = {\n          label: _data[3].label,\n          type: _data[3].type,\n          key: _data[3].key,\n          list: drive_arr\n        };\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    searchData: function searchData() {\n      var _search = [];\n\n      if (this.selected_parking) {\n        _search.push({\n          key: \"parking\",\n          value: [this.selected_parking]\n        });\n      }\n\n      if (this.selected_battery) {\n        _search.push({\n          key: \"battery\",\n          value: [this.selected_battery]\n        });\n      }\n\n      if (this.selected_offline) {\n        _search.push({\n          key: \"online\",\n          value: [this.selected_offline]\n        });\n      }\n\n      if (this.selected_drive) {\n        _search.push({\n          key: \"inUse\",\n          value: [this.selected_drive]\n        });\n      }\n\n      this.axiosApi(this, 1, _search);\n    },\n    axiosApi: function axiosApi(self, page, obj) {\n      var _this4 = this;\n\n      httpclient.post(\"/api/v1/vehiclesearch/searchnew?searchText=\".concat(this.search, \"&source=&pageNo=\").concat(page, \"&pageSize=10\"), {\n        filters: obj\n      }).then(function (response) {\n        self.data = response.data.data;\n\n        if (self.data) {\n          self.total = response.data.data.rowCount ? response.data.data.rowCount : 0;\n          self.currentPage = response.data.data.pageNo ? response.data.data.pageNo : 0;\n\n          _this4.filterData(self.data.vehicles);\n        } else {\n          self.total = 0;\n          self.currentPage = 0;\n\n          _this4.filterData([]);\n        }\n      }).catch(function (err) {\n        alert(err);\n      });\n    },\n    formatNumber: function formatNumber(nStr) {\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n\n      return x1 + x2;\n    },\n    changePage: function changePage(page) {\n      var self = this;\n      this.axiosApi(self, page, []);\n    },\n    apiDel: function apiDel() {\n      var _this5 = this;\n\n      httpclient.post('/api/v1/vehicle/delete', {\n        vehicleId: this.delId\n      }).then(function (response) {\n        if (response.data.code == 200) {\n          _this5.reload();\n\n          _this5.showDelMap = !_this5.showDelMap;\n        } else {\n          _this5.showEtip = true;\n        }\n      }).catch(function () {\n        _this5.showEtip = true;\n      });\n    },\n    showMapTip: function showMapTip(lat, lng, area, info) {\n      if (lat || area.length) {\n        this.map = {\n          lat: lat,\n          lng: lng,\n          area: area,\n          vehicleInfo: info\n        };\n        this.showMap = true;\n      }\n    },\n    format_number: function format_number(nStr) {\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n\n      return x1 + x2;\n    },\n    hideModal: function hideModal() {\n      // this.$refs['my-modal'].hide();\n      this.showDelMap = !this.showDelMap;\n    },\n    delData: function delData(id) {\n      this.delId = id;\n      this.showDelMap = true;\n    },\n    filterData: function filterData(data) {\n      var self = this;\n      this.table = data.map(function (item) {\n        var pack = item.outStatus == 1 ? item.parkingName : self.$t('m.vehicle_detail.off_lot');\n        var battery = null;\n        var batteryClass = null;\n\n        if (item.currentVoltage) {\n          var numBat = item.currentVoltage.toFixed(1);\n          battery = item.currentVoltage.toFixed(1) + ' V';\n          batteryClass = numBat <= 11.7 ? 'badge-danger' : numBat > 11.7 && numBat <= 12.1 ? 'badge-warning' : 'badge-success';\n        } else {\n          battery = \"N/A\";\n          batteryClass = 'badge-secondary';\n        }\n\n        var color = null;\n        self.colorList.map(function (value) {\n          //手动翻译车辆的颜色\n          if (item.color) {\n            if (item.color === value.y) {\n              color = value.c;\n            } else {\n              color = item.color;\n            }\n          } else {\n            color = 'N/A';\n          }\n        });\n        var onlineStatus = item.isOnline == 1 ? \"Online\" : item.isOnline == 3 ? 'N/A' : 'Offline';\n        var year = item.year ? item.year : 'N/A';\n        var make = item.make ? item.make : 'N/A';\n        var model = item.model ? item.model : 'N/A';\n        var alias = item.alias ? '- ' + item.alias : '';\n        var info = year == 'N/A' && make == 'N/A' && model == 'N/A' && alias == '' ? 'N/A' : year + ' ' + make + ' ' + model + ' ' + alias;\n        var trim = item.trim ? item.trim : 'N/A';\n        var colorTrim = color == 'N/A' && trim == 'N/A' ? 'N/A' : color + ' , ' + trim;\n        var lastFlameoutDay = null;\n\n        if (item.lastFlameoutDay || item.lastFlameoutDay == 0) {\n          lastFlameoutDay = item.lastFlameoutDay + self.$t('m.common.days');\n        } else {\n          lastFlameoutDay = 'N/A';\n        }\n\n        var _mileage = null; //距离单位转换\n\n        if (item.currentMileage) {\n          if (self.changedLanguage === 'English') {\n            _mileage = self.format_number((item.currentMileage * 0.0006214).toFixed(0));\n          } else {\n            _mileage = self.format_number((item.currentMileage / 1000).toFixed(0));\n          }\n        } else {\n          _mileage = 'N/A';\n        }\n\n        return {\n          \"photoUrl\": item.photoUrl ? item.photoUrl : require(\"@/assets/pages-img/placeholder.svg\"),\n          \"vehicle\": info,\n          \"colorTrim\": colorTrim,\n          \"stock\": item.stockNumber ? item.stockNumber : 'N/A',\n          \"park\": pack,\n          \"battery\": battery,\n          \"batteryClass\": batteryClass,\n          \"online\": onlineStatus,\n          \"use\": item.available == 0 ? 'Available' : 'In Use',\n          \"price\": item.price ? self.formatNumber(item.price) : 'N/A',\n          \"mileage\": _mileage,\n          \"inventory\": item.inventoryDays ? item.inventoryDays + self.$t('m.common.days') : 'N/A',\n          \"daysIdle\": lastFlameoutDay,\n          \"action\": \"<span>action</span>\",\n          \"vehicleId\": item.vehicleId,\n          \"unboundStatus\": item.isOnline == 3 ? self.$t('m.vehicle.unbound') : '',\n          \"info\": info,\n          \"lat\": item.lastLocationLat,\n          \"lng\": item.lastLocationLng,\n          \"area\": item.areaCoordinates ? item.areaCoordinates : []\n        };\n      });\n    }\n  }\n};",null]}