{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/drawGmap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/drawGmap.vue","mtime":1577174276000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _getIterator from \"/Users/nonda/nonda/nonda-saas-web/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport httpClient from \"@/utils/httpclient\";\nimport google from \"google\";\nimport { findIndex } from \"@/utils/db\";\nexport default {\n  name: 'drawMap',\n  props: ['data'],\n  watch: {\n    data: function data(newV) {\n      this.parkingName = newV.parkingName;\n      this.address = newV.address;\n      this.areaCoord = newV.areaCoordinate;\n      this.centerCoordinate = newV.centerCoordinate;\n      this.user = newV.parkingContactName;\n      this.phone = newV.parkingContactPhone;\n      this.parkingDes = newV.parkingAddressDesc;\n      this.getCityList(newV);\n      this.initEdit();\n    },\n    parkingName: function parkingName(newV) {\n      this.parkingName = this.trim(newV);\n      this.checkInput();\n    },\n    address: function address(newV) {\n      this.address = this.trim(newV);\n      this.checkInput();\n    }\n  },\n  data: function data() {\n    return {\n      list: [],\n      country: '',\n      state: '',\n      city: '',\n      area: '',\n      user: '',\n      parkingDes: \"\",\n      phone: '',\n      disable: true,\n      mapObj: null,\n      infoWindow: null,\n      geocoders: null,\n      drawManager: null,\n      polygonCompete: null,\n      locations: [],\n      parkingName: '',\n      drawButton: this.$t('m.map.start_draw'),\n      centerCoordinate: null,\n      address: '',\n      show: false,\n      content: \"\",\n      btnGroup: {\n        btnSecond: this.$t('m.tip.b_ok')\n      },\n      areaCoord: null,\n      bermudaTriangle: null,\n      isMapChanged: false\n    };\n  },\n  mounted: function mounted() {\n    if (!this.$route.params.id) {\n      this.getCityList();\n      this.initialize();\n    }\n  },\n  methods: {\n    getCityList: function getCityList(newV) {\n      var _this = this;\n\n      httpClient.get(\"/api/v1/getprovicescitynew\").then(function (res) {\n        if (res.data.code == 200) {\n          _this.APP_ENV == 'cn' ? _this.list = res.data.data.countryList.filter(function (item) {\n            return item.countryId == '248';\n          }) : _this.list = res.data.data.countryList;\n\n          if (_this.$route.params.id && newV.parkingCountryCode && newV.parkingStateCode && newV.parkingCityCode) {\n            var temp = findIndex(res.data.data.countryList, newV.parkingCountryCode, \"country\");\n            _this.country = temp.index + 1;\n            temp = findIndex(temp.item.proviceList, newV.parkingStateCode, \"provice\");\n            _this.state = temp.index + 1;\n            temp = findIndex(temp.item.cityList, newV.parkingCityCode, \"city\");\n            _this.city = temp.index + 1;\n            _this.area = 0; // google 不存在区\n          }\n        }\n      });\n    },\n    initEdit: function initEdit() {\n      var latlng = this.centerCoordinate.split(\" \");\n      this.mapObj = new google.maps.Map(document.getElementById('map-canvas'), {\n        zoom: 15,\n        center: {\n          lat: Number(latlng[1]),\n          lng: Number(latlng[0])\n        }\n      });\n      var centerControDiv = document.createElement('div');\n      this.centerControl(centerControDiv);\n      centerControDiv.index = 1;\n      this.mapObj.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControDiv);\n      this.geocoders = new google.maps.Geocoder();\n      var triangleCoords = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(this.areaCoord), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          triangleCoords.push({\n            lat: Number(item.split(\",\")[1]),\n            lng: Number(item.split(\",\")[0])\n          });\n        } // Construct the polygon.\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.bermudaTriangle = new google.maps.Polygon({\n        paths: triangleCoords,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35\n      });\n      this.bermudaTriangle.setMap(this.mapObj);\n      this.initDrawManager();\n    },\n    centerControl: function centerControl(controlDiv) {\n      var _this2 = this;\n\n      // Set CSS for the control border.\n      var controlUI = document.createElement('div');\n      controlUI.style.backgroundColor = '#fff';\n      controlUI.style.border = '2px solid #fff';\n      controlUI.style.borderRadius = '2px';\n      controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';\n      controlUI.style.cursor = 'pointer';\n      controlUI.style.marginTop = '10px';\n      controlUI.style.marginBottom = '22px';\n      controlUI.style.textAlign = 'center';\n      controlUI.title = 'Click to draw a geo fence';\n      controlDiv.appendChild(controlUI); // Set CSS for the control interior.\n\n      var controlText = document.createElement('div');\n      controlText.style.color = 'rgb(25,25,25)';\n      controlText.style.fontFamily = 'Roboto,Arial,sans-serif';\n      controlText.style.fontSize = '16px';\n      controlText.style.lineHeight = '38px';\n      controlText.style.paddingLeft = '5px';\n      controlText.style.paddingRight = '5px';\n      controlText.innerHTML = this.$t('m.map.start_draw');\n      controlUI.appendChild(controlText);\n      var controlUI1 = document.createElement('div');\n      controlUI1.style.display = 'none';\n      controlUI1.style.backgroundColor = '#fff';\n      controlUI1.style.border = '2px solid #fff';\n      controlUI1.style.borderRadius = '2px';\n      controlUI1.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';\n      controlUI1.style.cursor = 'pointer';\n      controlUI1.style.marginTop = '10px';\n      controlUI1.style.marginBottom = '22px';\n      controlUI1.style.textAlign = 'center';\n      controlUI1.title = 'Click to redraw the geo fence';\n      controlDiv.appendChild(controlUI1); // Set CSS for the control interior.\n\n      var controlText1 = document.createElement('div');\n      controlText1.style.color = 'rgb(25,25,25)';\n      controlText1.style.fontFamily = 'Roboto,Arial,sans-serif';\n      controlText1.style.fontSize = '16px';\n      controlText1.style.lineHeight = '38px';\n      controlText1.style.paddingLeft = '5px';\n      controlText1.style.paddingRight = '5px';\n      controlText1.innerHTML = this.$t('m.map.redraw');\n      controlUI1.appendChild(controlText1); // Setup the click event listeners: simply set the map to Chicago.\n\n      var flightPath = new google.maps.Polyline({\n        strokeColor: \"#0000FF\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2\n      });\n      flightPath.setMap(this.mapObj);\n      controlUI.addEventListener('click', function () {\n        controlUI.style.display = 'none';\n        controlUI1.style.display = 'block';\n\n        _this2.drawManager.setOptions({\n          drawingMode: 'polygon',\n          fillColor: '#fff'\n        });\n\n        _this2.$route.params.id ? _this2.bermudaTriangle.setMap(null) : '';\n      });\n      controlUI1.addEventListener('click', function () {\n        _this2.polygonCompete.setMap(null);\n\n        _this2.drawManager.setOptions({\n          drawingMode: 'polygon',\n          fillColor: '#fff'\n        });\n      });\n    },\n    initDrawManager: function initDrawManager() {\n      var _this3 = this;\n\n      this.checkInput();\n      this.drawManager = new google.maps.drawing.DrawingManager({\n        drawingMode: '',\n        drawingControl: false,\n        //设置图形显示样式\n        circleOptions: {\n          fillColor: '#ffff00',\n          fillOpacity: 1,\n          strokeWeight: 5,\n          clickable: false,\n          editable: true,\n          zIndex: 1\n        },\n        polygonOptions: {\n          strokeColor: \"#FF0000\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: \"#FF0000\",\n          fillOpacity: 0.35,\n          editable: true\n        }\n      });\n      this.drawManager.setMap(this.mapObj);\n      google.maps.event.addListener(this.drawManager, 'polygoncomplete', function (polygon) {\n        _this3.polygonCompete = polygon;\n\n        _this3.drawManager.setOptions({\n          drawingMode: ''\n        });\n      });\n      google.maps.event.addListener(this.drawManager, 'polygoncomplete', function (polygon) {\n        var array = polygon.getPath().getArray();\n\n        _this3.showLonLat(array);\n      });\n    },\n    initialize: function initialize() {\n      var _this4 = this;\n\n      var mapOptions = {\n        zoom: 15\n      };\n      this.mapObj = new google.maps.Map(document.getElementById(\"map-canvas\"), mapOptions);\n      this.infoWindow = new google.maps.InfoWindow();\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          var pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n\n          _this4.infoWindow.setPosition(pos);\n\n          _this4.infoWindow.setContent('Current Location');\n\n          _this4.mapObj.setCenter(pos);\n\n          var centerControDiv = document.createElement('div');\n\n          _this4.centerControl(centerControDiv);\n\n          centerControDiv.index = 1;\n          _this4.geocoders = new google.maps.Geocoder();\n\n          _this4.mapObj.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControDiv);\n        }, function () {\n          this.handleError(true);\n        });\n      } else {\n        this.handleError(false);\n      }\n\n      this.initDrawManager();\n    },\n    handleError: function handleError(status) {\n      this.infoWindow.setPosition(this.mapObj.getCenter());\n      this.infoWindow.setContent(status ? 'Error: The Geolocation service failed.' : 'Error: Your browser doesn\\'t support geolocation.');\n      this.infoWindow.open(this.mapObj);\n    },\n    showTip: function showTip(data) {\n      this.show = true;\n      this.content = this.$t('m.map.warn_repeat', {\n        data: data\n      });\n    },\n    getLocate: function getLocate() {\n      var _this5 = this;\n\n      this.checkInput();\n\n      if (this.address) {\n        this.geocoders.geocode({\n          'address': this.address\n        }, function (results, status) {\n          if (status == \"OK\") {\n            _this5.mapObj.setCenter(results[0].geometry.location);\n\n            new google.maps.Marker({\n              map: _this5.mapObj,\n              position: results[0].geometry.location,\n              icon: {\n                url: \"https://cdn.shopify.com/s/files/1/0703/1149/files/Location.png?807016\",\n                scaledSize: new google.maps.Size(30, 30)\n              }\n            });\n          } else {\n            console.log('Geocode was not successful for the following reason: ' + status);\n          }\n        });\n      }\n    },\n    trim: function trim(str) {\n      return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    },\n    checkInput: function checkInput() {\n      if (!this.parkingName || !this.user || !this.phone || !this.areaCoord || this.areaCoord.length == 0 || !this.address || !this.country || !this.state || !this.city) {\n        this.disable = true;\n        return;\n      }\n\n      this.disable = false;\n    },\n    showLonLat: function showLonLat(arry) {\n      var _this6 = this;\n\n      var locations = [];\n      arry.map(function (item) {\n        locations.push(item);\n      });\n      this.areaCoord = locations;\n      locations[arry.length] = arry[0];\n      httpClient.post('/api/v1/lot/isRepeated', {\n        parkingName: this.parkingName,\n        address: this.address,\n        areaCoordinate: locations,\n        id: this.$route.params.id,\n        lotType: 1\n      }).then(function (response) {\n        if (response.data.data != null) {\n          _this6.isMapChanged = true;\n\n          _this6.showTip(response.data.data);\n        } else {\n          _this6.isMapChanged = true;\n        }\n\n        _this6.checkInput();\n      });\n    },\n    submitData: function submitData() {\n      var _this7 = this;\n\n      this.checkInput();\n      var link = '';\n\n      if (!this.data) {\n        link = '/api/v1/lot/insert';\n      } else {\n        link = '/api/v1/lot/update';\n      }\n\n      httpClient.post(link, {\n        parkingName: this.parkingName,\n        address: this.address,\n        areaCoordinate: this.isMapChanged === true ? this.areaCoord : [],\n        id: this.$route.params.id,\n        parkingAddressDesc: this.parkingDes,\n        parkingContactName: this.user,\n        parkingContactPhone: this.phone,\n        parkingCountryCode: this.list[this.country - 1].countryId,\n        parkingStateCode: this.list[this.country - 1]['proviceList'][this.state - 1].provicesId,\n        parkingCityCode: this.list[this.country - 1]['proviceList'][this.state - 1]['cityList'][this.city - 1].cityId,\n        parkingAreaCode: ''\n      }).then(function (response) {\n        if (response.data.code == 200) {\n          _this7.$router.push('/inventory/lots/list');\n        } else {\n          _this7.show = true;\n          _this7.content = \"Lot Name: <strong>\".concat(response.data.data, \"</strong> Existed.\");\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["drawGmap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"draw-map\">\n        <b-row>\n            <b-col sm=\"6\">\n                <b-form-group>\n                    <label>{{ $t('m.lots.name') }}</label>\n                    <b-form-input type=\"text\" v-model=\"parkingName\" @change=\"checkInput\"></b-form-input>\n                </b-form-group>\n                <b-form-group>\n                    <b-row>\n                        <b-col :sm=\"GLOBAL.APP_ENV == 'cn' ? 3 : 4\" class=\"padding0\">\n                            <label>{{ $t('m.add_shop.country') }}</label>\n                            <select class=\"form-control\" v-model=\"country\" @change=\"checkInput\">\n                                <option value=\"\" disabled selected>{{ $t('m.add_shop.please_select') }}</option>\n                                <option v-for=\"(item, key) in list\" :key=\"key\" :value=\"key + 1\">{{ $i18n.locale == 'zh-CN' ? item.countryCName : item.countryName }}</option>\n                            </select>\n                        </b-col>\n                        <b-col :sm=\"GLOBAL.APP_ENV == 'cn' ? 3 : 4\" class=\"padding0\">\n                            <label>{{ $t('m.add_shop.state') }}</label>\n                            <select class=\"form-control\" v-model=\"state\" @change=\"checkInput\">\n                                <option value=\"\" disabled selected>{{ $t('m.add_shop.please_select') }}</option>\n                                <option v-for=\"(item, key) in (country ? list[country - 1]['proviceList'] : [])\" :value=\"key + 1\" :key=\"key\">{{ $i18n.locale == 'zh-CN' ? item.proviceCName : item.proviceName}}</option>\n                            </select>\n                        </b-col>\n                        <b-col :sm=\"GLOBAL.APP_ENV == 'cn' ? 3 : 4\" class=\"padding0\">\n                            <label>{{ $t('m.add_shop.city') }}</label>\n                            <select class=\"form-control\" v-model=\"city\" @change=\"checkInput\">\n                                <option value=\"\" disabled selected>{{ $t('m.add_shop.please_select') }}</option>\n                                <option v-for=\"(item, key) in (country && state ? list[country - 1]['proviceList'][state - 1]['cityList'] : [] )\" :value=\"key + 1\" :key=\"key\">{{ $i18n.locale == 'zh-CN' ? item.cityCName : item.cityName }}</option>\n                            </select>\n                        </b-col>\n                        <b-col sm=\"3\" v-if=\"GLOBAL.APP_ENV == 'cn'\">\n                            <label>{{ $t('m.add_shop.area') }}</label>\n                            <select class=\"form-control\" v-model=\"area\" @change=\"checkInput\">\n                                <option value=\"\" disabled selected>{{ $t('m.add_shop.please_select') }}</option>\n                                <option v-for=\"(item, key) in (country && state && city ? list[country - 1]['proviceList'][state - 1]['cityList'][city -1]['areaDTOList'] : [])\" :value=\"key + 1\" :key=\"key\">{{ item.areaName }}</option>\n                            </select>\n                        </b-col>\n                    </b-row>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.common.contact_person') }}</label>\n                    <b-form-input type=\"text\" @change=\"checkInput()\" v-model=\"user\" maxlength=\"30\"></b-form-input>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.common.contact_phone') }}</label>\n                    <b-form-input type=\"number\" v-model=\"phone\" maxlength=\"15\" @change=\"checkInput\"></b-form-input>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.lots.address') }}</label>\n                    <b-input-group>\n                        <b-form-input type=\"text\" v-model=\"address\" maxlength=\"100\" @change=\"checkInput\"></b-form-input>\n                        <b-input-group-append>\n                            <b-button variant=\"secondary\" id=\"locate\" @click=\"getLocate()\" @change=\"checkInput\">{{ $t('m.lots.b_locate') }}</b-button>\n                        </b-input-group-append>\n                    </b-input-group>\n                </b-form-group>\n                <b-form-group>\n                    <label>{{ $t('m.common.address_des') }}</label>\n                    <b-form-input type=\"text\" v-model=\"parkingDes\" maxlength=\"200\"></b-form-input>\n                </b-form-group>\n            </b-col>\n        </b-row>\n        <p class=\"draw-tip\">{{ $t('m.lots.add_lot_p') }}</p>\n        <div class=\"draw-tip\">{{ $t('m.map.double_tip') }}</div>\n        <div id=\"map-canvas\" class=\"map-modal-custom\">\n        </div>\n\n        <b-row class=\"text-center\">\n            <b-col sm=\"12\" class=\"text-center\">\n                <b-button class=\"btn btn-primary submit btn-syl\" @click=\"submitData()\" :disabled=\"disable\">{{ $t('m.common.b_save') }}</b-button>\n            </b-col>\n        </b-row>\n    </div>\n</template>\n\n<script>\n    import httpClient from \"@/utils/httpclient\";\n    import google from \"google\";\n    import { findIndex } from \"@/utils/db\";\n    export default {\n        name: 'drawMap',\n        props: ['data'],\n        watch: {\n            data(newV){\n                this.parkingName = newV.parkingName;\n                this.address = newV.address;\n                this.areaCoord = newV.areaCoordinate;\n                this.centerCoordinate = newV.centerCoordinate;\n                this.user = newV.parkingContactName;\n                this.phone = newV.parkingContactPhone;\n                this.parkingDes = newV.parkingAddressDesc;\n                this.getCityList(newV);\n                this.initEdit()\n            },\n            parkingName(newV) {\n                this.parkingName = this.trim(newV);\n                this.checkInput();\n            },\n            address(newV) {\n                this.address = this.trim(newV);\n                this.checkInput();\n            }\n        },\n        data() {\n            return {\n                list: [],\n                country: '',\n                state: '',\n                city: '',\n                area: '',\n                user: '',\n                parkingDes: \"\",\n                phone: '',\n                disable: true,\n                mapObj: null,\n                infoWindow: null,\n                geocoders: null,\n                drawManager: null,\n                polygonCompete: null,\n                locations: [],\n                parkingName: '',\n                drawButton: this.$t('m.map.start_draw'),\n                centerCoordinate: null,\n                address: '',\n                show: false,\n                content: \"\",\n                btnGroup: {\n                    btnSecond: this.$t('m.tip.b_ok')\n                },\n                areaCoord: null,\n                bermudaTriangle: null,\n                isMapChanged:false\n            }\n        },\n        mounted() {\n            if (!this.$route.params.id) {\n                this.getCityList();\n                this.initialize()\n            }\n        },\n        methods:{\n            getCityList(newV) {\n                httpClient.get(\"/api/v1/getprovicescitynew\").then((res) => {\n                    if (res.data.code == 200) {\n                        this.APP_ENV == 'cn' ?\n                            this.list = res.data.data.countryList.filter((item) => {\n                                return item.countryId == '248'\n                            })\n                            :\n                            this.list = res.data.data.countryList;\n                        if (this.$route.params.id &&  newV.parkingCountryCode && newV.parkingStateCode &&  newV.parkingCityCode) {\n                            let temp = findIndex(res.data.data.countryList, newV.parkingCountryCode, \"country\");\n                            this.country = temp.index + 1;\n                            temp = findIndex(temp.item.proviceList, newV.parkingStateCode, \"provice\");\n                            this.state = temp.index + 1;\n                            temp = findIndex(temp.item.cityList, newV.parkingCityCode, \"city\");\n                            this.city = temp.index + 1;\n                            this.area = 0; // google 不存在区\n                        }\n                    }\n                });\n            },\n            initEdit() {\n                let latlng = this.centerCoordinate.split(\" \");\n                this.mapObj = new google.maps.Map(document.getElementById('map-canvas'), {\n                    zoom: 15,\n                    center: {lat: Number(latlng[1]), lng: Number(latlng[0])}\n                });\n                let centerControDiv = document.createElement('div');\n                this.centerControl(centerControDiv);\n                centerControDiv.index = 1;\n                this.mapObj.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControDiv);\n                this.geocoders = new google.maps.Geocoder();\n                let triangleCoords = [];\n                for (let item of this.areaCoord) {\n                    triangleCoords.push({lat: Number(item.split(\",\")[1]), lng: Number(item.split(\",\")[0]) })\n                }\n                // Construct the polygon.\n                this.bermudaTriangle = new google.maps.Polygon({\n                    paths: triangleCoords,\n                    strokeColor: '#FF0000',\n                    strokeOpacity: 0.8,\n                    strokeWeight: 2,\n                    fillColor: '#FF0000',\n                    fillOpacity: 0.35\n                });\n\n                this.bermudaTriangle.setMap(this.mapObj);\n                this.initDrawManager();\n            },\n            centerControl(controlDiv) {\n\n                // Set CSS for the control border.\n                let controlUI = document.createElement('div');\n                controlUI.style.backgroundColor = '#fff';\n                controlUI.style.border = '2px solid #fff';\n                controlUI.style.borderRadius = '2px';\n                controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';\n                controlUI.style.cursor = 'pointer';\n                controlUI.style.marginTop = '10px';\n                controlUI.style.marginBottom = '22px';\n                controlUI.style.textAlign = 'center';\n                controlUI.title = 'Click to draw a geo fence';\n                controlDiv.appendChild(controlUI);\n\n                // Set CSS for the control interior.\n                var controlText = document.createElement('div');\n                controlText.style.color = 'rgb(25,25,25)';\n                controlText.style.fontFamily = 'Roboto,Arial,sans-serif';\n                controlText.style.fontSize = '16px';\n                controlText.style.lineHeight = '38px';\n                controlText.style.paddingLeft = '5px';\n                controlText.style.paddingRight = '5px';\n                controlText.innerHTML = this.$t('m.map.start_draw');\n                controlUI.appendChild(controlText);\n\n\n                var controlUI1 = document.createElement('div');\n                controlUI1.style.display = 'none';\n                controlUI1.style.backgroundColor = '#fff';\n                controlUI1.style.border = '2px solid #fff';\n                controlUI1.style.borderRadius = '2px';\n                controlUI1.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';\n                controlUI1.style.cursor = 'pointer';\n                controlUI1.style.marginTop = '10px';\n                controlUI1.style.marginBottom = '22px';\n                controlUI1.style.textAlign = 'center';\n                controlUI1.title = 'Click to redraw the geo fence';\n                controlDiv.appendChild(controlUI1);\n\n                // Set CSS for the control interior.\n                let controlText1 = document.createElement('div');\n                controlText1.style.color = 'rgb(25,25,25)';\n                controlText1.style.fontFamily = 'Roboto,Arial,sans-serif';\n                controlText1.style.fontSize = '16px';\n                controlText1.style.lineHeight = '38px';\n                controlText1.style.paddingLeft = '5px';\n                controlText1.style.paddingRight = '5px';\n                controlText1.innerHTML = this.$t('m.map.redraw');\n                controlUI1.appendChild(controlText1);\n\n                // Setup the click event listeners: simply set the map to Chicago.\n                var flightPath=new google.maps.Polyline({\n                    strokeColor:\"#0000FF\",\n                    strokeOpacity:0.8,\n                    strokeWeight:2\n                });\n\n                flightPath.setMap(this.mapObj);\n                controlUI.addEventListener('click',() => {\n                    controlUI.style.display = 'none';\n                    controlUI1.style.display = 'block';\n                    this.drawManager.setOptions({\n                        drawingMode: 'polygon',\n                        fillColor:'#fff'\n                    });\n                    this.$route.params.id ? this.bermudaTriangle.setMap(null) : '';\n\n                });\n                controlUI1.addEventListener('click', () => {\n                    this.polygonCompete.setMap(null);\n                    this.drawManager.setOptions({\n                        drawingMode: 'polygon',\n                        fillColor:'#fff'\n                    });\n                });\n\n            },\n            initDrawManager() {\n                this.checkInput();\n                this.drawManager = new google.maps.drawing.DrawingManager(\n                    {\n                        drawingMode: '',\n                        drawingControl: false,\n                        //设置图形显示样式\n                        circleOptions: {\n                            fillColor: '#ffff00',\n                            fillOpacity: 1,\n                            strokeWeight: 5,\n                            clickable: false,\n                            editable: true,\n                            zIndex: 1\n                        },\n                        polygonOptions: {\n                            strokeColor: \"#FF0000\",\n                            strokeOpacity: 0.8,\n                            strokeWeight: 2,\n                            fillColor: \"#FF0000\",\n                            fillOpacity: 0.35,\n                            editable: true,\n                        }\n                    }\n                );\n                this.drawManager.setMap(this.mapObj);\n                google.maps.event.addListener(this.drawManager, 'polygoncomplete', polygon => {\n                    this.polygonCompete = polygon;\n                    this.drawManager.setOptions({\n                        drawingMode: ''\n                    });\n                });\n                google.maps.event.addListener(this.drawManager, 'polygoncomplete', polygon => {\n                    let array = polygon.getPath().getArray();\n                    this.showLonLat(array)\n                })\n            },\n            initialize() {\n                let mapOptions = {\n                    zoom: 15\n                };\n                this.mapObj = new google.maps.Map(document.getElementById(\"map-canvas\"), mapOptions);\n                this.infoWindow = new google.maps.InfoWindow;\n                if (navigator.geolocation) {\n                    navigator.geolocation.getCurrentPosition(position => {\n                        let pos = {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        };\n                        this.infoWindow.setPosition(pos);\n                        this.infoWindow.setContent('Current Location');\n                        this.mapObj.setCenter(pos);\n\n                        let centerControDiv = document.createElement('div');\n                        this.centerControl(centerControDiv);\n                        centerControDiv.index = 1;\n                        this.geocoders = new google.maps.Geocoder();\n                        this.mapObj.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControDiv);\n\n                    }, function () {\n                        this.handleError(true)\n                    })\n                } else {\n                    this.handleError(false)\n                }\n                this.initDrawManager()\n            },\n            handleError(status) {\n                this.infoWindow.setPosition(this.mapObj.getCenter());\n                this.infoWindow.setContent(status ? 'Error: The Geolocation service failed.' : 'Error: Your browser doesn\\'t support geolocation.');\n                this.infoWindow.open(this.mapObj)\n            },\n            showTip(data) {\n                this.show = true;\n                this.content = this.$t('m.map.warn_repeat', {data: data});\n            },\n            getLocate() {\n                this.checkInput();\n                if (this.address) {\n                    this.geocoders.geocode({'address': this.address}, (results, status) => {\n                        if (status == \"OK\") {\n                            this.mapObj.setCenter(results[0].geometry.location);\n                            new google.maps.Marker({\n                                map: this.mapObj,\n                                position: results[0].geometry.location,\n                                icon: {\n                                    url: \"https://cdn.shopify.com/s/files/1/0703/1149/files/Location.png?807016\",\n                                    scaledSize: new google.maps.Size(30, 30)\n                                }\n                            });\n                        } else {\n                            console.log('Geocode was not successful for the following reason: ' + status);\n                        }\n                    })\n                }\n            },\n            trim(str){\n                return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n            },\n            checkInput() {\n                if (!this.parkingName || !this.user || !this.phone || !this.areaCoord || this.areaCoord.length == 0 || !this.address || !this.country || !this.state || !this.city) {\n                    this.disable = true;\n                    return;\n                }\n                this.disable = false;\n            },\n            showLonLat(arry) {\n                let locations = [];\n                arry.map(item => {\n                    locations.push(item);\n                });\n                this.areaCoord = locations;\n                locations[arry.length] = arry[0];\n                httpClient.post('/api/v1/lot/isRepeated', {\n                    parkingName: this.parkingName,\n                    address: this.address,\n                    areaCoordinate: locations,\n                    id: this.$route.params.id,\n                    lotType: 1\n                }).then(response => {\n                    if (response.data.data != null) {\n                        this.isMapChanged = true;\n                        this.showTip(response.data.data)\n                    } else {\n                        this.isMapChanged = true;\n                    }\n                    this.checkInput();\n                })\n            },\n            submitData() {\n                this.checkInput();\n                let link='';\n                if(!this.data){\n                    link = '/api/v1/lot/insert'\n                }else{\n                    link = '/api/v1/lot/update'\n                }\n                httpClient.post(link, {\n                    parkingName: this.parkingName,\n                    address: this.address,\n                    areaCoordinate: this.isMapChanged === true ? this.areaCoord : [],\n                    id: this.$route.params.id,\n                    parkingAddressDesc: this.parkingDes,\n                    parkingContactName: this.user,\n                    parkingContactPhone: this.phone,\n                    parkingCountryCode: this.list[this.country - 1].countryId,\n                    parkingStateCode: this.list[this.country - 1]['proviceList'][this.state - 1].provicesId,\n                    parkingCityCode: this.list[this.country - 1]['proviceList'][this.state - 1]['cityList'][this.city - 1].cityId,\n                    parkingAreaCode: ''\n                }).then(response => {\n                    if (response.data.code == 200) {\n                        this.$router.push('/inventory/lots/list')\n                    } else {\n                        this.show = true;\n                        this.content = `Lot Name: <strong>${response.data.data}</strong> Existed.`;\n                    }\n                })\n            }\n        },\n    }\n</script>\n\n\n<style lang=\"scss\" scoped>\n    .draw-map {\n        .draw-tip {\n            margin-bottom: 2px;\n            color:#f86c6b;\n        }\n        .map-btn-group {\n            position: absolute;\n            margin-top: 10px;\n            z-index: 1;\n            margin-left: 20px;\n            ul {\n                color: black;\n                padding: 0 20px;\n                height: 40px;\n                line-height: 40px;\n                background: #ffffff;\n                font-size: 18px;\n                li {\n                    cursor: pointer;\n                    display: inline-block;\n                }\n            }\n        }\n        #map-canvas {\n            height: 40vh;\n        }\n        .submit {\n            background-color: #20a8d8!important;\n            border-color: #20a8d8!important;\n        }\n        .drawbutton {\n            height: 40px;\n            background: #ffffff;\n            color: black;\n            text-align: center;\n            line-height: 40px;\n            position: absolute;\n            z-index: 1;\n\n            margin-top: 10px;\n            cursor: pointer;\n        }\n        .left-button {\n            left: 45%;\n        }\n        .btn-syl {\n            margin-top: 12px;\n            color: #ffffff;\n        }\n    }\n</style>\n"],"sourceRoot":"src/components"}]}