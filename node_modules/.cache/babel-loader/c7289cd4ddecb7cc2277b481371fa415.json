{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js!/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/src/utils/httpclient.js","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/utils/httpclient.js","mtime":1560759403000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/Users/nonda/nonda/nonda-saas-web/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"/Users/nonda/nonda/nonda-saas-web/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _Promise from \"/Users/nonda/nonda/nonda-saas-web/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport axios from 'axios';\nimport { Base64 } from 'js-base64';\nimport sha1 from 'js-sha1';\n\nvar uuidv4 = require('uuid/v4'); // axios.defaults.withCredentials = true;\n// axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n\nvar httpclient = axios.create({\n  baseURL: process.env.VUE_APP_BASE_URL,\n  timeout: 60000\n});\nvar loginApiPath = '/api/v1/login';\nvar checkLoginApiPath = '/api/v1/checklogin';\nhttpclient.defaults.withCredentials = true;\nhttpclient.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\nhttpclient.interceptors.request.use(function (config) {\n  config.headers['X-Request-ZId'] = uuidv4();\n  config.headers['X-Request-Ztime'] = new Date().valueOf();\n  config.headers['X-Installation-Id'] = 'saas-web';\n  var url = config.url;\n\n  if (!url.startsWith(\"http\")) {\n    url = config.baseURL + url;\n  }\n\n  if (!config.params) {\n    config.params = {};\n  }\n\n  config.params['zos'] = 'web';\n  config.params['zname'] = 'web';\n  config.params['zversion'] = '1.0.0';\n  url = getUrl(url, config.params);\n  config.headers['X-Track-Id'] = buildTrackId(url, config.headers['X-Request-ZId'], config.headers['X-Request-Ztime'], config.headers['X-Installation-Id'], config.data); // console.log(config);\n\n  return config;\n}, function (error) {\n  return _Promise.reject(error);\n});\nhttpclient.interceptors.response.use(function (response) {\n  // return new Promise({\n  //     status: response.status,\n  //     data: response.data.data\n  // });\n  return response;\n}, function (error) {\n  if (error.response && !isLoginApi(error.response.config.url)) {\n    switch (error.response.status) {\n      case 401:\n        // todo: redirect to login page\n        // console.log(\"401\");\n        window.location.href = '/login';\n    }\n  }\n\n  return _Promise.reject(error);\n});\n\nfunction isLoginApi(url) {\n  return url.indexOf(loginApiPath) >= 0 || url.indexOf(checkLoginApiPath) >= 0;\n}\n\nfunction getUrl(url, params) {\n  var markIndex = url.indexOf('?');\n  var paramObj = {};\n  var urlPath = url;\n\n  if (markIndex > 0) {\n    var queryString = url.substring(markIndex + 1);\n    urlPath = url.substring(0, markIndex);\n    var arr = queryString.split('&'); // console.log(arr);\n\n    for (var i = 0; i < arr.length; i++) {\n      var paramArr = arr[i].split('=');\n      var key = paramArr[0];\n      var value = paramArr[1];\n      paramObj[key] = value;\n    }\n  }\n\n  if (params != undefined) {\n    for (var k in params) {\n      var v = params[k];\n      paramObj[k] = v;\n    }\n  }\n\n  var allKeys = _Object$keys(paramObj).sort();\n\n  var sortedQueryString = \"\";\n\n  for (var _i = 0; _i < allKeys.length; _i++) {\n    sortedQueryString += allKeys[_i] + \"=\" + paramObj[allKeys[_i]] + \"&\";\n  } // 去掉末尾的&\n\n\n  sortedQueryString = sortedQueryString.substring(0, sortedQueryString.length - 1);\n  return urlPath + \"?\" + sortedQueryString;\n}\n\nfunction buildTrackId(url, requestId, requestZtime, installId, body) {\n  var secret = 'nonda-saas-web';\n  var xTrackId = url + secret + requestId + installId + requestZtime;\n\n  if (body != undefined) {\n    var bodystr = _JSON$stringify(body);\n\n    if (bodystr !== '{}') {\n      xTrackId = xTrackId + _JSON$stringify(body);\n    }\n  }\n\n  return Base64.encode(sha1(xTrackId));\n}\n\nexport default httpclient;",null]}