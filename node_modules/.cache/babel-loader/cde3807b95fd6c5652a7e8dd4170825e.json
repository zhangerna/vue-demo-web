{"remainingRequest":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js!/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nonda/nonda/nonda-saas-web/src/components/amapForAddress.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nonda/nonda/nonda-saas-web/src/components/amapForAddress.vue","mtime":1577088264000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nonda/nonda/nonda-saas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport AMap from 'AMap';\nexport default {\n  name: \"amapForAddress\",\n  props: [\"address\", \"randomId\"],\n  data: function data() {\n    return {\n      address1: \"\",\n      mapObj: null\n    };\n  },\n  watch: {\n    address: function address(newVal) {\n      // console.log(this.randomId)\n      this.address1 = newVal;\n      this.initMap();\n    }\n  },\n  methods: {\n    changeMapType: function changeMapType(type) {\n      if (type == 'default') {\n        this.safeLayer.hide();\n        this.roadLayer.hide();\n      } else {\n        this.roadLayer.show();\n        this.safeLayer.show();\n      }\n    },\n    initMap: function initMap() {\n      var _this = this;\n\n      this.mapObj = new AMap.Map('map', {\n        zoom: 17\n      });\n      this.safeLayer = new AMap.TileLayer.Satellite({});\n      this.roadLayer = new AMap.TileLayer.RoadNet({});\n      this.mapObj.add(this.safeLayer);\n      this.mapObj.add(this.roadLayer);\n      this.safeLayer.hide();\n      this.roadLayer.hide();\n      this.geocoders = new AMap.Geocoder();\n      this.geocoders.getLocation(this.address1, function (status, result) {\n        if (status === 'complete' && result.geocodes.length) {\n          _this.markers = new AMap.Marker({\n            position: result.geocodes[0].location,\n            icon: new AMap.Icon({\n              image: \"https://cdn.shopify.com/s/files/1/0703/1149/files/Store.svg?854352\",\n              size: new AMap.Size(60, 60),\n              imageSize: new AMap.Size(20, 30)\n            })\n          });\n\n          _this.mapObj.add(_this.markers);\n\n          _this.mapObj.setFitView(_this.markers);\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["amapForAddress.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAcA,OAAA,IAAA,MAAA,MAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;AAEA,EAAA,KAAA,EAAA,CAAA,SAAA,EAAA,UAAA,CAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,MAAA,EAAA;AAFA,KAAA;AAIA,GARA;AASA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA,iBAAA,MAAA,EAAA;AACA;AACA,WAAA,QAAA,GAAA,MAAA;AACA,WAAA,OAAA;AACA;AALA,GATA;AAgBA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,yBACA,IADA,EACA;AACA,UAAA,IAAA,IAAA,SAAA,EAAA;AACA,aAAA,SAAA,CAAA,IAAA;AACA,aAAA,SAAA,CAAA,IAAA;AACA,OAHA,MAGA;AACA,aAAA,SAAA,CAAA,IAAA;AACA,aAAA,SAAA,CAAA,IAAA;AACA;AACA,KATA;AAUA,IAAA,OAVA,qBAUA;AAAA;;AACA,WAAA,MAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,KAAA,EAAA;AACA,QAAA,IAAA,EAAA;AADA,OAAA,CAAA;AAGA,WAAA,SAAA,GAAA,IAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,EAAA,CAAA;AAEA,WAAA,SAAA,GAAA,IAAA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AAEA,WAAA,MAAA,CAAA,GAAA,CAAA,KAAA,SAAA;AACA,WAAA,MAAA,CAAA,GAAA,CAAA,KAAA,SAAA;AACA,WAAA,SAAA,CAAA,IAAA;AACA,WAAA,SAAA,CAAA,IAAA;AAEA,WAAA,SAAA,GAAA,IAAA,IAAA,CAAA,QAAA,EAAA;AACA,WAAA,SAAA,CAAA,WAAA,CAAA,KAAA,QAAA,EAAA,UAAA,MAAA,EAAA,MAAA,EAAA;AACA,YAAA,MAAA,KAAA,UAAA,IAAA,MAAA,CAAA,QAAA,CAAA,MAAA,EAAA;AACA,UAAA,KAAA,CAAA,OAAA,GAAA,IAAA,IAAA,CAAA,MAAA,CAAA;AACA,YAAA,QAAA,EAAA,MAAA,CAAA,QAAA,CAAA,CAAA,EAAA,QADA;AAEA,YAAA,IAAA,EAAA,IAAA,IAAA,CAAA,IAAA,CAAA;AACA,cAAA,KAAA,EAAA,oEADA;AAEA,cAAA,IAAA,EAAA,IAAA,IAAA,CAAA,IAAA,CAAA,EAAA,EAAA,EAAA,CAFA;AAGA,cAAA,SAAA,EAAA,IAAA,IAAA,CAAA,IAAA,CAAA,EAAA,EAAA,EAAA;AAHA,aAAA;AAFA,WAAA,CAAA;;AAQA,UAAA,KAAA,CAAA,MAAA,CAAA,GAAA,CAAA,KAAA,CAAA,OAAA;;AACA,UAAA,KAAA,CAAA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,OAAA;AACA;AACA,OAbA;AAeA;AAvCA;AAhBA,CAAA","sourcesContent":["<template>\n    <div class=\"maps\">\n        <div class=\"map-btn-group\">\n            <ul>\n                <li @click=\"changeMapType('default')\">地图 |</li>\n                <li @click=\"changeMapType('sate')\">&nbsp;卫星图像</li>\n            </ul>\n        </div>\n        <div id=\"map\">\n        </div>\n    </div>\n</template>\n\n<script>\n    import AMap from 'AMap'\n    export default {\n        name: \"amapForAddress\",\n        props: [\"address\",\"randomId\"],\n        data() {\n            return {\n                address1: \"\",\n                mapObj: null\n            }\n        },\n        watch: {\n            address: function (newVal) {\n                // console.log(this.randomId)\n                this.address1 = newVal;\n                this.initMap()\n            }\n        },\n        methods: {\n            changeMapType(type) {\n                if (type == 'default') {\n                    this.safeLayer.hide();\n                    this.roadLayer.hide();\n                } else {\n                    this.roadLayer.show();\n                    this.safeLayer.show();\n                }\n            },\n            initMap(){\n                this.mapObj = new AMap.Map('map', {\n                    zoom: 17\n                });\n                this.safeLayer = new AMap.TileLayer.Satellite({\n                });\n                this.roadLayer = new AMap.TileLayer.RoadNet({\n                });\n                this.mapObj.add(this.safeLayer);\n                this.mapObj.add(this.roadLayer);\n                this.safeLayer.hide();\n                this.roadLayer.hide();\n\n                this.geocoders = new AMap.Geocoder();\n                this.geocoders.getLocation(this.address1, (status, result) => {\n                    if (status === 'complete' && result.geocodes.length) {\n                        this.markers = new AMap.Marker({\n                            position: result.geocodes[0].location,\n                            icon: new AMap.Icon({\n                                image: \"https://cdn.shopify.com/s/files/1/0703/1149/files/Store.svg?854352\",\n                                size: new AMap.Size(60, 60),\n                                imageSize: new AMap.Size(20,30),\n                            })\n                        });\n                        this.mapObj.add(this.markers);\n                        this.mapObj.setFitView(this.markers);\n                    }\n                })\n\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .maps {\n        .map-btn-group {\n            position: absolute;\n            margin-top: 10px;\n            z-index: 1;\n            margin-left: 20px;\n            ul {\n                color: grey;\n                padding: 0 20px;\n                height: 40px;\n                line-height: 40px;\n                background: #ffffff;\n                font-size: 18px;\n                li {\n                    cursor: pointer;\n                    display: inline-block;\n                }\n            }\n        }\n    }\n    #map {\n        height: 400px ;\n        .gm-style .gm-style-iw-d {\n            max-width: 280px!important;\n            img {\n                width: 100%;\n            }\n        }\n    }\n    .modal-dialog {\n    // max-width: 50% !important;\n    width: 50% !important;\n}\n</style>\n"],"sourceRoot":"src/components"}]}